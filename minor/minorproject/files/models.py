CELERY_ENABLED: False
# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#     * Rearrange models' order
#     * Make sure each model has one field with primary_key=True
# Feel free to rename the models, but don't rename db_table values or field names.
#
# Also note: You'll have to insert the output of 'django-admin.py sqlcustom [appname]'
# into your database.

from salesforce import models

class Acceptedeventrelation(models.Model):
    relationid = models.ForeignKey('Contact', null=True, db_column=u'RelationId', blank=True) # Field name made lowercase.
    eventid = models.ForeignKey('Event', null=True, db_column=u'EventId', blank=True) # Field name made lowercase.
    accountid = models.ForeignKey('Account', null=True, db_column=u'AccountId', blank=True) # Field name made lowercase.
    respondeddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Response Date', db_column=u'RespondedDate', blank=True) # Field name made lowercase.
    response = models.CharField(max_length=255, verbose_name=u'Response', sf_read_only=models.READ_ONLY, db_column=u'Response', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    type = models.CharField(max_length=50, verbose_name=u'Type', sf_read_only=models.READ_ONLY, db_column=u'Type', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'AcceptedEventRelation'
        verbose_name = 'Accepted Event Relation'
        verbose_name_plural = 'Accepted Event Relations'
        # keyPrefix = 'None'

class Account(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    masterrecordid = models.ForeignKey('self', null=True, db_column=u'MasterRecordId', blank=True) # Field name made lowercase.
    name = models.CharField(max_length=255, verbose_name=u'Account Name', db_column=u'Name', blank=True) # Field name made lowercase.
    lastname = models.CharField(max_length=80, verbose_name=u'Last Name', db_column=u'LastName', blank=True) # Field name made lowercase.
    firstname = models.CharField(max_length=40, verbose_name=u'First Name', db_column=u'FirstName', blank=True) # Field name made lowercase.
    salutation = models.CharField(blank=True, max_length=40, verbose_name=u'Salutation', db_column=u'Salutation', choices=[(u'Mr.', u'Mr.'), (u'Ms.', u'Ms.'), (u'Mrs.', u'Mrs.'), (u'Dr.', u'Dr.'), (u'Prof.', u'Prof.')]) # Field name made lowercase.
    type = models.CharField(blank=True, max_length=40, verbose_name=u'Account Type', db_column=u'Type', choices=[(u'Household', u'Household'), (u'Company', u'Company'), (u'Analyst', u'Analyst'), (u'Competitor', u'Competitor'), (u'Customer', u'Customer'), (u'Integrator', u'Integrator'), (u'Investor', u'Investor'), (u'Partner', u'Partner'), (u'Press', u'Press'), (u'Prospect', u'Prospect'), (u'Reseller', u'Reseller'), (u'Other', u'Other')]) # Field name made lowercase.
    recordtypeid = models.ForeignKey('Recordtype', null=True, db_column=u'RecordTypeId', blank=True) # Field name made lowercase.
    parentid = models.ForeignKey('self', null=True, db_column=u'ParentId', blank=True) # Field name made lowercase.
    billingstreet = models.TextField(verbose_name=u'Billing Street', db_column=u'BillingStreet', blank=True) # Field name made lowercase.
    billingcity = models.CharField(max_length=40, verbose_name=u'Billing City', db_column=u'BillingCity', blank=True) # Field name made lowercase.
    billingstate = models.CharField(max_length=80, verbose_name=u'Billing State/Province', db_column=u'BillingState', blank=True) # Field name made lowercase.
    billingpostalcode = models.CharField(max_length=20, verbose_name=u'Billing Zip/Postal Code', db_column=u'BillingPostalCode', blank=True) # Field name made lowercase.
    billingcountry = models.CharField(max_length=80, verbose_name=u'Billing Country', db_column=u'BillingCountry', blank=True) # Field name made lowercase.
    billinglatitude = models.DecimalField(db_column=u'BillingLatitude', decimal_places=15, max_digits=18, blank=True, null=True, verbose_name=u'Billing Latitude') # Field name made lowercase.
    billinglongitude = models.DecimalField(db_column=u'BillingLongitude', decimal_places=15, max_digits=18, blank=True, null=True, verbose_name=u'Billing Longitude') # Field name made lowercase.
    billingaddress = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Billing Address', db_column=u'BillingAddress', blank=True) # Field name made lowercase. This field type is a guess.
    shippingstreet = models.TextField(verbose_name=u'Shipping Street', db_column=u'ShippingStreet', blank=True) # Field name made lowercase.
    shippingcity = models.CharField(max_length=40, verbose_name=u'Shipping City', db_column=u'ShippingCity', blank=True) # Field name made lowercase.
    shippingstate = models.CharField(max_length=80, verbose_name=u'Shipping State/Province', db_column=u'ShippingState', blank=True) # Field name made lowercase.
    shippingpostalcode = models.CharField(max_length=20, verbose_name=u'Shipping Zip/Postal Code', db_column=u'ShippingPostalCode', blank=True) # Field name made lowercase.
    shippingcountry = models.CharField(max_length=80, verbose_name=u'Shipping Country', db_column=u'ShippingCountry', blank=True) # Field name made lowercase.
    shippinglatitude = models.DecimalField(db_column=u'ShippingLatitude', decimal_places=15, max_digits=18, blank=True, null=True, verbose_name=u'Shipping Latitude') # Field name made lowercase.
    shippinglongitude = models.DecimalField(db_column=u'ShippingLongitude', decimal_places=15, max_digits=18, blank=True, null=True, verbose_name=u'Shipping Longitude') # Field name made lowercase.
    shippingaddress = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Shipping Address', db_column=u'ShippingAddress', blank=True) # Field name made lowercase. This field type is a guess.
    phone = models.CharField(max_length=40, verbose_name=u'Account Phone', db_column=u'Phone', blank=True) # Field name made lowercase.
    fax = models.CharField(max_length=40, verbose_name=u'Account Fax', db_column=u'Fax', blank=True) # Field name made lowercase.
    accountnumber = models.CharField(max_length=40, verbose_name=u'Account Number', db_column=u'AccountNumber', blank=True) # Field name made lowercase.
    website = models.URLField(null=True, verbose_name=u'Website', db_column=u'Website', blank=True) # Field name made lowercase.
    photourl = models.URLField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Photo URL', db_column=u'PhotoUrl', blank=True) # Field name made lowercase.
    sic = models.CharField(max_length=20, verbose_name=u'SIC Code', db_column=u'Sic', blank=True) # Field name made lowercase.
    industry = models.CharField(blank=True, max_length=40, verbose_name=u'Industry', db_column=u'Industry', choices=[(u'Agriculture', u'Agriculture'), (u'Apparel', u'Apparel'), (u'Banking', u'Banking'), (u'Biotechnology', u'Biotechnology'), (u'Chemicals', u'Chemicals'), (u'Communications', u'Communications'), (u'Construction', u'Construction'), (u'Consulting', u'Consulting'), (u'Education', u'Education'), (u'Electronics', u'Electronics'), (u'Energy', u'Energy'), (u'Engineering', u'Engineering'), (u'Entertainment', u'Entertainment'), (u'Environmental', u'Environmental'), (u'Finance', u'Finance'), (u'Food & Beverage', u'Food & Beverage'), (u'Government', u'Government'), (u'Healthcare', u'Healthcare'), (u'Hospitality', u'Hospitality'), (u'Insurance', u'Insurance'), (u'Machinery', u'Machinery'), (u'Manufacturing', u'Manufacturing'), (u'Media', u'Media'), (u'Not For Profit', u'Not For Profit'), (u'Other', u'Other'), (u'Recreation', u'Recreation'), (u'Retail', u'Retail'), (u'Shipping', u'Shipping'), (u'Technology', u'Technology'), (u'Telecommunications', u'Telecommunications'), (u'Transportation', u'Transportation'), (u'Utilities', u'Utilities')]) # Field name made lowercase.
    annualrevenue = models.DecimalField(db_column=u'AnnualRevenue', decimal_places=0, max_digits=18, blank=True, null=True, verbose_name=u'Annual Revenue') # Field name made lowercase.
    numberofemployees = models.IntegerField(null=True, verbose_name=u'Employees', db_column=u'NumberOfEmployees', blank=True) # Field name made lowercase.
    ownership = models.CharField(blank=True, max_length=40, verbose_name=u'Ownership', db_column=u'Ownership', choices=[(u'Public', u'Public'), (u'Private', u'Private'), (u'Subsidiary', u'Subsidiary'), (u'Other', u'Other')]) # Field name made lowercase.
    tickersymbol = models.CharField(max_length=20, verbose_name=u'Ticker Symbol', db_column=u'TickerSymbol', blank=True) # Field name made lowercase.
    description = models.TextField(verbose_name=u'Account Description', db_column=u'Description', blank=True) # Field name made lowercase.
    rating = models.CharField(blank=True, max_length=40, verbose_name=u'Account Rating', db_column=u'Rating', choices=[(u'Hot', u'Hot'), (u'Warm', u'Warm'), (u'Cold', u'Cold')]) # Field name made lowercase.
    site = models.CharField(max_length=80, verbose_name=u'Account Site', db_column=u'Site', blank=True) # Field name made lowercase.
    ownerid = models.ForeignKey('User', db_column=u'OwnerId') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    lastactivitydate = models.DateField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Activity', db_column=u'LastActivityDate', blank=True) # Field name made lowercase.
    lastvieweddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Viewed Date', db_column=u'LastViewedDate', blank=True) # Field name made lowercase.
    lastreferenceddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Referenced Date', db_column=u'LastReferencedDate', blank=True) # Field name made lowercase.
    iscustomerportal = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Customer Portal Account', db_column=u'IsCustomerPortal') # Field name made lowercase.
    personcontactid = models.ForeignKey('Contact', null=True, db_column=u'PersonContactId', blank=True) # Field name made lowercase.
    ispersonaccount = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Is Person Account', db_column=u'IsPersonAccount') # Field name made lowercase.
    personmailingstreet = models.TextField(verbose_name=u'Mailing Street', db_column=u'PersonMailingStreet', blank=True) # Field name made lowercase.
    personmailingcity = models.CharField(max_length=40, verbose_name=u'Mailing City', db_column=u'PersonMailingCity', blank=True) # Field name made lowercase.
    personmailingstate = models.CharField(max_length=80, verbose_name=u'Mailing State/Province', db_column=u'PersonMailingState', blank=True) # Field name made lowercase.
    personmailingpostalcode = models.CharField(max_length=20, verbose_name=u'Mailing Zip/Postal Code', db_column=u'PersonMailingPostalCode', blank=True) # Field name made lowercase.
    personmailingcountry = models.CharField(max_length=80, verbose_name=u'Mailing Country', db_column=u'PersonMailingCountry', blank=True) # Field name made lowercase.
    personmailinglatitude = models.DecimalField(db_column=u'PersonMailingLatitude', decimal_places=15, max_digits=18, blank=True, null=True, verbose_name=u'Mailing Latitude') # Field name made lowercase.
    personmailinglongitude = models.DecimalField(db_column=u'PersonMailingLongitude', decimal_places=15, max_digits=18, blank=True, null=True, verbose_name=u'Mailing Longitude') # Field name made lowercase.
    personmailingaddress = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Mailing Address', db_column=u'PersonMailingAddress', blank=True) # Field name made lowercase. This field type is a guess.
    personotherstreet = models.TextField(verbose_name=u'Other Street', db_column=u'PersonOtherStreet', blank=True) # Field name made lowercase.
    personothercity = models.CharField(max_length=40, verbose_name=u'Other City', db_column=u'PersonOtherCity', blank=True) # Field name made lowercase.
    personotherstate = models.CharField(max_length=80, verbose_name=u'Other State/Province', db_column=u'PersonOtherState', blank=True) # Field name made lowercase.
    personotherpostalcode = models.CharField(max_length=20, verbose_name=u'Other Zip/Postal Code', db_column=u'PersonOtherPostalCode', blank=True) # Field name made lowercase.
    personothercountry = models.CharField(max_length=80, verbose_name=u'Other Country', db_column=u'PersonOtherCountry', blank=True) # Field name made lowercase.
    personotherlatitude = models.DecimalField(db_column=u'PersonOtherLatitude', decimal_places=15, max_digits=18, blank=True, null=True, verbose_name=u'Other Latitude') # Field name made lowercase.
    personotherlongitude = models.DecimalField(db_column=u'PersonOtherLongitude', decimal_places=15, max_digits=18, blank=True, null=True, verbose_name=u'Other Longitude') # Field name made lowercase.
    personotheraddress = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Other Address', db_column=u'PersonOtherAddress', blank=True) # Field name made lowercase. This field type is a guess.
    personmobilephone = models.CharField(max_length=40, verbose_name=u'Mobile', db_column=u'PersonMobilePhone', blank=True) # Field name made lowercase.
    personhomephone = models.CharField(max_length=40, verbose_name=u'Home Phone', db_column=u'PersonHomePhone', blank=True) # Field name made lowercase.
    personotherphone = models.CharField(max_length=40, verbose_name=u'Other Phone', db_column=u'PersonOtherPhone', blank=True) # Field name made lowercase.
    personassistantphone = models.CharField(max_length=40, verbose_name=u'Asst. Phone', db_column=u'PersonAssistantPhone', blank=True) # Field name made lowercase.
    personemail = models.EmailField(null=True, verbose_name=u'Email', db_column=u'PersonEmail', blank=True) # Field name made lowercase.
    persontitle = models.CharField(max_length=80, verbose_name=u'Title', db_column=u'PersonTitle', blank=True) # Field name made lowercase.
    persondepartment = models.CharField(max_length=80, verbose_name=u'Department', db_column=u'PersonDepartment', blank=True) # Field name made lowercase.
    personassistantname = models.CharField(max_length=40, verbose_name=u'Assistant', db_column=u'PersonAssistantName', blank=True) # Field name made lowercase.
    personleadsource = models.CharField(blank=True, max_length=40, verbose_name=u'Lead Source', db_column=u'PersonLeadSource', choices=[(u'Advertisement', u'Advertisement'), (u'Employee Referral', u'Employee Referral'), (u'External Referral', u'External Referral'), (u'Partner', u'Partner'), (u'Public Relations', u'Public Relations'), (u'Seminar - Internal', u'Seminar - Internal'), (u'Seminar - Partner', u'Seminar - Partner'), (u'Trade Show', u'Trade Show'), (u'Web', u'Web'), (u'Word of mouth', u'Word of mouth'), (u'Other', u'Other'), (u'Call In', u'Call In'), (u'Walk In', u'Walk In'), (u'Online', u'Online'), (u'Administrative Upload', u'Administrative Upload')]) # Field name made lowercase.
    personbirthdate = models.DateField(null=True, verbose_name=u'Birthdate', db_column=u'PersonBirthdate', blank=True) # Field name made lowercase.
    personhasoptedoutofemail = models.BooleanField(verbose_name=u'Email Opt Out', db_column=u'PersonHasOptedOutOfEmail') # Field name made lowercase.
    personhasoptedoutoffax = models.BooleanField(verbose_name=u'Fax Opt Out', db_column=u'PersonHasOptedOutOfFax') # Field name made lowercase.
    persondonotcall = models.BooleanField(verbose_name=u'Do Not Call', db_column=u'PersonDoNotCall') # Field name made lowercase.
    personlastcurequestdate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Stay-in-Touch Request Date', db_column=u'PersonLastCURequestDate', blank=True) # Field name made lowercase.
    personlastcuupdatedate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Stay-in-Touch Save Date', db_column=u'PersonLastCUUpdateDate', blank=True) # Field name made lowercase.
    personemailbouncedreason = models.CharField(max_length=255, verbose_name=u'Email Bounced Reason', db_column=u'PersonEmailBouncedReason', blank=True) # Field name made lowercase.
    personemailbounceddate = models.DateTimeField(null=True, verbose_name=u'Email Bounced Date', db_column=u'PersonEmailBouncedDate', blank=True) # Field name made lowercase.
    jigsaw = models.CharField(max_length=20, verbose_name=u'Data.com Key', db_column=u'Jigsaw', blank=True) # Field name made lowercase.
    jigsawcompanyid = models.CharField(max_length=20, verbose_name=u'Jigsaw Company ID', sf_read_only=models.READ_ONLY, db_column=u'JigsawCompanyId', blank=True) # Field name made lowercase.
    accountsource = models.CharField(blank=True, max_length=40, verbose_name=u'Account Source', db_column=u'AccountSource', choices=[(u'Advertisement', u'Advertisement'), (u'Employee Referral', u'Employee Referral'), (u'External Referral', u'External Referral'), (u'Partner', u'Partner'), (u'Public Relations', u'Public Relations'), (u'Seminar - Internal', u'Seminar - Internal'), (u'Seminar - Partner', u'Seminar - Partner'), (u'Trade Show', u'Trade Show'), (u'Web', u'Web'), (u'Word of mouth', u'Word of mouth'), (u'Other', u'Other'), (u'Call In', u'Call In'), (u'Walk In', u'Walk In'), (u'Online', u'Online'), (u'Administrative Upload', u'Administrative Upload')]) # Field name made lowercase.
    dunsnumber = models.CharField(max_length=9, verbose_name=u'D-U-N-S Number', db_column=u'DunsNumber', blank=True) # Field name made lowercase.
    tradestyle = models.CharField(max_length=255, verbose_name=u'Tradestyle', db_column=u'Tradestyle', blank=True) # Field name made lowercase.
    naicscode = models.CharField(max_length=8, verbose_name=u'NAICS Code', db_column=u'NaicsCode', blank=True) # Field name made lowercase.
    naicsdesc = models.CharField(max_length=120, verbose_name=u'NAICS Description', db_column=u'NaicsDesc', blank=True) # Field name made lowercase.
    yearstarted = models.CharField(max_length=4, verbose_name=u'Year Started', db_column=u'YearStarted', blank=True) # Field name made lowercase.
    sicdesc = models.CharField(max_length=80, verbose_name=u'SIC Description', db_column=u'SicDesc', blank=True) # Field name made lowercase.
    current_coverage__c = models.CharField(blank=True, max_length=4099, verbose_name=u'Current Coverage', db_column=u'Current_Coverage__c', choices=[(u'Commercial Auto', u'Commercial Auto'), (u'Businesss Owners', u'Businesss Owners'), (u'General Liability', u'General Liability'), (u'Commercial Umbrella', u'Commercial Umbrella'), (u'Workers Compensation', u'Workers Compensation'), (u'Commercial Property', u'Commercial Property'), (u'Package', u'Package'), (u'Personal Auto', u'Personal Auto'), (u'Inland Marine', u'Inland Marine'), (u'Homeowners', u'Homeowners'), (u'Umbrella', u'Umbrella'), (u'Watercraft', u'Watercraft')]) # Field name made lowercase.
    estimated_annual_income__c = models.DecimalField(db_column=u'Estimated_Annual_Income__c', decimal_places=0, max_digits=18, blank=True, null=True, verbose_name=u'Estimated Annual Income') # Field name made lowercase.
    legal_entity__c = models.CharField(blank=True, max_length=255, verbose_name=u'Legal Entity', db_column=u'Legal_Entity__c', choices=[(u'Corporation', u'Corporation'), (u'Individual', u'Individual'), (u'Joint Venture', u'Joint Venture'), (u'LLC', u'LLC'), (u'Not-for-Profit Organization', u'Not-for-Profit Organization'), (u'Sole Proprietor', u'Sole Proprietor'), (u'Parternship', u'Parternship'), (u'Trust', u'Trust'), (u'Other', u'Other')]) # Field name made lowercase.
    date_business_started__c = models.DateField(null=True, verbose_name=u'Date Business Started', db_column=u'Date_Business_Started__c', blank=True) # Field name made lowercase.
    years_in_business__c = models.DecimalField(decimal_places=0, db_column=u'Years_in_Business__c', sf_read_only=models.READ_ONLY, max_digits=18, blank=True, null=True, verbose_name=u'Years in Business') # Field name made lowercase.
    no_of_members_and_managers__c = models.DecimalField(db_column=u'No_of_Members_and_Managers__c', decimal_places=0, max_digits=18, blank=True, null=True, verbose_name=u'No. of Members and Managers') # Field name made lowercase.
    group_lead__c = models.BooleanField(verbose_name=u'Group Lead', db_column=u'Group_Lead__c') # Field name made lowercase.
    age_of_spouse_domestic_partner__c = models.DecimalField(db_column=u'Age_of_Spouse_Domestic_Partner__c', decimal_places=0, max_digits=3, blank=True, help_text=u'For subsidy calculation and reporting maintain subsidy information here.', null=True, verbose_name=u'Age of Spouse/Domestic Partner') # Field name made lowercase.
    age_of_the_first_adult__c = models.DecimalField(db_column=u'Age_of_the_first_adult__c', decimal_places=0, max_digits=3, blank=True, help_text=u'For subsidy calculation and reporting maintain subsidy information here.', null=True, verbose_name=u'Age of the first adult') # Field name made lowercase.
    number_of_children_age_21_25__c = models.DecimalField(db_column=u'Number_of_Children_age_21_25__c', decimal_places=0, max_digits=3, blank=True, help_text=u'For subsidy calculation and reporting maintain subsidy information here.', null=True, verbose_name=u'Number of Children age 21 - 25') # Field name made lowercase.
    number_of_children_under_age_21__c = models.DecimalField(db_column=u'Number_of_Children_Under_Age_21__c', decimal_places=0, max_digits=3, blank=True, help_text=u'For subsidy calculation and reporting maintain subsidy information here.', null=True, verbose_name=u'Number of Children Under Age 21') # Field name made lowercase.
    number_of_people_in_household__c = models.DecimalField(db_column=u'Number_of_People_in_Household__c', decimal_places=0, max_digits=2, blank=True, help_text=u'For subsidy calculation and reporting maintain subsidy information here.', null=True, verbose_name=u'Number of People in Household') # Field name made lowercase.
    subsidy_eligible__c = models.BooleanField(help_text=u'For subsidy calculation and reporting maintain subsidy information here.', verbose_name=u'Subsidy Eligible', db_column=u'Subsidy_Eligible__c') # Field name made lowercase.
    original_created_date__c = models.DateTimeField(null=True, verbose_name=u'Original Created Date', db_column=u'Original_Created_Date__c', blank=True) # Field name made lowercase.
    original_last_modified_by__c = models.CharField(max_length=50, verbose_name=u'Original Last Modified By', db_column=u'Original_Last_Modified_By__c', blank=True) # Field name made lowercase.
    original_last_modified_date__c = models.DateTimeField(null=True, verbose_name=u'Original Last Modified Date', db_column=u'Original_Last_Modified_Date__c', blank=True) # Field name made lowercase.
    original_last_modified_name__c = models.CharField(max_length=100, verbose_name=u'Original Last Modified Name', db_column=u'Original_Last_Modified_Name__c', blank=True) # Field name made lowercase.
    original_object_id__c = models.CharField(max_length=50, verbose_name=u'Original Object ID', db_column=u'Original_Object_ID__c', blank=True) # Field name made lowercase.
    original_owner_id__c = models.CharField(max_length=50, verbose_name=u'Original Owner ID', db_column=u'Original_Owner_ID__c', blank=True) # Field name made lowercase.
    original_owner_name__c = models.CharField(max_length=50, verbose_name=u'Original Owner Name', db_column=u'Original_Owner_Name__c', blank=True) # Field name made lowercase.
    initial_contact_date__c = models.DateField(null=True, verbose_name=u'Initial Contact Date', db_column=u'Initial_Contact_Date__c', blank=True) # Field name made lowercase.
    initial_contact_method__c = models.CharField(blank=True, max_length=255, verbose_name=u'Initial Contact Method', db_column=u'Initial_Contact_Method__c', choices=[(u'Quote Form', u'Quote Form'), (u'Call in', u'Call in'), (u'Lead (outbound)', u'Lead (outbound)'), (u'Referral', u'Referral'), (u'Email', u'Email')]) # Field name made lowercase.
    assisting_agent__c = models.ForeignKey('User', null=True, db_column=u'Assisting_Agent__c', blank=True) # Field name made lowercase.
    originial_assisting_agent__c = models.CharField(max_length=100, verbose_name=u'Originial Assisting Agent', db_column=u'Originial_Assisting_Agent__c', blank=True) # Field name made lowercase.
    application_completed_notes__c = models.CharField(blank=True, max_length=255, verbose_name=u'Application Completed Notes', db_column=u'Application_Completed_Notes__c', choices=[(u'On Exchange', u'On Exchange'), (u'Off Exchange', u'Off Exchange')]) # Field name made lowercase.
    on_exchange_app_completed_by__c = models.CharField(blank=True, max_length=255, verbose_name=u'On Exchange App Completed By', db_column=u'On_Exchange_App_Completed_By__c', choices=[(u'Agent', u'Agent'), (u'Customer', u'Customer')]) # Field name made lowercase.
    contact_quick_notes__c = models.TextField(verbose_name=u'Contact Quick Notes', db_column=u'Contact_Quick_Notes__c', blank=True) # Field name made lowercase.
    customer_status__c = models.CharField(blank=True, max_length=255, verbose_name=u'Customer Status', db_column=u'Customer_Status__c', choices=[(u'Pending', u'Pending'), (u'Active', u'Active'), (u'Inactive', u'Inactive'), (u'Never Active', u'Never Active'), (u'DNC', u'DNC'), (u'Deceased', u'Deceased'), (u'Archived', u'Archived'), (u'Terminated', u'Terminated')]) # Field name made lowercase.
    status_reason__c = models.CharField(blank=True, max_length=255, verbose_name=u'Status Reason', db_column=u'Status_Reason__c', choices=[(u'Lapsed', u'Lapsed'), (u'Cancelled By Customer', u'Cancelled By Customer'), (u'Not accepted by Customer', u'Not accepted by Customer'), (u'Expired', u'Expired'), (u'Medicare', u'Medicare'), (u'Withdrawn', u'Withdrawn'), (u'Rescinded', u'Rescinded'), (u'On Exchange', u'On Exchange')]) # Field name made lowercase.
    original_group_member_value__c = models.CharField(max_length=100, verbose_name=u'Original Group Member Value', db_column=u'Original_Group_Member_Value__c', blank=True) # Field name made lowercase.
    original_einstein__c = models.TextField(verbose_name=u'Original Einstein', db_column=u'Original_Einstein__c', blank=True) # Field name made lowercase.
    alternate_email__c = models.EmailField(null=True, verbose_name=u'Alternate Email', db_column=u'Alternate_Email__c', blank=True) # Field name made lowercase.
    active_since__c = models.DateField(null=True, verbose_name=u'Active Since', db_column=u'Active_Since__c', blank=True) # Field name made lowercase.
    county__c = models.CharField(max_length=25, verbose_name=u'County', db_column=u'County__c', blank=True) # Field name made lowercase.
    tobacco_user__c = models.BooleanField(verbose_name=u'Tobacco User', db_column=u'Tobacco_User__c') # Field name made lowercase.
    member_of_group__c = models.ForeignKey('self', null=True, db_column=u'Member_of_Group__c', blank=True) # Field name made lowercase.
    migrated__c = models.BooleanField(help_text=u'Was this record migrated from old tenant?', verbose_name=u'Migrated', db_column=u'Migrated__c') # Field name made lowercase.
    primary_dob__c = models.DateField(null=True, verbose_name=u'Primary DOB', db_column=u'Primary_DOB__c', blank=True) # Field name made lowercase.
    prequalified_by__c = models.CharField(blank=True, max_length=255, verbose_name=u'Prequalified  By', db_column=u'Prequalified_By__c', choices=[(u'Craig Fox', u'Craig Fox'), (u'Mara Cabral', u'Mara Cabral'), (u'Haidee Tomlinson', u'Haidee Tomlinson'), (u'Jessika Nighorn', u'Jessika Nighorn'), (u'Cindy Leslie', u'Cindy Leslie'), (u'Maribel Vasquez', u'Maribel Vasquez'), (u'Chris Melchor', u'Chris Melchor')]) # Field name made lowercase.
    preferred_language__c = models.CharField(blank=True, max_length=255, verbose_name=u'Preferred Language', db_column=u'Preferred_Language__c', choices=[(u'English', u'English'), (u'Spanish', u'Spanish')]) # Field name made lowercase.
    enrollment_specialists__c = models.ForeignKey('User', null=True, db_column=u'Enrollment_Specialists__c', blank=True) # Field name made lowercase.
    benefits_specialist__c = models.ForeignKey('User', null=True, db_column=u'Benefits_Specialist__c', blank=True) # Field name made lowercase.
    broker_information__c = models.ForeignKey('Contact', null=True, db_column=u'Broker_Information__c', blank=True) # Field name made lowercase.
    pending_broker_information__c = models.CharField(max_length=100, verbose_name=u'Pending Broker Information', db_column=u'Pending_Broker_Information__c', blank=True) # Field name made lowercase.
    nevada_health_coop_agent__c = models.ForeignKey('Contact', null=True, db_column=u'Nevada_Health_COOP_Agent__c', blank=True) # Field name made lowercase.
    brokerage_rating__c = models.CharField(blank=True, max_length=255, verbose_name=u'Brokerage Rating', db_column=u'Brokerage_Rating__c', choices=[(u'Platinum', u'Platinum'), (u'Gold', u'Gold'), (u'Silver', u'Silver'), (u'Bronze', u'Bronze'), (u'Lead', u'Lead')]) # Field name made lowercase.
    member_id__c = models.CharField(help_text=u'Master Policy ID from Nevada Health Link', max_length=65, verbose_name=u'Member ID', db_column=u'Member_ID__c', blank=True) # Field name made lowercase.
    sponsor_first_name__c = models.CharField(help_text=u'The name of the individual responsible for signing up the member indicated in this record.', max_length=35, verbose_name=u'Sponsor First Name', db_column=u'Sponsor_First_Name__c', blank=True) # Field name made lowercase.
    sponsor_last_name__c = models.CharField(help_text=u'The name of the individual responsible for signing up the member indicated in this record.', max_length=60, verbose_name=u'Sponsor Last Name', db_column=u'Sponsor_Last_Name__c', blank=True) # Field name made lowercase.
    exchange_sponsor_id__c = models.CharField(help_text=u'The Exchange Member ID of the individual responsible for signing up the member indicated in this record.', max_length=60, verbose_name=u'Exchange Sponsor ID', db_column=u'Exchange_Sponsor_ID__c', blank=True) # Field name made lowercase.
    imported__c = models.CharField(db_column=u'Imported__c', choices=[(u'Javalina', u'Javalina'), (u'Nevada Health Link', u'Nevada Health Link')], max_length=255, blank=True, help_text=u'Import information', verbose_name=u'Imported') # Field name made lowercase.
    child_only_application__c = models.BooleanField(help_text=u'Check if child only application.', verbose_name=u'Child Only Application', db_column=u'Child_Only_Application__c') # Field name made lowercase.
    cert__c = models.CharField(max_length=65, verbose_name=u'Cert #', db_column=u'Cert__c', blank=True) # Field name made lowercase.
    alternate_id_1__c = models.CharField(max_length=65, verbose_name=u'Alternate ID 1', db_column=u'Alternate_ID_1__c', blank=True) # Field name made lowercase.
    alternate_id_2__c = models.CharField(max_length=65, verbose_name=u'Alternate ID 2', db_column=u'Alternate_ID_2__c', blank=True) # Field name made lowercase.
    imported_source_point__c = models.CharField(blank=True, max_length=255, verbose_name=u'Imported Source Point', db_column=u'Imported_Source_Point__c', choices=[(u'Dataloader', u'Dataloader'), (u'EDI', u'EDI'), (u'Web-Service', u'Web-Service')]) # Field name made lowercase.
    converted_with_notes__c = models.BooleanField(verbose_name=u'Converted with Notes', db_column=u'Converted_with_Notes__c') # Field name made lowercase.
    ownedby_user__c = models.DecimalField(sf_read_only=models.READ_ONLY, decimal_places=0, max_digits=18, db_column=u'OwnedBy_User__c', blank=True, help_text=u'Used to configure Dashboards and Reports that are tailored to the Logged in user', null=True, verbose_name=u'OwnedBy$User') # Field name made lowercase.
    exchange_details__c = models.CharField(max_length=35, verbose_name=u'Exchange Details', db_column=u'Exchange_Details__c', blank=True) # Field name made lowercase.
    star_network_tiers__c = models.CharField(blank=True, max_length=4099, verbose_name=u'Star Network Tiers', db_column=u'Star_Network_Tiers__c', choices=[(u'Tier 1', u'Tier 1'), (u'Tier 2', u'Tier 2')]) # Field name made lowercase.
    networks_associated_with__c = models.CharField(blank=True, max_length=4099, verbose_name=u'Networks Associated With', db_column=u'Networks_Associated_With__c', choices=[(u'Star Network', u'Star Network'), (u'Neighborhood VIP Network', u'Neighborhood VIP Network'), (u'Southern Simple', u'Southern Simple'), (u'Frontier Simple', u'Frontier Simple'), (u'Northern Simple', u'Northern Simple')]) # Field name made lowercase.
    neighboorhood_network_tiers__c = models.CharField(blank=True, max_length=4099, verbose_name=u'Neighboorhood Network Tiers', db_column=u'Neighboorhood_Network_Tiers__c', choices=[(u'Tier 1', u'Tier 1'), (u'Tier 2', u'Tier 2')]) # Field name made lowercase.
    facility_status__c = models.CharField(blank=True, max_length=255, verbose_name=u'Facility Status', db_column=u'Facility_Status__c', choices=[(u'Active', u'Active'), (u'Inactive', u'Inactive')]) # Field name made lowercase.
    languages_spoken__c = models.CharField(blank=True, max_length=4099, verbose_name=u'Languages Spoken', db_column=u'Languages_Spoken__c', choices=[(u'CANTONESE', u'CANTONESE'), (u'DUTCH', u'DUTCH'), (u'ENGLISH', u'ENGLISH'), (u'ESPERANTO', u'ESPERANTO'), (u'ESTONIAN', u'ESTONIAN'), (u'FAEROESE', u'FAEROESE'), (u'FRENCH', u'FRENCH'), (u'GERMAN', u'GERMAN'), (u'GUJARATI', u'GUJARATI'), (u'HEBREW', u'HEBREW'), (u'HINDI', u'HINDI'), (u'HUNGARIAN', u'HUNGARIAN'), (u'ITALIAN', u'ITALIAN'), (u'JAPANESE', u'JAPANESE'), (u'KOREAN', u'KOREAN'), (u'MANDARIN', u'MANDARIN'), (u'POLISH', u'POLISH'), (u'RUSSIAN', u'RUSSIAN'), (u'SPANISH', u'SPANISH'), (u'TAGALOG', u'TAGALOG'), (u'TURKISH', u'TURKISH'), (u'URDU', u'URDU'), (u'VIETNAMESE', u'VIETNAMESE')]) # Field name made lowercase.
    tax_id_group_npi__c = models.CharField(max_length=25, verbose_name=u'Tax ID/Group NPI', db_column=u'Tax_ID_Group_NPI__c', blank=True) # Field name made lowercase.
    middle_name__c = models.CharField(help_text=u'Middle Name(s) or Initial(s) of the member.', max_length=60, verbose_name=u'Middle Name', db_column=u'Middle_Name__c', blank=True) # Field name made lowercase.
    suffix__c = models.CharField(blank=True, max_length=255, verbose_name=u'Suffix', db_column=u'Suffix__c', choices=[(u'Jr.', u'Jr.'), (u'Sr.', u'Sr.'), (u'II', u'II'), (u'III', u'III'), (u'IV', u'IV')]) # Field name made lowercase.
    gender__c = models.CharField(db_column=u'Gender__c', choices=[(u'Female', u'Female'), (u'Male', u'Male')], max_length=255, blank=True, help_text=u'Gender of the member.', verbose_name=u'Gender') # Field name made lowercase.
    handicapped__c = models.BooleanField(help_text=u'Check if true for member.', verbose_name=u'Handicapped', db_column=u'Handicapped__c') # Field name made lowercase.
    marital_status__c = models.CharField(db_column=u'Marital_Status__c', choices=[(u'Single', u'Single'), (u'Married', u'Married'), (u'Divorced', u'Divorced'), (u'Separated', u'Separated'), (u'Widowed', u'Widowed')], max_length=255, blank=True, help_text=u'Marital Status associated with the member.', verbose_name=u'Marital Status') # Field name made lowercase.
    currently_a_student__c = models.BooleanField(help_text=u'True of member is currently enrolled as a student.', verbose_name=u'Currently a Student', db_column=u'Currently_a_Student__c') # Field name made lowercase.
    coverage_level__c = models.CharField(blank=True, max_length=255, verbose_name=u'Coverage Level', db_column=u'Coverage_Level__c', choices=[(u'EMP', u'EMP'), (u'ESP', u'ESP'), (u'FAM', u'FAM')]) # Field name made lowercase.
    employment_status__c = models.CharField(blank=True, max_length=255, verbose_name=u'Employment Status', db_column=u'Employment_Status__c', choices=[(u'AC', u'AC'), (u'FT', u'FT'), (u'No Information', u'No Information')]) # Field name made lowercase.
    subscriber_sponser__c = models.ForeignKey('self', null=True, db_column=u'Subscriber_Sponser__c', blank=True) # Field name made lowercase.
    number_of_dependents__c = models.DecimalField(db_column=u'Number_of_Dependents__c', decimal_places=0, max_digits=5, blank=True, null=True, verbose_name=u'Number of Dependents') # Field name made lowercase.
    associated_premium__c = models.CharField(help_text=u'Premium associated with the member for their in-force medical policy.', max_length=10, verbose_name=u'Associated Premium', db_column=u'Associated_Premium__c', blank=True) # Field name made lowercase.
    uhh_update_at__c = models.DateTimeField(null=True, verbose_name=u'uhh_update_at', blank=True)
    duplication_score__c = models.CharField(blank=True, max_length=255, verbose_name=u'Duplication Score', db_column=u'Duplication_Score__c', choices=[(u'not duplicate', u'not duplicate'), (u'possible duplicate', u'possible duplicate'), (u'real duplicate', u'real duplicate')]) # Field name made lowercase.
    id_in_connectria__c = models.CharField(max_length=15, verbose_name=u'id_in_Connectria', db_column=u'id_in_Connectria__c', blank=True) # Field name made lowercase.
    plans__c = models.TextField(verbose_name=u'plans', blank=True)
    primary_contribution__c = models.DecimalField(null=True, verbose_name=u'primary contribution', max_digits=18, decimal_places=2, blank=True)
    primary_contribution_type__c = models.DecimalField(null=True, verbose_name=u'primary contribution type', max_digits=18, decimal_places=2, blank=True)
    dependent_contribution__c = models.DecimalField(null=True, verbose_name=u'dependent contribution', max_digits=18, decimal_places=2, blank=True)
    dependent_contribution_type__c = models.DecimalField(null=True, verbose_name=u'dependent contribution type', max_digits=18, decimal_places=2, blank=True)
    employer_subscriber__c = models.ForeignKey('self', null=True, db_column=u'Employer_Subscriber__c', blank=True) # Field name made lowercase.
    eligibility_date__c = models.DateTimeField(null=True, verbose_name=u'Eligibility Date', db_column=u'Eligibility_Date__c', blank=True) # Field name made lowercase.
    uhhapi_employers_id__c = models.DecimalField(db_column=u'uhhApi_Employers_id__c', decimal_places=0, max_digits=18, blank=True, null=True, verbose_name=u'uhhApi_Employers_id') # Field name made lowercase.
    uhhapi_person_id__c = models.DecimalField(db_column=u'uhhApi_Person_id__c', decimal_places=0, max_digits=18, blank=True, null=True, verbose_name=u'uhhApi_Person_id') # Field name made lowercase.
    uhh_personsemployerid__c = models.DecimalField(db_column=u'uhh_personsEmployerId__c', decimal_places=0, max_digits=11, blank=True, null=True, verbose_name=u'uhh_personsEmployerId') # Field name made lowercase.
    uhh_personsparentid__c = models.DecimalField(db_column=u'uhh_personsParentId__c', decimal_places=0, max_digits=11, blank=True, null=True, verbose_name=u'uhh_personsParentId') # Field name made lowercase.
    federationid__c = models.CharField(help_text=u'Associated with the Federation ID on IM portal for login credentials.', max_length=40, verbose_name=u'FederationID', db_column=u'FederationID__c', blank=True) # Field name made lowercase.
    original_account__c = models.ForeignKey('self', null=True, db_column=u'Original_Account__c', blank=True) # Field name made lowercase.
    uhhapi_broker_id__c = models.DecimalField(db_column=u'uhhApi_Broker_id__c', decimal_places=0, max_digits=18, blank=True, null=True, verbose_name=u'uhhApi_Broker_id') # Field name made lowercase.
    associated_brokerage__c = models.ForeignKey('self', null=True, db_column=u'Associated_Brokerage__c', blank=True) # Field name made lowercase.
    uhhapi_associatedplancode__c = models.CharField(max_length=20, verbose_name=u'uhhApi_associatedPlanCode', db_column=u'uhhApi_associatedPlanCode__c', blank=True) # Field name made lowercase.
    isvipaccount__c = models.BooleanField(verbose_name=u'isVIPAccount', db_column=u'isVIPAccount__c') # Field name made lowercase.
    monthly_premium__c = models.DecimalField(db_column=u'Monthly_Premium__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Monthly Premium') # Field name made lowercase.
    isetlupdate__c = models.BooleanField(verbose_name=u'IsETLUpdate', db_column=u'IsETLUpdate__c') # Field name made lowercase.
    externalid__c = models.CharField(max_length=32, unique=True, verbose_name=u'ExternalID', db_column=u'ExternalID__c', blank=True) # Field name made lowercase.
    clonecomments__c = models.CharField(max_length=50, verbose_name=u'cloneComments', db_column=u'cloneComments__c', blank=True) # Field name made lowercase.
    medicalcardrequeststatus__c = models.CharField(blank=True, max_length=255, verbose_name=u'MedCardRequestStatus', db_column=u'MedicalCardRequestStatus__c', choices=[(u'None', u'None'), (u'In Process', u'In Process'), (u'Closed', u'Closed')]) # Field name made lowercase.
    disease_managment_request_status__c = models.CharField(blank=True, max_length=255, verbose_name=u'Disease Managment Request Status', db_column=u'Disease_Managment_Request_Status__c', choices=[(u'None', u'None'), (u'In Process', u'In Process'), (u'Closed', u'Closed')]) # Field name made lowercase.
    originalcertalt1account__c = models.ForeignKey('self', null=True, db_column=u'OriginalCertAlt1Account__c', blank=True) # Field name made lowercase.
    im_identifier__c = models.CharField(max_length=35, verbose_name=u'IM Identifier', db_column=u'IM_Identifier__c', blank=True) # Field name made lowercase.
    annual_mileage__pc = models.DecimalField(db_column=u'Annual_Mileage__pc', decimal_places=0, max_digits=18, blank=True, null=True, verbose_name=u'Annual Mileage') # Field name made lowercase.
    at_this_address_since__pc = models.DateField(null=True, verbose_name=u'At This Address Since', db_column=u'At_This_Address_Since__pc', blank=True) # Field name made lowercase.
    car_make__pc = models.CharField(max_length=255, verbose_name=u'Car Make', db_column=u'Car_Make__pc', blank=True) # Field name made lowercase.
    car_model__pc = models.CharField(max_length=255, verbose_name=u'Car Model', db_column=u'Car_Model__pc', blank=True) # Field name made lowercase.
    car_year__pc = models.CharField(max_length=4, verbose_name=u'Car Year', db_column=u'Car_Year__pc', blank=True) # Field name made lowercase.
    current_mileage__pc = models.DecimalField(db_column=u'Current_Mileage__pc', decimal_places=0, max_digits=18, blank=True, null=True, verbose_name=u'Current Mileage') # Field name made lowercase.
    education__pc = models.CharField(blank=True, max_length=255, verbose_name=u'Education', db_column=u'Education__pc', choices=[(u'Some or No High School', u'Some or No High School'), (u'High School Diploma', u'High School Diploma'), (u'GED', u'GED'), (u'Some College', u'Some College'), (u'Associate Degree', u'Associate Degree'), (u'Bachelors Degree', u'Bachelors Degree'), (u'Masters Degree', u'Masters Degree'), (u'Doctorate Degree', u'Doctorate Degree'), (u'Other Professional Degree', u'Other Professional Degree'), (u'Other Non Professional Degree', u'Other Non Professional Degree'), (u'Trade/Vocational School', u'Trade/Vocational School')]) # Field name made lowercase.
    gender__pc = models.CharField(blank=True, max_length=255, verbose_name=u'Gender', db_column=u'Gender__pc', choices=[(u'Female', u'Female'), (u'Male', u'Male')]) # Field name made lowercase.
    driver_s_license_number__pc = models.CharField(max_length=255, verbose_name=u"Driver's License Number", db_column=u'Driver_s_License_Number__pc', blank=True) # Field name made lowercase.
    driver_s_license_state__pc = models.CharField(blank=True, max_length=255, verbose_name=u"Driver's License State", db_column=u'Driver_s_License_State__pc', choices=[(u'AK', u'AK'), (u'AL', u'AL'), (u'AR', u'AR'), (u'AZ', u'AZ'), (u'CA', u'CA'), (u'CO', u'CO'), (u'CT', u'CT'), (u'DC', u'DC'), (u'DE', u'DE'), (u'FL', u'FL'), (u'GA', u'GA'), (u'HI', u'HI'), (u'IA', u'IA'), (u'ID', u'ID'), (u'IL', u'IL'), (u'IN', u'IN'), (u'KS', u'KS'), (u'KY', u'KY'), (u'LA', u'LA'), (u'MA', u'MA'), (u'MD', u'MD'), (u'ME', u'ME'), (u'MI', u'MI'), (u'MN', u'MN'), (u'MO', u'MO'), (u'MS', u'MS'), (u'MT', u'MT'), (u'NC', u'NC'), (u'ND', u'ND'), (u'NE', u'NE'), (u'NJ', u'NJ'), (u'NM', u'NM'), (u'NV', u'NV'), (u'NY', u'NY'), (u'OH', u'OH'), (u'OK', u'OK'), (u'OR', u'OR'), (u'PA', u'PA'), (u'RI', u'RI'), (u'SC', u'SC'), (u'SD', u'SD'), (u'TN', u'TN'), (u'TX', u'TX'), (u'UT', u'UT'), (u'VA', u'VA'), (u'VT', u'VT'), (u'WA', u'WA'), (u'WI', u'WI'), (u'WV', u'WV'), (u'WY', u'WY')]) # Field name made lowercase.
    marital_status__pc = models.CharField(blank=True, max_length=255, verbose_name=u'Marital Status', db_column=u'Marital_Status__pc', choices=[(u'Single', u'Single'), (u'Married', u'Married'), (u'Divorced', u'Divorced'), (u'Separated', u'Separated'), (u'Widowed', u'Widowed')]) # Field name made lowercase.
    occupation__pc = models.CharField(max_length=255, verbose_name=u'Occupation', db_column=u'Occupation__pc', blank=True) # Field name made lowercase.
    owns_residence__pc = models.CharField(blank=True, max_length=255, verbose_name=u'Owns Residence', db_column=u'Owns_Residence__pc', choices=[(u'Yes', u'Yes'), (u'No', u'No')]) # Field name made lowercase.
    preferred_method_of_contact__pc = models.CharField(blank=True, max_length=255, verbose_name=u'Preferred Method of Contact', db_column=u'Preferred_Method_of_Contact__pc', choices=[(u'Phone', u'Phone'), (u'Email', u'Email')]) # Field name made lowercase.
    property_type__pc = models.CharField(blank=True, max_length=255, verbose_name=u'Property Type', db_column=u'Property_Type__pc', choices=[(u'Single Family Home', u'Single Family Home'), (u'Apartment', u'Apartment'), (u'Duplex', u'Duplex'), (u'Condominium', u'Condominium'), (u'Town Home', u'Town Home'), (u'Mobile Home', u'Mobile Home')]) # Field name made lowercase.
    registered_state__pc = models.CharField(blank=True, max_length=255, verbose_name=u'Registered State', db_column=u'Registered_State__pc', choices=[(u'AK', u'AK'), (u'AL', u'AL'), (u'AR', u'AR'), (u'AZ', u'AZ'), (u'CA', u'CA'), (u'CO', u'CO'), (u'CT', u'CT'), (u'DC', u'DC'), (u'DE', u'DE'), (u'FL', u'FL'), (u'GA', u'GA'), (u'HI', u'HI'), (u'IA', u'IA'), (u'ID', u'ID'), (u'IL', u'IL'), (u'IN', u'IN'), (u'KS', u'KS'), (u'KY', u'KY'), (u'LA', u'LA'), (u'MA', u'MA'), (u'MD', u'MD'), (u'ME', u'ME'), (u'MI', u'MI'), (u'MN', u'MN'), (u'MO', u'MO'), (u'MS', u'MS'), (u'MT', u'MT'), (u'NC', u'NC'), (u'ND', u'ND'), (u'NE', u'NE'), (u'NJ', u'NJ'), (u'NM', u'NM'), (u'NV', u'NV'), (u'NY', u'NY'), (u'OH', u'OH'), (u'OK', u'OK'), (u'OR', u'OR'), (u'PA', u'PA'), (u'RI', u'RI'), (u'SC', u'SC'), (u'SD', u'SD'), (u'TN', u'TN'), (u'TX', u'TX'), (u'UT', u'UT'), (u'VA', u'VA'), (u'VT', u'VT'), (u'WA', u'WA'), (u'WI', u'WI'), (u'WV', u'WV'), (u'WY', u'WY')]) # Field name made lowercase.
    residence_city__pc = models.CharField(max_length=200, verbose_name=u'Residence City', db_column=u'Residence_City__pc', blank=True) # Field name made lowercase.
    residence_country__pc = models.CharField(max_length=255, verbose_name=u'Residence Country', db_column=u'Residence_Country__pc', blank=True) # Field name made lowercase.
    residence_state__pc = models.CharField(blank=True, max_length=255, verbose_name=u'Residence State', db_column=u'Residence_State__pc', choices=[(u'AK', u'AK'), (u'AL', u'AL'), (u'AR', u'AR'), (u'AZ', u'AZ'), (u'CA', u'CA'), (u'CO', u'CO'), (u'CT', u'CT'), (u'DC', u'DC'), (u'DE', u'DE'), (u'FL', u'FL'), (u'GA', u'GA'), (u'HI', u'HI'), (u'IA', u'IA'), (u'ID', u'ID'), (u'IL', u'IL'), (u'IN', u'IN'), (u'KS', u'KS'), (u'KY', u'KY'), (u'LA', u'LA'), (u'MA', u'MA'), (u'MD', u'MD'), (u'ME', u'ME'), (u'MI', u'MI'), (u'MN', u'MN'), (u'MO', u'MO'), (u'MS', u'MS'), (u'MT', u'MT'), (u'NC', u'NC'), (u'ND', u'ND'), (u'NE', u'NE'), (u'NJ', u'NJ'), (u'NM', u'NM'), (u'NV', u'NV'), (u'NY', u'NY'), (u'OH', u'OH'), (u'OK', u'OK'), (u'OR', u'OR'), (u'PA', u'PA'), (u'RI', u'RI'), (u'SC', u'SC'), (u'SD', u'SD'), (u'TN', u'TN'), (u'TX', u'TX'), (u'UT', u'UT'), (u'VA', u'VA'), (u'VT', u'VT'), (u'WA', u'WA'), (u'WI', u'WI'), (u'WV', u'WV'), (u'WY', u'WY')]) # Field name made lowercase.
    residence_street__pc = models.CharField(max_length=255, verbose_name=u'Residence Street', db_column=u'Residence_Street__pc', blank=True) # Field name made lowercase.
    residence_zip_postal_code__pc = models.CharField(max_length=10, verbose_name=u'Residence Zip/Postal Code', db_column=u'Residence_Zip_Postal_Code__pc', blank=True) # Field name made lowercase.
    spouse__pc = models.CharField(max_length=255, verbose_name=u'Spouse', db_column=u'Spouse__pc', blank=True) # Field name made lowercase.
    vin__pc = models.CharField(max_length=255, verbose_name=u'VIN', db_column=u'VIN__pc', blank=True) # Field name made lowercase.
    date_of_birth__pc = models.DateField(null=True, verbose_name=u'Date of Birth', db_column=u'Date_of_Birth__pc', blank=True) # Field name made lowercase.
    provider_npi__pc = models.CharField(help_text=u'Providers NPI number.', max_length=30, verbose_name=u'Provider NPI', db_column=u'Provider_NPI__pc', blank=True) # Field name made lowercase.
    provider_degree__pc = models.CharField(help_text=u'The degree regarding the provider.', max_length=10, verbose_name=u'Provider Degree', db_column=u'Provider_Degree__pc', blank=True) # Field name made lowercase.
    provider_specialty_code__pc = models.CharField(help_text=u'Provider specialty code, see Provider Specialty Name for more context.', max_length=10, verbose_name=u'Provider Specialty Code', db_column=u'Provider_Specialty_Code__pc', blank=True) # Field name made lowercase.
    provider_group_npi__pc = models.CharField(help_text=u'Provider group npi number.', max_length=20, verbose_name=u'Provider Group NPI', db_column=u'Provider_Group_NPI__pc', blank=True) # Field name made lowercase.
    migrated__pc = models.BooleanField(verbose_name=u'Migrated', db_column=u'Migrated__pc') # Field name made lowercase.
    original_object_id__pc = models.CharField(max_length=18, verbose_name=u'Original Object ID', db_column=u'Original_Object_ID__pc', blank=True) # Field name made lowercase.
    affiliate_id__pc = models.CharField(help_text=u'Affiliate ID for the broker or agent identification.', max_length=30, verbose_name=u'Affiliate ID', db_column=u'Affiliate_ID__pc', blank=True) # Field name made lowercase.
    date_of_hire__pc = models.DateField(null=True, verbose_name=u'Date of Hire', db_column=u'Date_of_Hire__pc', blank=True) # Field name made lowercase.
    policy_member__pc = models.BooleanField(verbose_name=u'Policy Member', db_column=u'Policy_Member__pc') # Field name made lowercase.
    spouse_gender__pc = models.CharField(blank=True, max_length=255, verbose_name=u'Spouse Gender', db_column=u'Spouse_Gender__pc', choices=[(u'Male', u'Male'), (u'Female', u'Female')]) # Field name made lowercase.
    spouse_date_of_birth__pc = models.DateField(null=True, verbose_name=u'Spouse Date of Birth', db_column=u'Spouse_Date_of_Birth__pc', blank=True) # Field name made lowercase.
    number_of_children__pc = models.DecimalField(db_column=u'Number_of_Children__pc', decimal_places=0, max_digits=2, blank=True, null=True, verbose_name=u'Number of Children') # Field name made lowercase.
    not_included_on_policy_because__pc = models.CharField(blank=True, max_length=255, verbose_name=u'Not Included on Policy Because', db_column=u'Not_Included_on_Policy_Because__pc', choices=[(u'Waived', u'Waived'), (u'Term', u'Term'), (u'Other Coverage', u'Other Coverage')]) # Field name made lowercase.
    provider_specialty_name__pc = models.CharField(db_column=u'Provider_Specialty_Name__pc', max_length=1300, blank=True, help_text=u'Provider Specialty name based on code value from Provider Specialty Code field.', sf_read_only=models.READ_ONLY, verbose_name=u'Provider Specialty Name') # Field name made lowercase.
    facility_name__pc = models.CharField(help_text=u'Name of facility for provider contacts.', max_length=100, verbose_name=u'Facility Name', db_column=u'Facility_Name__pc', blank=True) # Field name made lowercase.
    facility_street_address__pc = models.CharField(help_text=u'Street address for the facility of the provider contact', max_length=100, verbose_name=u'Facility Street Address', db_column=u'Facility_Street_Address__pc', blank=True) # Field name made lowercase.
    facility_city__pc = models.CharField(help_text=u'City for the facility of the provider contact.', max_length=50, verbose_name=u'Facility City', db_column=u'Facility_City__pc', blank=True) # Field name made lowercase.
    facility_state__pc = models.CharField(help_text=u'State where the facility is located for the provider contact.', max_length=2, verbose_name=u'Facility State', db_column=u'Facility_State__pc', blank=True) # Field name made lowercase.
    facility_postal_code__pc = models.CharField(help_text=u'Postal code for the facility location regarding the provider contact.', max_length=15, verbose_name=u'Facility Postal Code', db_column=u'Facility_Postal_Code__pc', blank=True) # Field name made lowercase.
    associated_plan__pc = models.CharField(blank=True, max_length=255, verbose_name=u'Associated Plan', db_column=u'Associated_Plan__pc', choices=[(u'Frontier', u'Frontier'), (u'Neighborhood VIP', u'Neighborhood VIP'), (u'Northern', u'Northern'), (u'Southern Simple', u'Southern Simple'), (u'Star', u'Star')]) # Field name made lowercase.
    cell_carrier__pc = models.CharField(blank=True, max_length=255, verbose_name=u'Cell Carrier', db_column=u'Cell_Carrier__pc', choices=[(u'AT&T', u'AT&T'), (u'Sprint', u'Sprint'), (u'T-Mobile', u'T-Mobile'), (u'Verizon', u'Verizon'), (u'Virgin Mobile', u'Virgin Mobile'), (u'Cingular', u'Cingular'), (u'Alltel', u'Alltel'), (u'Nextel', u'Nextel'), (u'Boost Mobile', u'Boost Mobile'), (u'Quest Wireless', u'Quest Wireless')]) # Field name made lowercase.
    email_to_text_address__pc = models.CharField(max_length=1300, verbose_name=u'Email to Text Address', sf_read_only=models.READ_ONLY, db_column=u'Email_to_Text_Address__pc', blank=True) # Field name made lowercase.
    mkto2__acquisition_date__pc = models.DateTimeField(null=True, verbose_name=u'Acquisition Date', db_column=u'mkto2__Acquisition_Date__pc', blank=True) # Field name made lowercase.
    mkto2__acquisition_program_id__pc = models.DecimalField(db_column=u'mkto2__Acquisition_Program_Id__pc', decimal_places=0, max_digits=18, blank=True, null=True, verbose_name=u'Acquisition Program Id') # Field name made lowercase.
    mkto2__acquisition_program__pc = models.CharField(max_length=255, verbose_name=u'Acquisition Program', db_column=u'mkto2__Acquisition_Program__pc', blank=True) # Field name made lowercase.
    mkto2__inferred_city__pc = models.CharField(max_length=255, verbose_name=u'Inferred City', db_column=u'mkto2__Inferred_City__pc', blank=True) # Field name made lowercase.
    mkto2__inferred_company__pc = models.CharField(max_length=255, verbose_name=u'Inferred Company', db_column=u'mkto2__Inferred_Company__pc', blank=True) # Field name made lowercase.
    mkto2__inferred_country__pc = models.CharField(max_length=255, verbose_name=u'Inferred Country', db_column=u'mkto2__Inferred_Country__pc', blank=True) # Field name made lowercase.
    mkto2__inferred_metropolitan_area__pc = models.CharField(max_length=255, verbose_name=u'Inferred Metropolitan Area', db_column=u'mkto2__Inferred_Metropolitan_Area__pc', blank=True) # Field name made lowercase.
    mkto2__inferred_phone_area_code__pc = models.CharField(max_length=255, verbose_name=u'Inferred Phone Area Code', db_column=u'mkto2__Inferred_Phone_Area_Code__pc', blank=True) # Field name made lowercase.
    mkto2__inferred_postal_code__pc = models.CharField(max_length=255, verbose_name=u'Inferred Postal Code', db_column=u'mkto2__Inferred_Postal_Code__pc', blank=True) # Field name made lowercase.
    mkto2__inferred_state_region__pc = models.CharField(max_length=255, verbose_name=u'Inferred State Region', db_column=u'mkto2__Inferred_State_Region__pc', blank=True) # Field name made lowercase.
    mkto2__lead_score__pc = models.DecimalField(db_column=u'mkto2__Lead_Score__pc', decimal_places=0, max_digits=18, blank=True, null=True, verbose_name=u'Lead Score') # Field name made lowercase.
    mkto2__original_referrer__pc = models.CharField(max_length=255, verbose_name=u'Original Referrer', db_column=u'mkto2__Original_Referrer__pc', blank=True) # Field name made lowercase.
    mkto2__original_search_engine__pc = models.CharField(max_length=255, verbose_name=u'Original Search Engine', db_column=u'mkto2__Original_Search_Engine__pc', blank=True) # Field name made lowercase.
    mkto2__original_search_phrase__pc = models.CharField(max_length=255, verbose_name=u'Original Search Phrase', db_column=u'mkto2__Original_Search_Phrase__pc', blank=True) # Field name made lowercase.
    mkto2__original_source_info__pc = models.TextField(verbose_name=u'Original Source Info', db_column=u'mkto2__Original_Source_Info__pc', blank=True) # Field name made lowercase.
    mkto2__original_source_type__pc = models.CharField(max_length=255, verbose_name=u'Original Source Type', db_column=u'mkto2__Original_Source_Type__pc', blank=True) # Field name made lowercase.
    mkto_si__hidedate__pc = models.DateField(null=True, verbose_name=u'Hide Date', db_column=u'mkto_si__HideDate__pc', blank=True) # Field name made lowercase.
    mkto_si__last_interesting_moment_date__pc = models.DateTimeField(null=True, verbose_name=u'Last Interesting Moment Date', db_column=u'mkto_si__Last_Interesting_Moment_Date__pc', blank=True) # Field name made lowercase.
    mkto_si__last_interesting_moment_desc__pc = models.TextField(verbose_name=u'Last Interesting Moment Desc', db_column=u'mkto_si__Last_Interesting_Moment_Desc__pc', blank=True) # Field name made lowercase.
    mkto_si__last_interesting_moment_source__pc = models.CharField(max_length=100, verbose_name=u'Last Interesting Moment Source', db_column=u'mkto_si__Last_Interesting_Moment_Source__pc', blank=True) # Field name made lowercase.
    mkto_si__last_interesting_moment_type__pc = models.CharField(max_length=100, verbose_name=u'Last Interesting Moment Type', db_column=u'mkto_si__Last_Interesting_Moment_Type__pc', blank=True) # Field name made lowercase.
    mkto_si__last_interesting_moment__pc = models.CharField(max_length=1300, verbose_name=u'Last Interesting Moment', sf_read_only=models.READ_ONLY, db_column=u'mkto_si__Last_Interesting_Moment__pc', blank=True) # Field name made lowercase.
    mkto_si__priority__pc = models.DecimalField(db_column=u'mkto_si__Priority__pc', decimal_places=0, max_digits=18, blank=True, null=True, verbose_name=u'Priority') # Field name made lowercase.
    mkto_si__relative_score_value__pc = models.DecimalField(db_column=u'mkto_si__Relative_Score_Value__pc', decimal_places=0, max_digits=4, blank=True, null=True, verbose_name=u'Relative Score Value') # Field name made lowercase.
    mkto_si__relative_score__pc = models.CharField(max_length=1300, verbose_name=u'Relative Score', sf_read_only=models.READ_ONLY, db_column=u'mkto_si__Relative_Score__pc', blank=True) # Field name made lowercase.
    mkto_si__sales_insight__pc = models.CharField(max_length=1300, verbose_name=u'Sales Insight', sf_read_only=models.READ_ONLY, db_column=u'mkto_si__Sales_Insight__pc', blank=True) # Field name made lowercase.
    mkto_si__urgency_value__pc = models.DecimalField(db_column=u'mkto_si__Urgency_Value__pc', decimal_places=0, max_digits=4, blank=True, null=True, verbose_name=u'Urgency Value') # Field name made lowercase.
    mkto_si__urgency__pc = models.CharField(max_length=1300, verbose_name=u'Urgency', sf_read_only=models.READ_ONLY, db_column=u'mkto_si__Urgency__pc', blank=True) # Field name made lowercase.
    mkto_si__view_in_marketo__pc = models.CharField(max_length=1300, verbose_name=u'View in Marketo', sf_read_only=models.READ_ONLY, db_column=u'mkto_si__View_in_Marketo__pc', blank=True) # Field name made lowercase.
    broker_status__pc = models.CharField(blank=True, max_length=255, verbose_name=u'Broker Status', db_column=u'Broker_Status__pc', choices=[(u'Active', u'Active'), (u'Inactive', u'Inactive')]) # Field name made lowercase.
    memberid__pc = models.CharField(max_length=50, verbose_name=u'Member Id', db_column=u'MemberId__pc', blank=True) # Field name made lowercase.
    billingaddress__pc = models.CharField(max_length=1300, verbose_name=u'Billing Address', sf_read_only=models.READ_ONLY, db_column=u'BillingAddress__pc', blank=True) # Field name made lowercase.
    networks_associated_with__pc = models.CharField(db_column=u'Networks_Associated_With__pc', choices=[(u'Star Network - Tier 1', u'Star Network - Tier 1'), (u'Star Network - Tier 2', u'Star Network - Tier 2'), (u'Neighborhood VIP - Tier 1', u'Neighborhood VIP - Tier 1'), (u'Neighborhood VIP - Tier 2', u'Neighborhood VIP - Tier 2'), (u'Southern Simple', u'Southern Simple'), (u'Northern Simple', u'Northern Simple'), (u'Frontier Simple', u'Frontier Simple')], max_length=4099, blank=True, help_text=u'Indication of which networks the provider is currently associated with.', verbose_name=u'Networks Associated With') # Field name made lowercase.
    conownedby_user__pc = models.DecimalField(sf_read_only=models.READ_ONLY, decimal_places=0, max_digits=18, db_column=u'ConOwnedBy_User__pc', blank=True, help_text=u'Used to configure Dashboards and Reports that are tailored to the Logged in user', null=True, verbose_name=u'ConOwnedBy$User') # Field name made lowercase.
    provider_status__pc = models.CharField(blank=True, max_length=255, verbose_name=u'Provider Status', db_column=u'Provider_Status__pc', choices=[(u'Active', u'Active'), (u'Inactive', u'Inactive'), (u'Not Yet Contacted', u'Not Yet Contacted')]) # Field name made lowercase.
    ssn__pc = models.CharField(max_length=15, verbose_name=u'ssn', blank=True)
    auth_code__pc = models.CharField(max_length=25, verbose_name=u'Auth code', blank=True)
    benefit_status__pc = models.CharField(max_length=35, verbose_name=u'Benefit status', blank=True)
    pcp__pc = models.CharField(max_length=25, verbose_name=u'pcp', blank=True)
    eligible_effective_date__pc = models.DateTimeField(null=True, verbose_name=u'Eligible effective date', blank=True)
    eligible_end_date__pc = models.DateTimeField(null=True, verbose_name=u'Eligible end date', db_column=u'Eligible_end_date__pc', blank=True) # Field name made lowercase.
    person_notes__pc = models.TextField(verbose_name=u'Person notes', blank=True)
    broker_number__pc = models.CharField(max_length=15, verbose_name=u'Broker number', blank=True)
    conversion_comments__pc = models.TextField(verbose_name=u'Conversion Comments', db_column=u'Conversion_Comments__pc', blank=True) # Field name made lowercase.
    deduplication_comments__pc = models.TextField(verbose_name=u'Deduplication Comments', db_column=u'Deduplication_Comments__pc', blank=True) # Field name made lowercase.
    tobacco_user__pc = models.CharField(db_column=u'Tobacco_User__pc', choices=[(u'no', u'no'), (u'yes', u'yes')], max_length=255, blank=True, help_text=u'Select yes if the person is a tobacco user.', verbose_name=u'Tobacco User') # Field name made lowercase.
    handicapped__pc = models.CharField(db_column=u'Handicapped__pc', choices=[(u'no', u'no'), (u'yes', u'yes')], max_length=255, blank=True, help_text=u'Select yes if this person is handicapped.', verbose_name=u'Handicapped') # Field name made lowercase.
    currently_a_student__pc = models.CharField(db_column=u'Currently_a_Student__pc', choices=[(u'no', u'no'), (u'yes', u'yes')], max_length=255, blank=True, help_text=u'Select yes if this person is currently a student.', verbose_name=u'Currently a Student') # Field name made lowercase.
    height_ft__pc = models.DecimalField(db_column=u'Height_ft__pc', decimal_places=0, max_digits=1, blank=True, null=True, verbose_name=u'Height ft') # Field name made lowercase.
    relationship__pc = models.CharField(blank=True, max_length=255, verbose_name=u'Relationship', choices=[(u'Employee', u'Employee'), (u'Spouse', u'Spouse'), (u'Child', u'Child'), (u'LifePartner', u'LifePartner')])
    height_in__pc = models.DecimalField(null=True, verbose_name=u'height in', max_digits=2, decimal_places=0, blank=True)
    weight_lb__pc = models.DecimalField(null=True, verbose_name=u'weight lb', max_digits=3, decimal_places=0, blank=True)
    bmi__pc = models.DecimalField(db_column=u'BMI__pc', decimal_places=2, max_digits=4, blank=True, null=True, verbose_name=u'BMI') # Field name made lowercase.
    medications__pc = models.CharField(max_length=255, verbose_name=u'medications', blank=True)
    medical_conditions__pc = models.TextField(verbose_name=u'Medical Conditions', db_column=u'Medical_Conditions__pc', blank=True) # Field name made lowercase.
    tobacco_products__pc = models.CharField(max_length=255, verbose_name=u'Tobacco Products', db_column=u'Tobacco_Products__pc', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Account'
        verbose_name = 'Account'
        verbose_name_plural = 'Accounts'
        # keyPrefix = '001'

class Accountcontactrole(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    accountid = models.ForeignKey('Account', db_column=u'AccountId') # Field name made lowercase.
    contactid = models.ForeignKey('Contact', db_column=u'ContactId') # Field name made lowercase.
    role = models.CharField(blank=True, max_length=40, verbose_name=u'Role', db_column=u'Role', choices=[(u'Business User', u'Business User'), (u'Decision Maker', u'Decision Maker'), (u'Economic Buyer', u'Economic Buyer'), (u'Economic Decision Maker', u'Economic Decision Maker'), (u'Evaluator', u'Evaluator'), (u'Executive Sponsor', u'Executive Sponsor'), (u'Influencer', u'Influencer'), (u'Technical Buyer', u'Technical Buyer'), (u'Other', u'Other')]) # Field name made lowercase.
    isprimary = models.BooleanField(verbose_name=u'Primary', db_column=u'IsPrimary') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'AccountContactRole'
        verbose_name = 'Account Contact Role'
        verbose_name_plural = 'Account Contact Roles'
        # keyPrefix = '02Z'

class Accountfeed(models.Model):
    parentid = models.ForeignKey('Account', db_column=u'ParentId') # Field name made lowercase.
    type = models.CharField(db_column=u'Type', choices=[(u'TrackedChange', u'Tracked Change'), (u'UserStatus', u'User Status'), (u'TextPost', u'Text Post'), (u'AdvancedTextPost', u'Advanced Text Post'), (u'LinkPost', u'Link Post'), (u'ContentPost', u'Content Post'), (u'PollPost', u'Poll'), (u'RypplePost', u'Work.com Thanks'), (u'ProfileSkillPost', u'Profile Skill Post'), (u'DashboardComponentSnapshot', u'Dashboard Component Snapshot'), (u'ApprovalPost', u'Approval Post'), (u'CaseCommentPost', u'Case Comment Feed'), (u'ReplyPost', u'Reply Post'), (u'EmailMessageEvent', u'Email Message Feed'), (u'CallLogPost', u'Call Log Feed'), (u'ChangeStatusPost', u'Change Status Feed'), (u'AttachArticleEvent', u'Attached Article'), (u'MilestoneEvent', u'Milestone Event'), (u'ActivityEvent', u'Activity Change'), (u'ChatTranscriptPost', u'Chat Transcript Post'), (u'CollaborationGroupCreated', u'Collaboration Group Created'), (u'CollaborationGroupUnarchived', u'Collaboration Group Reactivated'), (u'SocialPost', u'Social Post'), (u'QuestionPost', u'Question Post'), (u'FacebookPost', u'Facebook Post'), (u'BasicTemplateFeedItem', u'Basic Template Post'), (u'CreateRecordEvent', u'Created Record'), (u'CanvasPost', u'Canvas'), (u'AnnouncementPost', u'a')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Feed Item Type') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    commentcount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Comment Count', db_column=u'CommentCount') # Field name made lowercase.
    likecount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Like Count', db_column=u'LikeCount') # Field name made lowercase.
    title = models.CharField(max_length=255, verbose_name=u'Title', sf_read_only=models.READ_ONLY, db_column=u'Title', blank=True) # Field name made lowercase.
    body = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Body', db_column=u'Body', blank=True) # Field name made lowercase.
    linkurl = models.URLField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Link Url', db_column=u'LinkUrl', blank=True) # Field name made lowercase.
    relatedrecordid = models.ForeignKey('Contentversion', null=True, db_column=u'RelatedRecordId', blank=True) # Field name made lowercase.
    contentdata = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Content Data', db_column=u'ContentData', blank=True) # Field name made lowercase.
    contentfilename = models.CharField(max_length=255, verbose_name=u'Content File Name', sf_read_only=models.READ_ONLY, db_column=u'ContentFileName', blank=True) # Field name made lowercase.
    contentdescription = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Content Description', db_column=u'ContentDescription', blank=True) # Field name made lowercase.
    contenttype = models.CharField(max_length=120, verbose_name=u'Content File Type', sf_read_only=models.READ_ONLY, db_column=u'ContentType', blank=True) # Field name made lowercase.
    contentsize = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Content Size', db_column=u'ContentSize', blank=True) # Field name made lowercase.
    insertedbyid = models.ForeignKey('User', null=True, db_column=u'InsertedById', blank=True) # Field name made lowercase.
    networkscope = models.CharField(db_column=u'NetworkScope', choices=[(u'AllNetworks', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Network Scope') # Field name made lowercase.
    visibility = models.CharField(db_column=u'Visibility', choices=[(u'AllUsers', None), (u'InternalUsers', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Visibility') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'AccountFeed'
        verbose_name = 'Account Feed'
        verbose_name_plural = 'Account Feed'
        # keyPrefix = 'None'

class Accounthistory(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    accountid = models.ForeignKey('Account', db_column=u'AccountId') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    field = models.CharField(max_length=255, verbose_name=u'Changed Field', sf_read_only=models.READ_ONLY, db_column=u'Field', choices=[(u'accountMerged', u'Account Merged'), (u'AccountNumber', None), (u'AccountSource', None), (u'Active_Since__c', None), (u'Affiliate_ID__pc', None), (u'Age_of_Spouse_Domestic_Partner__c', None), (u'Age_of_the_first_adult__c', None), (u'Alternate_Email__c', None), (u'Alternate_ID_1__c', None), (u'Alternate_ID_2__c', None), (u'Annual_Mileage__pc', None), (u'AnnualRevenue', None), (u'Application_Completed_Notes__c', None), (u'Assisting_Agent__c', None), (u'Associated_Brokerage__c', None), (u'Associated_Plan__pc', None), (u'Associated_Premium__c', None), (u'At_This_Address_Since__pc', None), (u'auth_code__pc', None), (u'benefit_status__pc', None), (u'Benefits_Specialist__c', None), (u'BillingAddress', None), (u'BillingCity', None), (u'BillingCountry', None), (u'BillingLatitude', None), (u'BillingLongitude', None), (u'BillingPostalCode', None), (u'BillingState', None), (u'BillingStreet', None), (u'BMI__pc', None), (u'Broker_Information__c', None), (u'broker_number__pc', None), (u'Broker_Status__pc', None), (u'Brokerage_Rating__c', None), (u'Car_Make__pc', None), (u'Car_Model__pc', None), (u'Car_Year__pc', None), (u'Cell_Carrier__pc', None), (u'Cert__c', None), (u'Child_Only_Application__c', None), (u'cloneComments__c', None), (u'Contact_Quick_Notes__c', None), (u'Conversion_Comments__pc', None), (u'Converted_with_Notes__c', None), (u'County__c', None), (u'Coverage_Level__c', None), (u'created', u'Created.'), (u'accountCreatedFromLead', u'Created by lead convert'), (u'Current_Coverage__c', None), (u'Current_Mileage__pc', None), (u'Currently_a_Student__c', None), (u'Currently_a_Student__pc', None), (u'Customer_Status__c', None), (u'Date_Business_Started__c', None), (u'Date_of_Birth__pc', None), (u'Date_of_Hire__pc', None), (u'Deduplication_Comments__pc', None), (u'dependent_contribution__c', None), (u'dependent_contribution_type__c', None), (u'Description', None), (u'Disease_Managment_Request_Status__c', None), (u'Driver_s_License_Number__pc', None), (u'Driver_s_License_State__pc', None), (u'DunsNumber', None), (u'Duplication_Score__c', None), (u'Education__pc', None), (u'Eligibility_Date__c', None), (u'eligible_effective_date__pc', None), (u'Eligible_end_date__pc', None), (u'Employer_Subscriber__c', None), (u'Employment_Status__c', None), (u'Enrollment_Specialists__c', None), (u'Estimated_Annual_Income__c', None), (u'Exchange_Details__c', None), (u'Exchange_Sponsor_ID__c', None), (u'ExternalID__c', None), (u'Facility_City__pc', None), (u'Facility_Name__pc', None), (u'Facility_Postal_Code__pc', None), (u'Facility_State__pc', None), (u'Facility_Status__c', None), (u'Facility_Street_Address__pc', None), (u'Fax', None), (u'FederationID__c', None), (u'feedEvent', u'Feed event'), (u'FirstName', None), (u'Gender__c', None), (u'Gender__pc', None), (u'Group_Lead__c', None), (u'Handicapped__c', None), (u'Handicapped__pc', None), (u'Height_ft__pc', None), (u'height_in__pc', None), (u'id_in_Connectria__c', None), (u'IM_Identifier__c', None), (u'Imported__c', None), (u'Imported_Source_Point__c', None), (u'Industry', None), (u'Initial_Contact_Date__c', None), (u'Initial_Contact_Method__c', None), (u'IsETLUpdate__c', None), (u'isVIPAccount__c', None), (u'Jigsaw', None), (u'Languages_Spoken__c', None), (u'LastName', None), (u'accountUpdatedByLead', u'Lead converted to Account'), (u'personAccountUpdatedByLead', u'Lead converted to Person Account'), (u'Legal_Entity__c', None), (u'Marital_Status__c', None), (u'Marital_Status__pc', None), (u'Medical_Conditions__pc', None), (u'MedicalCardRequestStatus__c', None), (u'medications__pc', None), (u'Member_ID__c', None), (u'Member_of_Group__c', None), (u'MemberId__pc', None), (u'Middle_Name__c', None), (u'Migrated__c', None), (u'Migrated__pc', None), (u'mkto_si__HideDate__pc', None), (u'mkto_si__Last_Interesting_Moment_Date__pc', None), (u'mkto_si__Last_Interesting_Moment_Desc__pc', None), (u'mkto_si__Last_Interesting_Moment_Source__pc', None), (u'mkto_si__Last_Interesting_Moment_Type__pc', None), (u'mkto_si__Priority__pc', None), (u'mkto_si__Relative_Score_Value__pc', None), (u'mkto_si__Urgency_Value__pc', None), (u'mkto2__Acquisition_Date__pc', None), (u'mkto2__Acquisition_Program__pc', None), (u'mkto2__Acquisition_Program_Id__pc', None), (u'mkto2__Inferred_City__pc', None), (u'mkto2__Inferred_Company__pc', None), (u'mkto2__Inferred_Country__pc', None), (u'mkto2__Inferred_Metropolitan_Area__pc', None), (u'mkto2__Inferred_Phone_Area_Code__pc', None), (u'mkto2__Inferred_Postal_Code__pc', None), (u'mkto2__Inferred_State_Region__pc', None), (u'mkto2__Lead_Score__pc', None), (u'mkto2__Original_Referrer__pc', None), (u'mkto2__Original_Search_Engine__pc', None), (u'mkto2__Original_Search_Phrase__pc', None), (u'mkto2__Original_Source_Info__pc', None), (u'mkto2__Original_Source_Type__pc', None), (u'Monthly_Premium__c', None), (u'NaicsCode', None), (u'NaicsDesc', None), (u'Name', None), (u'Neighboorhood_Network_Tiers__c', None), (u'Networks_Associated_With__c', None), (u'Networks_Associated_With__pc', None), (u'Nevada_Health_COOP_Agent__c', None), (u'No_of_Members_and_Managers__c', None), (u'Not_Included_on_Policy_Because__pc', None), (u'Number_of_Children__pc', None), (u'Number_of_Children_age_21_25__c', None), (u'Number_of_Children_Under_Age_21__c', None), (u'Number_of_Dependents__c', None), (u'Number_of_People_in_Household__c', None), (u'NumberOfEmployees', None), (u'Occupation__pc', None), (u'On_Exchange_App_Completed_By__c', None), (u'Original_Account__c', None), (u'Original_Created_Date__c', None), (u'Original_Einstein__c', None), (u'Original_Group_Member_Value__c', None), (u'Original_Last_Modified_By__c', None), (u'Original_Last_Modified_Date__c', None), (u'Original_Last_Modified_Name__c', None), (u'Original_Object_ID__c', None), (u'Original_Object_ID__pc', None), (u'Original_Owner_ID__c', None), (u'Original_Owner_Name__c', None), (u'OriginalCertAlt1Account__c', None), (u'Originial_Assisting_Agent__c', None), (u'Owner', None), (u'ownerAccepted', u'Owner (Accepted)'), (u'ownerAssignment', u'Owner (Assignment)'), (u'Ownership', None), (u'Owns_Residence__pc', None), (u'Parent', None), (u'pcp__pc', None), (u'Pending_Broker_Information__c', None), (u'person_notes__pc', None), (u'PersonAssistantName', None), (u'PersonAssistantPhone', None), (u'PersonBirthdate', None), (u'PersonDepartment', None), (u'PersonDoNotCall', None), (u'PersonEmail', None), (u'PersonEmailBouncedDate', None), (u'PersonEmailBouncedReason', None), (u'PersonHasOptedOutOfEmail', None), (u'PersonHasOptedOutOfFax', None), (u'PersonHomePhone', None), (u'PersonLeadSource', None), (u'PersonMailingAddress', None), (u'PersonMailingCity', None), (u'PersonMailingCountry', None), (u'PersonMailingLatitude', None), (u'PersonMailingLongitude', None), (u'PersonMailingPostalCode', None), (u'PersonMailingState', None), (u'PersonMailingStreet', None), (u'PersonMobilePhone', None), (u'PersonOtherAddress', None), (u'PersonOtherCity', None), (u'PersonOtherCountry', None), (u'PersonOtherLatitude', None), (u'PersonOtherLongitude', None), (u'PersonOtherPhone', None), (u'PersonOtherPostalCode', None), (u'PersonOtherState', None), (u'PersonOtherStreet', None), (u'PersonTitle', None), (u'Phone', None), (u'plans__c', None), (u'Policy_Member__pc', None), (u'Preferred_Language__c', None), (u'Preferred_Method_of_Contact__pc', None), (u'Prequalified_By__c', None), (u'primary_contribution__c', None), (u'primary_contribution_type__c', None), (u'Primary_DOB__c', None), (u'Property_Type__pc', None), (u'Provider_Degree__pc', None), (u'Provider_Group_NPI__pc', None), (u'Provider_NPI__pc', None), (u'Provider_Specialty_Code__pc', None), (u'Provider_Status__pc', None), (u'Rating', None), (u'locked', u'Record locked.'), (u'RecordType', None), (u'unlocked', u'Record unlocked.'), (u'Registered_State__pc', None), (u'relationship__pc', None), (u'Residence_City__pc', None), (u'Residence_Country__pc', None), (u'Residence_State__pc', None), (u'Residence_Street__pc', None), (u'Residence_Zip_Postal_Code__pc', None), (u'Salutation', None), (u'ShippingAddress', None), (u'ShippingCity', None), (u'ShippingCountry', None), (u'ShippingLatitude', None), (u'ShippingLongitude', None), (u'ShippingPostalCode', None), (u'ShippingState', None), (u'ShippingStreet', None), (u'Sic', None), (u'SicDesc', None), (u'Site', None), (u'Sponsor_First_Name__c', None), (u'Sponsor_Last_Name__c', None), (u'Spouse__pc', None), (u'Spouse_Date_of_Birth__pc', None), (u'Spouse_Gender__pc', None), (u'ssn__pc', None), (u'Star_Network_Tiers__c', None), (u'Status_Reason__c', None), (u'Subscriber_Sponser__c', None), (u'Subsidy_Eligible__c', None), (u'Suffix__c', None), (u'Tax_ID_Group_NPI__c', None), (u'TextName', None), (u'TickerSymbol', None), (u'Tobacco_Products__pc', None), (u'Tobacco_User__c', None), (u'Tobacco_User__pc', None), (u'Tradestyle', None), (u'Type', None), (u'uhh_personsEmployerId__c', None), (u'uhh_personsParentId__c', None), (u'uhh_update_at__c', None), (u'uhhApi_associatedPlanCode__c', None), (u'uhhApi_Broker_id__c', None), (u'uhhApi_Employers_id__c', None), (u'uhhApi_Person_id__c', None), (u'VIN__pc', None), (u'Website', None), (u'weight_lb__pc', None), (u'YearStarted', None)]) # Field name made lowercase.
    oldvalue = models.CharField(max_length=255, verbose_name=u'Old Value', sf_read_only=models.READ_ONLY, db_column=u'OldValue', blank=True) # Field name made lowercase.
    newvalue = models.CharField(max_length=255, verbose_name=u'New Value', sf_read_only=models.READ_ONLY, db_column=u'NewValue', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'AccountHistory'
        verbose_name = 'Account History'
        verbose_name_plural = 'Account History'
        # keyPrefix = 'None'

class Accountpartner(models.Model):
    accountfromid = models.ForeignKey('Account', db_column=u'AccountFromId') # Field name made lowercase.
    accounttoid = models.ForeignKey('Account', null=True, db_column=u'AccountToId', blank=True) # Field name made lowercase.
    opportunityid = models.ForeignKey('Opportunity', null=True, db_column=u'OpportunityId', blank=True) # Field name made lowercase.
    role = models.CharField(db_column=u'Role', choices=[(u'Advertiser', u'Advertiser'), (u'Agency', u'Agency'), (u'Broker', u'Broker'), (u'Consultant', u'Consultant'), (u'Dealer', u'Dealer'), (u'Developer', u'Developer'), (u'Distributor', u'Distributor'), (u'Institution', u'Institution'), (u'Lender', u'Lender'), (u'System Integrator', u'System Integrator'), (u'VAR/Reseller', u'VAR/Reseller')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Role') # Field name made lowercase.
    isprimary = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Primary', db_column=u'IsPrimary') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    reversepartnerid = models.ForeignKey('self', null=True, db_column=u'ReversePartnerId', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'AccountPartner'
        verbose_name = 'Account Partner'
        verbose_name_plural = 'Account Partner'
        # keyPrefix = 'None'

class Accountshare(models.Model):
    accountid = models.ForeignKey('Account', db_column=u'AccountId') # Field name made lowercase.
    userorgroupid = models.ForeignKey('Group', db_column=u'UserOrGroupId') # Field name made lowercase.
    accountaccesslevel = models.CharField(max_length=40, verbose_name=u'Account Access', db_column=u'AccountAccessLevel', choices=[(u'Read', u'Read Only'), (u'Edit', u'Read/Write'), (u'All', u'Owner')]) # Field name made lowercase.
    opportunityaccesslevel = models.CharField(max_length=40, verbose_name=u'Opportunity Access', db_column=u'OpportunityAccessLevel', choices=[(u'None', u'Private'), (u'Read', u'Read Only'), (u'Edit', u'Read/Write')]) # Field name made lowercase.
    caseaccesslevel = models.CharField(max_length=40, verbose_name=u'Case Access', db_column=u'CaseAccessLevel', choices=[(u'None', u'Private'), (u'Read', u'Read Only'), (u'Edit', u'Read/Write')]) # Field name made lowercase.
    contactaccesslevel = models.CharField(db_column=u'ContactAccessLevel', choices=[(u'None', u'Private'), (u'Read', u'Read Only'), (u'Edit', u'Read/Write')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Contact Access') # Field name made lowercase.
    rowcause = models.CharField(db_column=u'RowCause', choices=[(u'Owner', u'Owner'), (u'Manual', u'Manual Sharing'), (u'Rule', u'Sharing Rule'), (u'ImplicitChild', u'Account Sharing'), (u'ImplicitParent', u'Associated record owner or sharing'), (u'Team', u'Sales Team'), (u'Territory', u'Territory Assignment Rule'), (u'TerritoryManual', u'Territory Manual'), (u'TerritoryRule', u'Territory Sharing Rule')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Row Cause') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'AccountShare'
        verbose_name = 'Account Share'
        verbose_name_plural = 'Account Share'
        # keyPrefix = '00r'

class Accountteammember(models.Model):
    accountid = models.ForeignKey('Account', db_column=u'AccountId') # Field name made lowercase.
    userid = models.ForeignKey('User', db_column=u'UserId') # Field name made lowercase.
    teammemberrole = models.CharField(blank=True, max_length=40, verbose_name=u'Team Role', db_column=u'TeamMemberRole', choices=[(u'Account Manager', u'Account Manager'), (u'Channel Manager', u'Channel Manager'), (u'Executive Sponsor', u'Executive Sponsor'), (u'Lead Qualifier', u'Lead Qualifier'), (u'Pre-Sales Consultant', u'Pre-Sales Consultant'), (u'Sales Manager', u'Sales Manager'), (u'Sales Rep', u'Sales Rep')]) # Field name made lowercase.
    accountaccesslevel = models.CharField(db_column=u'AccountAccessLevel', choices=[(u'None', u'Private'), (u'Read', u'Read Only'), (u'Edit', u'Read/Write'), (u'All', u'Owner')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Account Access') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'AccountTeamMember'
        verbose_name = 'Account Team Member'
        verbose_name_plural = 'Account Team Member'
        # keyPrefix = '01M'

class AccumulatorsC(models.Model):
    ownerid = models.ForeignKey('Group', db_column=u'OwnerId') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'Accumulators Name', db_column=u'Name', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    uhhapi_accumulatorid__c = models.DecimalField(db_column=u'UhhApi_AccumulatorID__c', decimal_places=0, max_digits=18, blank=True, null=True, verbose_name=u'UhhApi_AccumulatorID') # Field name made lowercase.
    uhhapi_personid__c = models.DecimalField(db_column=u'uhhApi_PersonID__c', decimal_places=0, max_digits=18, blank=True, null=True, verbose_name=u'uhhApi_PersonID') # Field name made lowercase.
    type__c = models.CharField(max_length=50, verbose_name=u'Type', db_column=u'Type__c', blank=True) # Field name made lowercase.
    total_charges__c = models.DecimalField(db_column=u'Total_Charges__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Total Charges') # Field name made lowercase.
    covered_expenses__c = models.DecimalField(db_column=u'Covered_Expenses__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Covered Expenses') # Field name made lowercase.
    amount_not_covered__c = models.DecimalField(db_column=u'Amount_Not_Covered__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Amount Not Covered') # Field name made lowercase.
    year_to_date_benefits_paid__c = models.DecimalField(db_column=u'Year_to_Date_Benefits_Paid__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Year to Date Benefits Paid') # Field name made lowercase.
    out_of_area_benefits_paid__c = models.DecimalField(db_column=u'Out_of_Area_benefits_paid__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Out of Area benefits paid') # Field name made lowercase.
    in_network_benefits_paid__c = models.DecimalField(db_column=u'In_Network_benefits_paid__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'In Network benefits paid') # Field name made lowercase.
    penalty_benefits_paid__c = models.DecimalField(db_column=u'Penalty_benefits_paid__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Penalty benefits paid') # Field name made lowercase.
    out_of_area_deductible__c = models.DecimalField(db_column=u'Out_of_Area_Deductible__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Out of Area Deductible') # Field name made lowercase.
    in_network_deductible__c = models.DecimalField(db_column=u'In_Network_Deductible__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'In Network Deductible') # Field name made lowercase.
    penalty_deductible__c = models.DecimalField(db_column=u'Penalty_Deductible__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Penalty Deductible') # Field name made lowercase.
    out_of_area_deductible_carryover__c = models.DecimalField(db_column=u'Out_of_Area_Deductible_carryover__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Out of Area Deductible carryover') # Field name made lowercase.
    in_network_deductible_carryover__c = models.DecimalField(db_column=u'In_Network_Deductible_carryover__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'In Network Deductible carryover') # Field name made lowercase.
    penalty_deductible_carryover__c = models.DecimalField(db_column=u'Penalty_Deductible_carryover__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Penalty Deductible carryover') # Field name made lowercase.
    out_of_area_out_of_pocket__c = models.DecimalField(db_column=u'Out_of_Area_out_of_pocket__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Out of Area out of pocket') # Field name made lowercase.
    in_network_out_of_pocket__c = models.DecimalField(db_column=u'In_Network_out_of_pocket__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'In Network out of pocket') # Field name made lowercase.
    penalty_out_of_pocket__c = models.DecimalField(db_column=u'Penalty_out_of_pocket__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Penalty out of pocket') # Field name made lowercase.
    out_of_area_out_of_pocket_carry_over__c = models.DecimalField(db_column=u'Out_of_Area_Out_of_Pocket_carry_over__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Out of Area Out of Pocket carry over') # Field name made lowercase.
    in_network_out_of_area_carry_over__c = models.DecimalField(db_column=u'In_Network_out_of_area_carry_over__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'In Network out of area carry over') # Field name made lowercase.
    penalty_out_of_pocket_carry_over__c = models.DecimalField(db_column=u'Penalty_out_of_pocket_carry_over__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Penalty out of pocket carry over') # Field name made lowercase.
    allowable_expenses_not_paid__c = models.DecimalField(db_column=u'Allowable_Expenses_Not_Paid__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Allowable Expenses Not Paid') # Field name made lowercase.
    cob_credits__c = models.DecimalField(db_column=u'Cob_Credits__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Cob Credits') # Field name made lowercase.
    total_copayment_amount__c = models.DecimalField(db_column=u'Total_Copayment_Amount__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Total Copayment Amount') # Field name made lowercase.
    number_of_copayments__c = models.DecimalField(db_column=u'Number_of_copayments__c', decimal_places=0, max_digits=18, blank=True, null=True, verbose_name=u'Number of copayments') # Field name made lowercase.
    penalty_amount__c = models.DecimalField(db_column=u'Penalty_Amount__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Penalty Amount') # Field name made lowercase.
    uhhapi_updatedat__c = models.DateTimeField(null=True, verbose_name=u'uhhApi_updatedAt', db_column=u'uhhApi_updatedAt__c', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Accumulators__c'
        verbose_name = 'Accumulators'
        verbose_name_plural = 'Accumulators'
        # keyPrefix = 'a0n'

class Activityhistory(models.Model):
    accountid = models.ForeignKey('Account', null=True, db_column=u'AccountId', blank=True) # Field name made lowercase.
    whoid = models.ForeignKey('Contact', null=True, db_column=u'WhoId', blank=True) # Field name made lowercase.
    whatid = models.ForeignKey('AppealC', null=True, db_column=u'WhatId', blank=True) # Field name made lowercase.
    subject = models.CharField(db_column=u'Subject', choices=[(u'Call', u'Call'), (u'Send Letter', u'Send Letter'), (u'Send Quote', u'Send Quote'), (u'Other', u'Other')], max_length=80, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Subject') # Field name made lowercase.
    istask = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Task', db_column=u'IsTask') # Field name made lowercase.
    activitydate = models.DateField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Date', db_column=u'ActivityDate', blank=True) # Field name made lowercase.
    ownerid = models.ForeignKey('User', null=True, db_column=u'OwnerId', blank=True) # Field name made lowercase.
    status = models.CharField(db_column=u'Status', choices=[(u'Open', u'Open'), (u'Completed', u'Completed'), (u'Not Started', u'Not Started')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Status') # Field name made lowercase.
    priority = models.CharField(db_column=u'Priority', choices=[(u'High', u'High'), (u'Normal', u'Normal')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Priority') # Field name made lowercase.
    ishighpriority = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'High Priority', db_column=u'IsHighPriority') # Field name made lowercase.
    activitytype = models.CharField(db_column=u'ActivityType', choices=[(u'Call', None), (u'Call', None), (u'Email', None), (u'Meeting', None), (u'Meeting', None), (u'Other', None), (u'Other', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Type') # Field name made lowercase.
    isclosed = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Closed', db_column=u'IsClosed') # Field name made lowercase.
    durationinminutes = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Duration', db_column=u'DurationInMinutes', blank=True) # Field name made lowercase.
    location = models.CharField(max_length=80, verbose_name=u'Location', sf_read_only=models.READ_ONLY, db_column=u'Location', blank=True) # Field name made lowercase.
    description = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Comments', db_column=u'Description', blank=True) # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    calldurationinseconds = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Call Duration', db_column=u'CallDurationInSeconds', blank=True) # Field name made lowercase.
    calltype = models.CharField(db_column=u'CallType', choices=[(u'Internal', u'Internal'), (u'Inbound', u'Inbound'), (u'Outbound', u'Outbound')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Call Type') # Field name made lowercase.
    calldisposition = models.CharField(max_length=255, verbose_name=u'Call Result', sf_read_only=models.READ_ONLY, db_column=u'CallDisposition', blank=True) # Field name made lowercase.
    callobject = models.CharField(max_length=255, verbose_name=u'Call Object Identifier', sf_read_only=models.READ_ONLY, db_column=u'CallObject', blank=True) # Field name made lowercase.
    reminderdatetime = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Reminder Date/Time', db_column=u'ReminderDateTime', blank=True) # Field name made lowercase.
    isreminderset = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Reminder Set', db_column=u'IsReminderSet') # Field name made lowercase.
    enddatetime = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'End', db_column=u'EndDateTime', blank=True) # Field name made lowercase.
    startdatetime = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Start', db_column=u'StartDateTime', blank=True) # Field name made lowercase.
    primarywhoid = models.ForeignKey('Contact', null=True, db_column=u'PrimaryWhoId', blank=True) # Field name made lowercase.
    primaryaccountid = models.ForeignKey('Account', null=True, db_column=u'PrimaryAccountId', blank=True) # Field name made lowercase.
    x8x8_log__c = models.TextField(help_text=u'Log from 8x8. Field populated with call data.', sf_read_only=models.READ_ONLY, verbose_name=u'8x8 Log', db_column=u'X8x8_Log__c', blank=True) # Field name made lowercase.
    call_answered_time__c = models.CharField(db_column=u'Call_Answered_Time__c', max_length=50, blank=True, help_text=u'Time the call was answered by an agent.', sf_read_only=models.READ_ONLY, verbose_name=u'Call Answered Time') # Field name made lowercase.
    call_hangup_time__c = models.TextField(help_text=u'Time the call ended with the agent.', sf_read_only=models.READ_ONLY, verbose_name=u'Call Hangup Time', db_column=u'Call_Hangup_Time__c', blank=True) # Field name made lowercase.
    call_notes__c = models.TextField(help_text=u'Notes regarding the outcome of the call.', sf_read_only=models.READ_ONLY, verbose_name=u'Call Notes', db_column=u'Call_Notes__c', blank=True) # Field name made lowercase.
    channel_name__c = models.CharField(db_column=u'Channel_Name__c', max_length=100, blank=True, help_text=u'Name of the inbound or outbound channel or number dialed by customer.', sf_read_only=models.READ_ONLY, verbose_name=u'Channel Name') # Field name made lowercase.
    queue_name__c = models.CharField(db_column=u'Queue_Name__c', max_length=100, blank=True, help_text=u'Queue that the inbound or outbound channel directed the caller to.', sf_read_only=models.READ_ONLY, verbose_name=u'Queue Name') # Field name made lowercase.
    original_object_id__c = models.CharField(max_length=18, verbose_name=u'Original Object ID', sf_read_only=models.READ_ONLY, db_column=u'Original_Object_ID__c', blank=True) # Field name made lowercase.
    transactionid__c = models.CharField(max_length=200, verbose_name=u'Transaction ID', sf_read_only=models.READ_ONLY, blank=True)
    action__c = models.CharField(db_column=u'Action__c', choices=[(u'Called: No Contact', u'Called: No Contact'), (u'Contacted: Did not Quote', u'Contacted: Did not Quote'), (u'Contacted: Quoted but did not Sell', u'Contacted: Quoted but did not Sell'), (u'Do Not Call', u'Do Not Call'), (u'Medicaid Eligible', u'Medicaid Eligible'), (u'General Comment', u'General Comment'), (u'Not Interested', u'Not Interested'), (u'Application Completed', u'Application Completed'), (u'Application Incomplete', u'Application Incomplete'), (u'Called: Bad Phone #', u'Called: Bad Phone #'), (u'Contacted: Customer not ready to move forward', u'Contacted: Customer not ready to move forward'), (u'Lead generated through testing process', u'Lead generated through testing process'), (u'Prefers to Work Alone', u'Prefers to Work Alone'), (u'Has Coverage: Not looking to enroll at this time', u'Has Coverage: Not looking to enroll at this time'), (u'Pending HIXID from NHL', u'Pending HIXID from NHL')], max_length=255, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Action') # Field name made lowercase.
    migrated__c = models.BooleanField(help_text=u'Was this record migrated from old tenant?', sf_read_only=models.READ_ONLY, verbose_name=u'Migrated', db_column=u'Migrated__c') # Field name made lowercase.
    original_owner_name__c = models.CharField(max_length=150, verbose_name=u'Original Owner Name', sf_read_only=models.READ_ONLY, db_column=u'Original_Owner_Name__c', blank=True) # Field name made lowercase.
    auto_generated__c = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Auto Generated', db_column=u'Auto_Generated__c') # Field name made lowercase.
    current_carrier__c = models.CharField(max_length=255, db_column=u'Current_Carrier__c', blank=True, help_text=u'Use if action is Has Coverage: Not looking to enroll at this time.', sf_read_only=models.READ_ONLY, verbose_name=u'Current Carrier', choices=[(u'United', u'United'), (u'Sierra', u'Sierra'), (u'HPN', u'HPN'), (u'Coventry', u'Coventry'), (u'St Mary\u2019s', u'St Mary\u2019s'), (u'Aetna', u'Aetna'), (u'Assurant', u'Assurant')]) # Field name made lowercase.
    activity_type__c = models.CharField(max_length=255, db_column=u'Activity_Type__c', blank=True, help_text=u'Indicated the activity type used to interact with the member.', sf_read_only=models.READ_ONLY, verbose_name=u'Activity Type', choices=[(u'Call', u'Call'), (u'Email', u'Email'), (u'Mail', u'Mail'), (u'On-Site', u'On-Site'), (u'SMS', u'SMS'), (u'Case Note', u'Case Note'), (u'Event / Grievance', u'Event / Grievance')]) # Field name made lowercase.
    date_interest_expressed__c = models.DateField(db_column=u'Date_Interest_Expressed__c', sf_read_only=models.READ_ONLY, blank=True, help_text=u'Date that interest was expressed by a provider for engaging with NHC.', null=True, verbose_name=u'Date Interest Expressed') # Field name made lowercase.
    program_contact_type__c = models.CharField(db_column=u'Program_Contact_Type__c', choices=[(u'Asthma Program Initial Telephone Contact', u'Asthma Program Initial Telephone Contact'), (u'Asthma Program Follow-Up Telephone Contact', u'Asthma Program Follow-Up Telephone Contact'), (u'Diabetes Program Initial Telephone Contact', u'Diabetes Program Initial Telephone Contact'), (u'Diabetes Program Follow-Up Telephone Contact', u'Diabetes Program Follow-Up Telephone Contact')], max_length=255, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Program Contact Type') # Field name made lowercase.
    review_and_update_demographic_info__c = models.BooleanField(help_text=u'During the conversation did you review and update demographic information with the member?', sf_read_only=models.READ_ONLY, verbose_name=u'Review and update demographic info', db_column=u'Review_and_update_demographic_info__c') # Field name made lowercase.
    review_and_update_practitioner_info__c = models.BooleanField(help_text=u'During the conversation was a review and update practitioner information performed?', sf_read_only=models.READ_ONLY, verbose_name=u'Review and update practitioner info', db_column=u'Review_and_update_practitioner_info__c') # Field name made lowercase.
    asthma_affecting_work_school_home_etc__c = models.CharField(max_length=255, db_column=u'Asthma_affecting_work_school_home_etc__c', blank=True, help_text=u'In the past 4 weeks, how much of the time did your asthma keep you from getting as much done at work, school or home? The integer represents a five-point Likert Scale from \u201call of the time\u201d to \u201cnone of the time.\u201d', sf_read_only=models.READ_ONLY, verbose_name=u'Asthma affecting work, school, home, etc', choices=[(u'1', u'1'), (u'2', u'2'), (u'3', u'3'), (u'4', u'4'), (u'5', u'5')]) # Field name made lowercase.
    how_often__c = models.CharField(max_length=255, db_column=u'How_often__c', blank=True, help_text=u'During the past 4 weeks, how often has the member had shortness of breath?\r\nThe integer represents a five-point Likert Scale from \u201cmore than once a day\u201d to \u201cnot at all.\u201d', sf_read_only=models.READ_ONLY, verbose_name=u'How often had shortness of breath?', choices=[(u'1', u'1'), (u'2', u'2'), (u'3', u'3'), (u'4', u'4'), (u'5', u'5')]) # Field name made lowercase.
    asthma_symptoms_wake_you__c = models.CharField(max_length=255, db_column=u'Asthma_symptoms_wake_you__c', blank=True, help_text=u'During the past 4 weeks, how often did your asthma symptoms (wheezing, coughing, short-of-breath, chest tightness, or pain) wake you up at night or earlier than usual in the morning? Five-point Likert Scale from \u201c4 or more nights a week\u201d to \u201cnot at all"', sf_read_only=models.READ_ONLY, verbose_name=u'Asthma symptoms wake you?', choices=[(u'1', u'1'), (u'2', u'2'), (u'3', u'3'), (u'4', u'4'), (u'5', u'5')]) # Field name made lowercase.
    how_often_used_rescue_inhaler_or_meds__c = models.CharField(max_length=255, db_column=u'How_often_used_rescue_inhaler_or_meds__c', blank=True, help_text=u'During the past 4 weeks, how often have you used your rescue inhaler or nebulizer medication (such as albuterol)?\r\nThe integer represents a five-point Likert Scale from \u201c3 or more times per day\u201d to \u201cnot at all.\u201d', sf_read_only=models.READ_ONLY, verbose_name=u'How often used rescue inhaler or meds?', choices=[(u'1', u'1'), (u'2', u'2'), (u'3', u'3'), (u'4', u'4'), (u'5', u'5')]) # Field name made lowercase.
    rate_for_asthma_control_in_past_4_weeks__c = models.CharField(max_length=255, db_column=u'Rate_for_asthma_control_in_past_4_weeks__c', blank=True, help_text=u'How would you rate your asthma control during the past 4 weeks?\r\nThe integer represents a five-point Likert Scale from \u201cnot controlled at all\u201d to \u201ccompletely controlled.\u201d', sf_read_only=models.READ_ONLY, verbose_name=u'Rate for asthma control in past 4 weeks?', choices=[(u'1', u'1'), (u'2', u'2'), (u'3', u'3'), (u'4', u'4'), (u'5', u'5')]) # Field name made lowercase.
    iscloned__c = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'isCloned', db_column=u'isCloned__c') # Field name made lowercase.
    isvipaccount__c = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'isVIPAccount', db_column=u'isVIPAccount__c') # Field name made lowercase.
    cloned_from__c = models.CharField(max_length=20, verbose_name=u'Cloned From', sf_read_only=models.READ_ONLY, db_column=u'Cloned_From__c', blank=True) # Field name made lowercase.
    clonecomments__c = models.CharField(max_length=50, verbose_name=u'cloneComments', sf_read_only=models.READ_ONLY, db_column=u'cloneComments__c', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'ActivityHistory'
        verbose_name = 'Activity History'
        verbose_name_plural = 'Activity History'
        # keyPrefix = 'None'

class Additionalnumber(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    callcenterid = models.ForeignKey('Callcenter', null=True, db_column=u'CallCenterId', blank=True) # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'Name', db_column=u'Name') # Field name made lowercase.
    description = models.CharField(max_length=255, verbose_name=u'Description', db_column=u'Description', blank=True) # Field name made lowercase.
    phone = models.CharField(max_length=40, verbose_name=u'Phone', db_column=u'Phone', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'AdditionalNumber'
        verbose_name = 'Additional Directory Number'
        verbose_name_plural = 'Additional Directory Numbers'
        # keyPrefix = '04m'

class AdditionaluserdataC(models.Model):
    ownerid = models.ForeignKey('Group', db_column=u'OwnerId') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'AdditionalUserData Name', db_column=u'Name', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    userid__c = models.CharField(max_length=100, verbose_name=u'UserId', db_column=u'UserId__c', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'AdditionalUserData__c'
        verbose_name = 'AdditionalUserData'
        verbose_name_plural = 'AdditionalUserDatas'
        # keyPrefix = 'a0a'

class Aggregateresult(models.Model):
    class Meta(models.Model.Meta):
        db_table = 'AggregateResult'
        verbose_name = 'Aggregate Result'
        verbose_name_plural = 'Aggregate Result'
        # keyPrefix = 'None'

class Announcement(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    feeditemid = models.ForeignKey('Feeditem', unique=True, db_column=u'FeedItemId') # Field name made lowercase.
    expirationdate = models.DateTimeField(verbose_name=u'Expiration Date', db_column=u'ExpirationDate') # Field name made lowercase.
    parentid = models.ForeignKey('Collaborationgroup', null=True, db_column=u'ParentId', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Announcement'
        verbose_name = 'Announcement'
        verbose_name_plural = 'Announcements'
        # keyPrefix = '0Bt'

class Apexclass(models.Model):
    namespaceprefix = models.CharField(max_length=15, verbose_name=u'Namespace Prefix', sf_read_only=models.READ_ONLY, db_column=u'NamespacePrefix', blank=True) # Field name made lowercase.
    name = models.CharField(max_length=255, verbose_name=u'Name', db_column=u'Name') # Field name made lowercase.
    apiversion = models.DecimalField(decimal_places=1, verbose_name=u'Api Version', max_digits=18, db_column=u'ApiVersion') # Field name made lowercase.
    status = models.CharField(max_length=40, verbose_name=u'Status', db_column=u'Status', choices=[(u'Inactive', u'Inactive'), (u'Active', u'Active'), (u'Deleted', u'Deleted')]) # Field name made lowercase.
    isvalid = models.BooleanField(verbose_name=u'Is Valid', db_column=u'IsValid') # Field name made lowercase.
    bodycrc = models.DecimalField(db_column=u'BodyCrc', decimal_places=0, max_digits=18, blank=True, null=True, verbose_name=u'Body CRC') # Field name made lowercase.
    body = models.TextField(verbose_name=u'Body', db_column=u'Body', blank=True) # Field name made lowercase.
    lengthwithoutcomments = models.IntegerField(verbose_name=u'Size Without Comments', db_column=u'LengthWithoutComments') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'ApexClass'
        verbose_name = 'Apex Class'
        verbose_name_plural = 'Apex Classes'
        # keyPrefix = '01p'

class Apexcomponent(models.Model):
    namespaceprefix = models.CharField(max_length=15, verbose_name=u'Namespace Prefix', sf_read_only=models.READ_ONLY, db_column=u'NamespacePrefix', blank=True) # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'Name', db_column=u'Name') # Field name made lowercase.
    apiversion = models.DecimalField(decimal_places=1, verbose_name=u'Api Version', max_digits=18, db_column=u'ApiVersion') # Field name made lowercase.
    masterlabel = models.CharField(max_length=80, verbose_name=u'Label', db_column=u'MasterLabel') # Field name made lowercase.
    description = models.TextField(verbose_name=u'Description', db_column=u'Description', blank=True) # Field name made lowercase.
    controllertype = models.CharField(max_length=40, verbose_name=u'Controller Type', db_column=u'ControllerType', choices=[(u'0', u'Not Specified'), (u'1', u'Standard'), (u'4', u'Standard Set'), (u'2', u'Custom'), (u'3', u'Java'), (u'5', u'Spring')]) # Field name made lowercase.
    controllerkey = models.CharField(max_length=255, verbose_name=u'Controller Key', db_column=u'ControllerKey', blank=True) # Field name made lowercase.
    markup = models.TextField(verbose_name=u'Markup', db_column=u'Markup') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'ApexComponent'
        verbose_name = 'Visualforce Component'
        verbose_name_plural = 'Visualforce Components'
        # keyPrefix = '099'

class Apexlog(models.Model):
    loguserid = models.ForeignKey('User', null=True, db_column=u'LogUserId', blank=True) # Field name made lowercase.
    loglength = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Log Size (bytes)', db_column=u'LogLength') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    request = models.CharField(max_length=16, verbose_name=u'Request Type', sf_read_only=models.READ_ONLY, db_column=u'Request') # Field name made lowercase.
    operation = models.CharField(max_length=128, verbose_name=u'Operation', sf_read_only=models.READ_ONLY, db_column=u'Operation') # Field name made lowercase.
    application = models.CharField(max_length=64, verbose_name=u'Application', sf_read_only=models.READ_ONLY, db_column=u'Application') # Field name made lowercase.
    status = models.CharField(max_length=255, verbose_name=u'Status', sf_read_only=models.READ_ONLY, db_column=u'Status') # Field name made lowercase.
    durationmilliseconds = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Duration (ms)', db_column=u'DurationMilliseconds') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    starttime = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Start Time', db_column=u'StartTime') # Field name made lowercase.
    location = models.CharField(db_column=u'Location', choices=[(u'Monitoring', None), (u'SystemLog', None), (u'HeapDump', None), (u'Preserved', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Location') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'ApexLog'
        verbose_name = 'Apex Debug Log'
        verbose_name_plural = 'Apex Debug Log'
        # keyPrefix = '07L'

class Apexpage(models.Model):
    namespaceprefix = models.CharField(max_length=15, verbose_name=u'Namespace Prefix', sf_read_only=models.READ_ONLY, db_column=u'NamespacePrefix', blank=True) # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'Name', db_column=u'Name') # Field name made lowercase.
    apiversion = models.DecimalField(decimal_places=1, verbose_name=u'Api Version', max_digits=18, db_column=u'ApiVersion') # Field name made lowercase.
    masterlabel = models.CharField(max_length=80, verbose_name=u'Label', db_column=u'MasterLabel') # Field name made lowercase.
    description = models.TextField(verbose_name=u'Description', db_column=u'Description', blank=True) # Field name made lowercase.
    controllertype = models.CharField(max_length=40, verbose_name=u'Controller Type', db_column=u'ControllerType', choices=[(u'0', u'Not Specified'), (u'1', u'Standard'), (u'4', u'Standard Set'), (u'2', u'Custom'), (u'3', u'Java'), (u'5', u'Spring')]) # Field name made lowercase.
    controllerkey = models.CharField(max_length=255, verbose_name=u'Controller Key', db_column=u'ControllerKey', blank=True) # Field name made lowercase.
    isavailableintouch = models.BooleanField(verbose_name=u'Available for Salesforce mobile apps', db_column=u'IsAvailableInTouch') # Field name made lowercase.
    isconfirmationtokenrequired = models.BooleanField(verbose_name=u'Require CSRF protection on GET requests', db_column=u'IsConfirmationTokenRequired') # Field name made lowercase.
    markup = models.TextField(verbose_name=u'Markup', db_column=u'Markup') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'ApexPage'
        verbose_name = 'Visualforce Page'
        verbose_name_plural = 'Visualforce Pages'
        # keyPrefix = '066'

class Apextestqueueitem(models.Model):
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    apexclassid = models.ForeignKey('Apexclass', db_column=u'ApexClassId') # Field name made lowercase.
    status = models.CharField(max_length=40, verbose_name=u'Status', sf_read_only=models.NOT_CREATEABLE, db_column=u'Status', choices=[(u'Queued', u'Queued'), (u'Processing', u'Processing'), (u'Aborted', u'Aborted'), (u'Completed', u'Completed'), (u'Failed', u'Failed'), (u'Preparing', u'Preparing'), (u'Holding', u'Holding')]) # Field name made lowercase.
    extendedstatus = models.CharField(max_length=1000, verbose_name=u'Status Detail', sf_read_only=models.READ_ONLY, db_column=u'ExtendedStatus', blank=True) # Field name made lowercase.
    parentjobid = models.ForeignKey('Asyncapexjob', null=True, db_column=u'ParentJobId', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'ApexTestQueueItem'
        verbose_name = 'Apex Test Queue Item'
        verbose_name_plural = 'Apex Test Queue Items'
        # keyPrefix = '709'

class Apextestresult(models.Model):
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    testtimestamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Time Started', db_column=u'TestTimestamp') # Field name made lowercase.
    outcome = models.CharField(max_length=40, verbose_name=u'Pass/Fail', sf_read_only=models.READ_ONLY, db_column=u'Outcome', choices=[(u'Pass', u'Pass'), (u'Fail', u'Fail'), (u'CompileFail', u'CompileFail'), (u'Skip', u'Skip')]) # Field name made lowercase.
    apexclassid = models.ForeignKey('Apexclass', db_column=u'ApexClassId') # Field name made lowercase.
    methodname = models.CharField(max_length=255, verbose_name=u'Method Name', sf_read_only=models.READ_ONLY, db_column=u'MethodName', blank=True) # Field name made lowercase.
    message = models.CharField(max_length=4000, verbose_name=u'Error Message', sf_read_only=models.READ_ONLY, db_column=u'Message', blank=True) # Field name made lowercase.
    stacktrace = models.CharField(max_length=4000, verbose_name=u'Stack Trace', sf_read_only=models.READ_ONLY, db_column=u'StackTrace', blank=True) # Field name made lowercase.
    asyncapexjobid = models.ForeignKey('Asyncapexjob', null=True, db_column=u'AsyncApexJobId', blank=True) # Field name made lowercase.
    queueitemid = models.ForeignKey('Apextestqueueitem', null=True, db_column=u'QueueItemId', blank=True) # Field name made lowercase.
    apexlogid = models.ForeignKey('Apexlog', null=True, db_column=u'ApexLogId', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'ApexTestResult'
        verbose_name = 'Apex Test Result'
        verbose_name_plural = 'Apex Test Results'
        # keyPrefix = '07M'

class Apextrigger(models.Model):
    namespaceprefix = models.CharField(max_length=15, verbose_name=u'Namespace Prefix', sf_read_only=models.READ_ONLY, db_column=u'NamespacePrefix', blank=True) # Field name made lowercase.
    name = models.CharField(max_length=255, verbose_name=u'Name', db_column=u'Name') # Field name made lowercase.
    tableenumorid = models.CharField(blank=True, max_length=40, verbose_name=u'Custom Object Definition ID', db_column=u'TableEnumOrId', choices=[(u'Account', None), (u'Asset', None), (u'Attachment', None), (u'Campaign', None), (u'CampaignMember', None), (u'Case', None), (u'CaseComment', None), (u'CollaborationFolder', None), (u'CollaborationFolderMember', None), (u'CollaborationGroup', None), (u'CollaborationGroupMember', None), (u'Contact', None), (u'ContentDocument', None), (u'ContentVersion', None), (u'Contract', None), (u'Event', None), (u'FeedComment', None), (u'FeedItem', None), (u'Lead', None), (u'NetworkMember', None), (u'Note', None), (u'Opportunity', None), (u'OpportunityLineItem', None), (u'Partner', None), (u'Pricebook2', None), (u'Product2', None), (u'Quote', None), (u'QuoteLineItem', None), (u'RecordOrigin', None), (u'Solution', None), (u'Task', None), (u'Topic', None), (u'TopicAssignment', None), (u'User', None), (u'WorkCoaching', None), (u'WorkFeedback', None), (u'WorkFeedbackQuestion', None), (u'WorkFeedbackQuestionSet', None), (u'WorkFeedbackRequest', None), (u'WorkGoal', None), (u'WorkGoalCollaborator', None), (u'WorkGoalLink', None), (u'WorkPerformanceCycle', None)]) # Field name made lowercase.
    usagebeforeinsert = models.BooleanField(verbose_name=u'BeforeInsert', db_column=u'UsageBeforeInsert') # Field name made lowercase.
    usageafterinsert = models.BooleanField(verbose_name=u'AfterInsert', db_column=u'UsageAfterInsert') # Field name made lowercase.
    usagebeforeupdate = models.BooleanField(verbose_name=u'BeforeUpdate', db_column=u'UsageBeforeUpdate') # Field name made lowercase.
    usageafterupdate = models.BooleanField(verbose_name=u'AfterUpdate', db_column=u'UsageAfterUpdate') # Field name made lowercase.
    usagebeforedelete = models.BooleanField(verbose_name=u'BeforeDelete', db_column=u'UsageBeforeDelete') # Field name made lowercase.
    usageafterdelete = models.BooleanField(verbose_name=u'AfterDelete', db_column=u'UsageAfterDelete') # Field name made lowercase.
    usageisbulk = models.BooleanField(verbose_name=u'IsBulk', db_column=u'UsageIsBulk') # Field name made lowercase.
    usageafterundelete = models.BooleanField(verbose_name=u'AfterUndelete', db_column=u'UsageAfterUndelete') # Field name made lowercase.
    apiversion = models.DecimalField(decimal_places=1, verbose_name=u'Api Version', max_digits=18, db_column=u'ApiVersion') # Field name made lowercase.
    status = models.CharField(max_length=40, verbose_name=u'Status', db_column=u'Status', choices=[(u'Inactive', u'Inactive'), (u'Active', u'Active'), (u'Deleted', u'Deleted')]) # Field name made lowercase.
    isvalid = models.BooleanField(verbose_name=u'Is Valid', db_column=u'IsValid') # Field name made lowercase.
    bodycrc = models.DecimalField(db_column=u'BodyCrc', decimal_places=0, max_digits=18, blank=True, null=True, verbose_name=u'Body CRC') # Field name made lowercase.
    body = models.TextField(verbose_name=u'Body', db_column=u'Body', blank=True) # Field name made lowercase.
    lengthwithoutcomments = models.IntegerField(verbose_name=u'Size Without Comments', db_column=u'LengthWithoutComments') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'ApexTrigger'
        verbose_name = 'Apex Trigger'
        verbose_name_plural = 'Apex Triggers'
        # keyPrefix = '01q'

class Appmenuitem(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    sortorder = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Sort Order', db_column=u'SortOrder') # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'Developer Name', sf_read_only=models.READ_ONLY, db_column=u'Name', blank=True) # Field name made lowercase.
    namespaceprefix = models.CharField(max_length=80, verbose_name=u'Namespace Prefix', sf_read_only=models.READ_ONLY, db_column=u'NamespacePrefix', blank=True) # Field name made lowercase.
    label = models.CharField(max_length=250, verbose_name=u'Label', sf_read_only=models.READ_ONLY, db_column=u'Label', blank=True) # Field name made lowercase.
    description = models.CharField(max_length=250, verbose_name=u'Description', sf_read_only=models.READ_ONLY, db_column=u'Description', blank=True) # Field name made lowercase.
    starturl = models.URLField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Start Url', db_column=u'StartUrl', blank=True) # Field name made lowercase.
    mobilestarturl = models.URLField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Mobile Start Url', db_column=u'MobileStartUrl', blank=True) # Field name made lowercase.
    logourl = models.URLField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Logo Image URL', db_column=u'LogoUrl', blank=True) # Field name made lowercase.
    iconurl = models.URLField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Icon Url', db_column=u'IconUrl', blank=True) # Field name made lowercase.
    infourl = models.URLField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Info URL', db_column=u'InfoUrl', blank=True) # Field name made lowercase.
    isusingadminauthorization = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'IsUsingAdminAuthorization', db_column=u'IsUsingAdminAuthorization') # Field name made lowercase.
    mobileplatform = models.CharField(db_column=u'MobilePlatform', choices=[(u'ios', u'iOS'), (u'android', u'Android')], max_length=255, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Mobile device OS platform') # Field name made lowercase.
    mobileminosver = models.CharField(max_length=255, verbose_name=u'Minimum required mobile device OS version', sf_read_only=models.READ_ONLY, db_column=u'MobileMinOsVer', blank=True) # Field name made lowercase.
    mobiledevicetype = models.CharField(max_length=255, verbose_name=u'Type of mobile device', sf_read_only=models.READ_ONLY, db_column=u'MobileDeviceType', blank=True) # Field name made lowercase.
    isregistereddeviceonly = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'App requires a registered mobile device', db_column=u'IsRegisteredDeviceOnly') # Field name made lowercase.
    mobileappver = models.CharField(max_length=255, verbose_name=u'Version of the mobile app', sf_read_only=models.READ_ONLY, db_column=u'MobileAppVer', blank=True) # Field name made lowercase.
    mobileappinstalleddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Date the mobile app was most recently installed', db_column=u'MobileAppInstalledDate', blank=True) # Field name made lowercase.
    mobileappinstalledversion = models.CharField(max_length=255, verbose_name=u'Most recently installed version of the mobile app', sf_read_only=models.READ_ONLY, db_column=u'MobileAppInstalledVersion', blank=True) # Field name made lowercase.
    mobileappbinaryid = models.CharField(max_length=255, verbose_name=u'ID for the related mobile app binary', sf_read_only=models.READ_ONLY, db_column=u'MobileAppBinaryId', blank=True) # Field name made lowercase.
    mobileappinstallurl = models.URLField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'URL to install the mobile app', db_column=u'MobileAppInstallUrl', blank=True) # Field name made lowercase.
    canvasenabled = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Is this a canvas-enabled application', db_column=u'CanvasEnabled') # Field name made lowercase.
    canvasreferenceid = models.CharField(max_length=18, verbose_name=u'The identifier used to render the canvas application.', sf_read_only=models.READ_ONLY, db_column=u'CanvasReferenceId', blank=True) # Field name made lowercase.
    canvasurl = models.URLField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'The canvas url for the canvas application', db_column=u'CanvasUrl', blank=True) # Field name made lowercase.
    canvasaccessmethod = models.CharField(db_column=u'CanvasAccessMethod', choices=[(u'Get', u'OAuth Webflow (GET)'), (u'Post', u'Signed Request (POST)')], max_length=255, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'The configured access method for the canvas application') # Field name made lowercase.
    canvasselectedlocations = models.CharField(max_length=255, verbose_name=u'The selected/supported locations of the canvas application', sf_read_only=models.READ_ONLY, db_column=u'CanvasSelectedLocations', blank=True) # Field name made lowercase.
    type = models.CharField(db_column=u'Type', choices=[(u'ConnectedApplication', None), (u'ServiceProvider', None), (u'TabSet', None)], max_length=255, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'App Type') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'AppMenuItem'
        verbose_name = 'AppMenuItem'
        verbose_name_plural = 'AppMenuItems'
        # keyPrefix = '0DS'

class AppealHistory(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    parentid = models.ForeignKey('AppealC', db_column=u'ParentId') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    field = models.CharField(max_length=255, verbose_name=u'Changed Field', sf_read_only=models.READ_ONLY, db_column=u'Field', choices=[(u'Appeal_Category__c', None), (u'Associated_Account__c', None), (u'cloneComments__c', None), (u'ClonedFrom__c', None), (u'created', u'Created.'), (u'Fax_Response_Email__c', None), (u'feedEvent', u'Feed event'), (u'isCloned__c', None), (u'isVIPAccount__c', None), (u'Name', None), (u'Non_Appeal_Reason__c', None), (u'Owner', None), (u'ownerAccepted', u'Owner (Accepted)'), (u'ownerAssignment', u'Owner (Assignment)'), (u'locked', u'Record locked.'), (u'unlocked', u'Record unlocked.'), (u'Status__c', None), (u'Submitted_Via__c', None), (u'Type_of_Request__c', None)]) # Field name made lowercase.
    oldvalue = models.CharField(max_length=255, verbose_name=u'Old Value', sf_read_only=models.READ_ONLY, db_column=u'OldValue', blank=True) # Field name made lowercase.
    newvalue = models.CharField(max_length=255, verbose_name=u'New Value', sf_read_only=models.READ_ONLY, db_column=u'NewValue', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Appeal__History'
        verbose_name = 'History: Appeal'
        verbose_name_plural = 'History: Appeal'
        # keyPrefix = 'None'

class AppealC(models.Model):
    ownerid = models.ForeignKey('Group', db_column=u'OwnerId') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'Appeal Name', db_column=u'Name', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    lastactivitydate = models.DateField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Activity Date', db_column=u'LastActivityDate', blank=True) # Field name made lowercase.
    lastvieweddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Viewed Date', db_column=u'LastViewedDate', blank=True) # Field name made lowercase.
    lastreferenceddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Referenced Date', db_column=u'LastReferencedDate', blank=True) # Field name made lowercase.
    appeal_category__c = models.CharField(blank=True, max_length=255, verbose_name=u'Appeal Category', db_column=u'Appeal_Category__c', choices=[(u'Expedite', u'Expedite'), (u'30 Day', u'30 Day'), (u'60 Day', u'60 Day'), (u'Complaint', u'Complaint')]) # Field name made lowercase.
    fax_response_email__c = models.EmailField(null=True, verbose_name=u'Fax Response Email', db_column=u'Fax_Response_Email__c', blank=True) # Field name made lowercase.
    status__c = models.CharField(blank=True, max_length=255, verbose_name=u'Status', db_column=u'Status__c', choices=[(u'[Alert] New', u'[Alert] New'), (u'Acknowledgment Sent', u'Acknowledgment Sent'), (u'Resolved', u'Resolved'), (u'Sent to FH', u'Sent to FH'), (u'Sent to HI', u'Sent to HI'), (u'Sent to HMC', u'Sent to HMC'), (u'Sent to NHS', u'Sent to NHS'), (u'Sent to Catamaran', u'Sent to Catamaran'), (u'Sent to Claims', u'Sent to Claims')]) # Field name made lowercase.
    submitted_via__c = models.CharField(blank=True, max_length=255, verbose_name=u'Submitted Via', db_column=u'Submitted_Via__c', choices=[(u'Fax', u'Fax'), (u'Call', u'Call'), (u'Other', u'Other'), (u'Email', u'Email'), (u'Mail', u'Mail'), (u'Walk-In', u'Walk-In')]) # Field name made lowercase.
    associated_account__c = models.ForeignKey('Account', null=True, db_column=u'Associated_Account__c', blank=True) # Field name made lowercase.
    type_of_request__c = models.CharField(blank=True, max_length=255, verbose_name=u'Type of Request', db_column=u'Type_of_Request__c', choices=[(u'Benefits', u'Benefits'), (u'Claims', u'Claims'), (u'Formal Complaint', u'Formal Complaint'), (u'Retro', u'Retro'), (u'Reconsideration/P2P', u'Reconsideration/P2P'), (u'Appeal Level 1', u'Appeal Level 1'), (u'Appeal Level 2', u'Appeal Level 2'), (u'Not an Appeal', u'Not an Appeal')]) # Field name made lowercase.
    non_appeal_reason__c = models.CharField(max_length=255, verbose_name=u'Non-Appeal Reason', db_column=u'Non_Appeal_Reason__c', blank=True) # Field name made lowercase.
    clonedfrom__c = models.ForeignKey('self', null=True, db_column=u'ClonedFrom__c', blank=True) # Field name made lowercase.
    iscloned__c = models.BooleanField(verbose_name=u'isCloned', db_column=u'isCloned__c') # Field name made lowercase.
    isvipaccount__c = models.BooleanField(verbose_name=u'isVIPAccount', db_column=u'isVIPAccount__c') # Field name made lowercase.
    clonecomments__c = models.CharField(max_length=50, verbose_name=u'cloneComments', db_column=u'cloneComments__c', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Appeal__c'
        verbose_name = 'Appeal'
        verbose_name_plural = 'Appeals'
        # keyPrefix = 'a05'

class Asset(models.Model):
    contactid = models.ForeignKey('Contact', null=True, db_column=u'ContactId', blank=True) # Field name made lowercase.
    accountid = models.ForeignKey('Account', null=True, db_column=u'AccountId', blank=True) # Field name made lowercase.
    product2id = models.ForeignKey('Product2', null=True, db_column=u'Product2Id', blank=True) # Field name made lowercase.
    iscompetitorproduct = models.BooleanField(verbose_name=u'Competitor Asset', db_column=u'IsCompetitorProduct') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=255, verbose_name=u'Asset Name', db_column=u'Name') # Field name made lowercase.
    serialnumber = models.CharField(max_length=80, verbose_name=u'Serial Number', db_column=u'SerialNumber', blank=True) # Field name made lowercase.
    installdate = models.DateField(null=True, verbose_name=u'Install Date', db_column=u'InstallDate', blank=True) # Field name made lowercase.
    purchasedate = models.DateField(null=True, verbose_name=u'Purchase Date', db_column=u'PurchaseDate', blank=True) # Field name made lowercase.
    usageenddate = models.DateField(null=True, verbose_name=u'Usage End Date', db_column=u'UsageEndDate', blank=True) # Field name made lowercase.
    status = models.CharField(blank=True, max_length=40, verbose_name=u'Status', db_column=u'Status', choices=[(u'Purchased', u'Purchased'), (u'Shipped', u'Shipped'), (u'Installed', u'Installed'), (u'Registered', u'Registered'), (u'Obsolete', u'Obsolete')]) # Field name made lowercase.
    price = models.DecimalField(db_column=u'Price', decimal_places=0, max_digits=18, blank=True, null=True, verbose_name=u'Price') # Field name made lowercase.
    quantity = models.DecimalField(db_column=u'Quantity', decimal_places=2, max_digits=12, blank=True, null=True, verbose_name=u'Quantity') # Field name made lowercase.
    description = models.TextField(verbose_name=u'Description', db_column=u'Description', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Asset'
        verbose_name = 'Asset'
        verbose_name_plural = 'Assets'
        # keyPrefix = '02i'

class Assetfeed(models.Model):
    parentid = models.ForeignKey('Asset', db_column=u'ParentId') # Field name made lowercase.
    type = models.CharField(db_column=u'Type', choices=[(u'TrackedChange', u'Tracked Change'), (u'UserStatus', u'User Status'), (u'TextPost', u'Text Post'), (u'AdvancedTextPost', u'Advanced Text Post'), (u'LinkPost', u'Link Post'), (u'ContentPost', u'Content Post'), (u'PollPost', u'Poll'), (u'RypplePost', u'Work.com Thanks'), (u'ProfileSkillPost', u'Profile Skill Post'), (u'DashboardComponentSnapshot', u'Dashboard Component Snapshot'), (u'ApprovalPost', u'Approval Post'), (u'CaseCommentPost', u'Case Comment Feed'), (u'ReplyPost', u'Reply Post'), (u'EmailMessageEvent', u'Email Message Feed'), (u'CallLogPost', u'Call Log Feed'), (u'ChangeStatusPost', u'Change Status Feed'), (u'AttachArticleEvent', u'Attached Article'), (u'MilestoneEvent', u'Milestone Event'), (u'ActivityEvent', u'Activity Change'), (u'ChatTranscriptPost', u'Chat Transcript Post'), (u'CollaborationGroupCreated', u'Collaboration Group Created'), (u'CollaborationGroupUnarchived', u'Collaboration Group Reactivated'), (u'SocialPost', u'Social Post'), (u'QuestionPost', u'Question Post'), (u'FacebookPost', u'Facebook Post'), (u'BasicTemplateFeedItem', u'Basic Template Post'), (u'CreateRecordEvent', u'Created Record'), (u'CanvasPost', u'Canvas'), (u'AnnouncementPost', u'a')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Feed Item Type') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    commentcount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Comment Count', db_column=u'CommentCount') # Field name made lowercase.
    likecount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Like Count', db_column=u'LikeCount') # Field name made lowercase.
    title = models.CharField(max_length=255, verbose_name=u'Title', sf_read_only=models.READ_ONLY, db_column=u'Title', blank=True) # Field name made lowercase.
    body = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Body', db_column=u'Body', blank=True) # Field name made lowercase.
    linkurl = models.URLField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Link Url', db_column=u'LinkUrl', blank=True) # Field name made lowercase.
    relatedrecordid = models.ForeignKey('Contentversion', null=True, db_column=u'RelatedRecordId', blank=True) # Field name made lowercase.
    contentdata = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Content Data', db_column=u'ContentData', blank=True) # Field name made lowercase.
    contentfilename = models.CharField(max_length=255, verbose_name=u'Content File Name', sf_read_only=models.READ_ONLY, db_column=u'ContentFileName', blank=True) # Field name made lowercase.
    contentdescription = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Content Description', db_column=u'ContentDescription', blank=True) # Field name made lowercase.
    contenttype = models.CharField(max_length=120, verbose_name=u'Content File Type', sf_read_only=models.READ_ONLY, db_column=u'ContentType', blank=True) # Field name made lowercase.
    contentsize = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Content Size', db_column=u'ContentSize', blank=True) # Field name made lowercase.
    insertedbyid = models.ForeignKey('User', null=True, db_column=u'InsertedById', blank=True) # Field name made lowercase.
    networkscope = models.CharField(db_column=u'NetworkScope', choices=[(u'AllNetworks', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Network Scope') # Field name made lowercase.
    visibility = models.CharField(db_column=u'Visibility', choices=[(u'AllUsers', None), (u'InternalUsers', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Visibility') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'AssetFeed'
        verbose_name = 'Asset Feed'
        verbose_name_plural = 'Asset Feed'
        # keyPrefix = 'None'

class Assignmentrule(models.Model):
    name = models.CharField(max_length=120, verbose_name=u'Name', sf_read_only=models.READ_ONLY, db_column=u'Name', blank=True) # Field name made lowercase.
    sobjecttype = models.CharField(db_column=u'SobjectType', choices=[(u'Case', None), (u'Lead', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'SObject Type') # Field name made lowercase.
    active = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Active', db_column=u'Active') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'AssignmentRule'
        verbose_name = 'Assignment Rule'
        verbose_name_plural = 'Assignment Rules'
        # keyPrefix = '01Q'

class Asyncapexjob(models.Model):
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    jobtype = models.CharField(max_length=40, verbose_name=u'Job Type', sf_read_only=models.READ_ONLY, db_column=u'JobType', choices=[(u'Future', u'Future'), (u'SharingRecalculation', u'Sharing Recalculation'), (u'ScheduledApex', u'Scheduled Apex'), (u'BatchApex', u'Batch Apex'), (u'BatchApexWorker', u'Batch Apex Worker'), (u'TestRequest', u'Test Request'), (u'TestWorker', u'Test Worker'), (u'ApexToken', u'Apex Token'), (u'Queueable', u'Queueable')]) # Field name made lowercase.
    apexclassid = models.ForeignKey('Apexclass', null=True, db_column=u'ApexClassId', blank=True) # Field name made lowercase.
    status = models.CharField(max_length=40, verbose_name=u'Status', sf_read_only=models.READ_ONLY, db_column=u'Status', choices=[(u'Queued', u'Queued'), (u'Processing', u'Processing'), (u'Aborted', u'Aborted'), (u'Completed', u'Completed'), (u'Failed', u'Failed'), (u'Preparing', u'Preparing'), (u'Holding', u'Holding')]) # Field name made lowercase.
    jobitemsprocessed = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Batches Processed', db_column=u'JobItemsProcessed') # Field name made lowercase.
    totaljobitems = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Total Batches', db_column=u'TotalJobItems', blank=True) # Field name made lowercase.
    numberoferrors = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Failures', db_column=u'NumberOfErrors', blank=True) # Field name made lowercase.
    completeddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Completion Date', db_column=u'CompletedDate', blank=True) # Field name made lowercase.
    methodname = models.CharField(max_length=255, verbose_name=u'Apex Method', sf_read_only=models.READ_ONLY, db_column=u'MethodName', blank=True) # Field name made lowercase.
    extendedstatus = models.CharField(max_length=255, verbose_name=u'Status Detail', sf_read_only=models.READ_ONLY, db_column=u'ExtendedStatus', blank=True) # Field name made lowercase.
    parentjobid = models.ForeignKey('self', null=True, db_column=u'ParentJobId', blank=True) # Field name made lowercase.
    lastprocessed = models.CharField(max_length=15, verbose_name=u'Last ID processed and committed', sf_read_only=models.READ_ONLY, db_column=u'LastProcessed', blank=True) # Field name made lowercase.
    lastprocessedoffset = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Offset of last ID processed and committed', db_column=u'LastProcessedOffset', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'AsyncApexJob'
        verbose_name = 'Apex Job'
        verbose_name_plural = 'Apex Jobs'
        # keyPrefix = '707'

class Attachedcontentdocument(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    linkedentityid = models.ForeignKey('Account', db_column=u'LinkedEntityId') # Field name made lowercase.
    contentdocumentid = models.ForeignKey('Contentdocument', null=True, db_column=u'ContentDocumentId', blank=True) # Field name made lowercase.
    title = models.CharField(max_length=255, verbose_name=u'Title', sf_read_only=models.READ_ONLY, db_column=u'Title') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created', db_column=u'CreatedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Content Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    filetype = models.CharField(max_length=20, verbose_name=u'File Type', sf_read_only=models.READ_ONLY, db_column=u'FileType', blank=True) # Field name made lowercase.
    contentsize = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Content Size', db_column=u'ContentSize', blank=True) # Field name made lowercase.
    fileextension = models.CharField(max_length=40, verbose_name=u'File Extension', sf_read_only=models.READ_ONLY, db_column=u'FileExtension', blank=True) # Field name made lowercase.
    contenturl = models.URLField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Content URL', db_column=u'ContentUrl', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'AttachedContentDocument'
        verbose_name = 'Attached Content Document'
        verbose_name_plural = 'Attached Content Documents'
        # keyPrefix = 'None'

class Attachment(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    parentid = models.ForeignKey('Account', db_column=u'ParentId') # Field name made lowercase.
    name = models.CharField(max_length=255, verbose_name=u'File Name', db_column=u'Name') # Field name made lowercase.
    isprivate = models.BooleanField(verbose_name=u'Private', db_column=u'IsPrivate') # Field name made lowercase.
    contenttype = models.CharField(max_length=120, verbose_name=u'Content Type', db_column=u'ContentType', blank=True) # Field name made lowercase.
    bodylength = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Body Length', db_column=u'BodyLength', blank=True) # Field name made lowercase.
    body = models.TextField(verbose_name=u'Body', db_column=u'Body') # Field name made lowercase.
    ownerid = models.ForeignKey('User', db_column=u'OwnerId') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    description = models.TextField(verbose_name=u'Description', db_column=u'Description', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Attachment'
        verbose_name = 'Attachment'
        verbose_name_plural = 'Attachments'
        # keyPrefix = '00P'

class Authprovider(models.Model):
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    providertype = models.CharField(max_length=40, verbose_name=u'Provider Type', db_column=u'ProviderType', choices=[(u'Facebook', u'Facebook'), (u'Janrain', u'Janrain'), (u'Salesforce', u'Salesforce'), (u'OpenIdConnect', u'Open ID Connect'), (u'MicrosoftACS', u'Microsoft Access Control Service'), (u'LinkedIn', u'LinkedIn'), (u'Twitter', u'Twitter')]) # Field name made lowercase.
    friendlyname = models.CharField(max_length=32, verbose_name=u'Name', db_column=u'FriendlyName') # Field name made lowercase.
    developername = models.CharField(max_length=32, verbose_name=u'URL Suffix', db_column=u'DeveloperName') # Field name made lowercase.
    registrationhandlerid = models.ForeignKey('Apexclass', null=True, db_column=u'RegistrationHandlerId', blank=True) # Field name made lowercase.
    executionuserid = models.ForeignKey('User', null=True, db_column=u'ExecutionUserId', blank=True) # Field name made lowercase.
    consumerkey = models.CharField(max_length=256, verbose_name=u'Consumer Key', db_column=u'ConsumerKey', blank=True) # Field name made lowercase.
    consumersecret = models.CharField(max_length=100, verbose_name=u'Consumer Secret', sf_read_only=models.NOT_UPDATEABLE, db_column=u'ConsumerSecret', blank=True) # Field name made lowercase.
    errorurl = models.CharField(max_length=500, verbose_name=u'Custom Error URL', db_column=u'ErrorUrl', blank=True) # Field name made lowercase.
    authorizeurl = models.URLField(null=True, verbose_name=u'Authorize Endpoint URL', db_column=u'AuthorizeUrl', blank=True) # Field name made lowercase.
    tokenurl = models.URLField(null=True, verbose_name=u'Token Endpoint URL', db_column=u'TokenUrl', blank=True) # Field name made lowercase.
    userinfourl = models.URLField(null=True, verbose_name=u'User Info Endpoint URL', db_column=u'UserInfoUrl', blank=True) # Field name made lowercase.
    defaultscopes = models.CharField(max_length=256, verbose_name=u'Default Scopes', db_column=u'DefaultScopes', blank=True) # Field name made lowercase.
    idtokenissuer = models.CharField(max_length=1024, verbose_name=u'Token Issuer', db_column=u'IdTokenIssuer', blank=True) # Field name made lowercase.
    optionssendaccesstokeninheader = models.BooleanField(verbose_name=u'Send access token in header', db_column=u'OptionsSendAccessTokenInHeader') # Field name made lowercase.
    optionssendclientcredentialsinheader = models.BooleanField(verbose_name=u'Send client credentials in header', db_column=u'OptionsSendClientCredentialsInHeader') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'AuthProvider'
        verbose_name = 'Auth. Provider'
        verbose_name_plural = 'Auth. Providers'
        # keyPrefix = '0SO'

class Authsession(models.Model):
    usersid = models.ForeignKey('User', null=True, db_column=u'UsersId', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created', db_column=u'CreatedDate') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Updated', db_column=u'LastModifiedDate') # Field name made lowercase.
    numsecondsvalid = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Valid For', db_column=u'NumSecondsValid') # Field name made lowercase.
    usertype = models.CharField(max_length=40, verbose_name=u'User Type', sf_read_only=models.READ_ONLY, db_column=u'UserType', choices=[(u'Standard', u'Standard'), (u'PowerPartner', u'Partner'), (u'PowerCustomerSuccess', u'Customer Portal Manager'), (u'CustomerSuccess', u'Customer Portal User'), (u'Guest', u'Guest'), (u'CspLitePortal', u'High Volume Portal'), (u'CsnOnly', u'CSN Only'), (u'SelfService', u'Self Service')]) # Field name made lowercase.
    sourceip = models.CharField(max_length=39, verbose_name=u'Source IP', sf_read_only=models.READ_ONLY, db_column=u'SourceIp') # Field name made lowercase.
    logintype = models.CharField(max_length=1, verbose_name=u'Login', sf_read_only=models.READ_ONLY, db_column=u'LoginType', blank=True) # Field name made lowercase.
    sessiontype = models.CharField(max_length=40, verbose_name=u'Session Type', sf_read_only=models.READ_ONLY, db_column=u'SessionType', blank=True) # Field name made lowercase.
    sessionsecuritylevel = models.CharField(db_column=u'SessionSecurityLevel', choices=[(u'LOW', None), (u'STANDARD', None), (u'HIGH_ASSURANCE', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Session Security Level') # Field name made lowercase.
    parentid = models.ForeignKey('self', null=True, db_column=u'ParentId', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'AuthSession'
        verbose_name = 'Auth Session'
        verbose_name_plural = 'Auth Sessions'
        # keyPrefix = '0Ak'

class AuthorizedRepresentativeHistory(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    parentid = models.ForeignKey('AuthorizedRepresentativeC', db_column=u'ParentId') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    field = models.CharField(max_length=255, verbose_name=u'Changed Field', sf_read_only=models.READ_ONLY, db_column=u'Field', choices=[(u'Account__c', None), (u'Authorized_to_View__c', None), (u'cloneComments__c', None), (u'Cloned_From__c', None), (u'created', u'Created.'), (u'End_Time__c', None), (u'feedEvent', u'Feed event'), (u'isCloned__c', None), (u'isVIPAccount__c', None), (u'Lead__c', None), (u'Method_of_Contact__c', None), (u'Name', None), (u'Owner', None), (u'ownerAccepted', u'Owner (Accepted)'), (u'ownerAssignment', u'Owner (Assignment)'), (u'Passphrase__c', None), (u'locked', u'Record locked.'), (u'unlocked', u'Record unlocked.'), (u'Start_Time__c', None)]) # Field name made lowercase.
    oldvalue = models.CharField(max_length=255, verbose_name=u'Old Value', sf_read_only=models.READ_ONLY, db_column=u'OldValue', blank=True) # Field name made lowercase.
    newvalue = models.CharField(max_length=255, verbose_name=u'New Value', sf_read_only=models.READ_ONLY, db_column=u'NewValue', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Authorized_Representative__History'
        verbose_name = 'History: Authorized Representative'
        verbose_name_plural = 'History: Authorized Representative'
        # keyPrefix = 'None'

class AuthorizedRepresentativeC(models.Model):
    ownerid = models.ForeignKey('Group', db_column=u'OwnerId') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'Authorized Representative Name', db_column=u'Name', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    lastactivitydate = models.DateField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Activity Date', db_column=u'LastActivityDate', blank=True) # Field name made lowercase.
    authorized_to_view__c = models.CharField(blank=True, max_length=4099, verbose_name=u'Authorized to View', db_column=u'Authorized_to_View__c', choices=[(u'Blood Work Results', u'Blood Work Results'), (u'Claims History', u'Claims History'), (u'Medical Information', u'Medical Information'), (u'STD Information', u'STD Information')]) # Field name made lowercase.
    start_time__c = models.DateField(null=True, verbose_name=u'Start Time', db_column=u'Start_Time__c', blank=True) # Field name made lowercase.
    end_time__c = models.DateField(null=True, verbose_name=u'End Time', db_column=u'End_Time__c', blank=True) # Field name made lowercase.
    method_of_contact__c = models.CharField(blank=True, max_length=255, verbose_name=u'Method of Contact', db_column=u'Method_of_Contact__c', choices=[(u'Email', u'Email'), (u'Fax', u'Fax'), (u'Mail', u'Mail'), (u'Phone', u'Phone'), (u'Text', u'Text')]) # Field name made lowercase.
    account__c = models.ForeignKey('Account', null=True, db_column=u'Account__c', blank=True) # Field name made lowercase.
    passphrase__c = models.CharField(help_text=u'Security phrase that the corresponding authorized representative must provide in order to unlock HIPAA Security.', max_length=80, verbose_name=u'Passphrase', db_column=u'Passphrase__c', blank=True) # Field name made lowercase.
    lead__c = models.ForeignKey('Lead', null=True, db_column=u'Lead__c', blank=True) # Field name made lowercase.
    iscloned__c = models.BooleanField(verbose_name=u'isCloned', db_column=u'isCloned__c') # Field name made lowercase.
    cloned_from__c = models.ForeignKey('self', null=True, db_column=u'Cloned_From__c', blank=True) # Field name made lowercase.
    isvipaccount__c = models.BooleanField(verbose_name=u'isVIPAccount', db_column=u'isVIPAccount__c') # Field name made lowercase.
    clonecomments__c = models.CharField(max_length=50, verbose_name=u'cloneComments', db_column=u'cloneComments__c', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Authorized_Representative__c'
        verbose_name = 'Authorized Representative'
        verbose_name_plural = 'Authorized Representatives'
        # keyPrefix = 'a08'

class AutopayoptionsHistory(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    parentid = models.ForeignKey('AutopayoptionsC', db_column=u'ParentId') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    field = models.CharField(max_length=255, verbose_name=u'Changed Field', sf_read_only=models.READ_ONLY, db_column=u'Field', choices=[(u'AccountType__c', None), (u'BAN__c', None), (u'BankName__c', None), (u'CC__c', None), (u'CC_expiry_month__c', None), (u'CC_expiry_year__c', None), (u'ccHolder__c', None), (u'created', u'Created.'), (u'cvv__c', None), (u'enabled__c', None), (u'feedEvent', u'Feed event'), (u'Name', None), (u'Owner', None), (u'ownerAccepted', u'Owner (Accepted)'), (u'ownerAssignment', u'Owner (Assignment)'), (u'Paytype__c', None), (u'locked', u'Record locked.'), (u'unlocked', u'Record unlocked.'), (u'RoutingNumber__c', None), (u'uid__c', None)]) # Field name made lowercase.
    oldvalue = models.CharField(max_length=255, verbose_name=u'Old Value', sf_read_only=models.READ_ONLY, db_column=u'OldValue', blank=True) # Field name made lowercase.
    newvalue = models.CharField(max_length=255, verbose_name=u'New Value', sf_read_only=models.READ_ONLY, db_column=u'NewValue', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'AutoPayOptions__History'
        verbose_name = 'History: AutoPayOption'
        verbose_name_plural = 'History: AutoPayOption'
        # keyPrefix = 'None'

class AutopayoptionsC(models.Model):
    ownerid = models.ForeignKey('Group', db_column=u'OwnerId') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'AutoPayMethods Name', db_column=u'Name', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    lastactivitydate = models.DateField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Activity Date', db_column=u'LastActivityDate', blank=True) # Field name made lowercase.
    cvv__c = models.CharField(max_length=4, verbose_name=u'cvv', blank=True)
    cc__c = models.CharField(max_length=16, verbose_name=u'CC', db_column=u'CC__c', blank=True) # Field name made lowercase.
    cc_expiry_month__c = models.CharField(max_length=2, verbose_name=u'CC expiry month', db_column=u'CC_expiry_month__c', blank=True) # Field name made lowercase.
    cc_expiry_year__c = models.CharField(max_length=4, verbose_name=u'CC expiry year', db_column=u'CC_expiry_year__c', blank=True) # Field name made lowercase.
    paytype__c = models.CharField(blank=True, max_length=255, verbose_name=u'Paytype', db_column=u'Paytype__c', choices=[(u'credit', u'credit'), (u'check', u'check'), (u'later', u'later')]) # Field name made lowercase.
    ban__c = models.CharField(max_length=50, verbose_name=u'BAN', db_column=u'BAN__c', blank=True) # Field name made lowercase.
    routingnumber__c = models.CharField(max_length=50, verbose_name=u'RoutingNumber', db_column=u'RoutingNumber__c', blank=True) # Field name made lowercase.
    bankname__c = models.CharField(max_length=100, verbose_name=u'BankName', db_column=u'BankName__c', blank=True) # Field name made lowercase.
    accounttype__c = models.CharField(blank=True, max_length=255, verbose_name=u'AccountType', db_column=u'AccountType__c', choices=[(u'CHECKING', u'CHECKING'), (u'BUSINESSCHECKING', u'BUSINESSCHECKING'), (u'SAVINGS', u'SAVINGS')]) # Field name made lowercase.
    enabled__c = models.BooleanField(verbose_name=u'enabled')
    uid__c = models.CharField(max_length=50, verbose_name=u'uid', blank=True)
    ccholder__c = models.CharField(max_length=100, verbose_name=u'ccHolder', db_column=u'ccHolder__c', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'AutoPayOptions__c'
        verbose_name = 'AutoPayOption'
        verbose_name_plural = 'AutoPayOptions'
        # keyPrefix = 'a0Z'

class Brandtemplate(models.Model):
    name = models.CharField(max_length=255, verbose_name=u'Brand Template Name', db_column=u'Name') # Field name made lowercase.
    developername = models.CharField(max_length=80, verbose_name=u'Letterhead Unique Name', db_column=u'DeveloperName') # Field name made lowercase.
    isactive = models.BooleanField(verbose_name=u'Active', db_column=u'IsActive') # Field name made lowercase.
    description = models.CharField(max_length=1000, verbose_name=u'Description', db_column=u'Description', blank=True) # Field name made lowercase.
    value = models.TextField(verbose_name=u'Value', db_column=u'Value') # Field name made lowercase.
    namespaceprefix = models.CharField(max_length=15, verbose_name=u'Namespace Prefix', sf_read_only=models.READ_ONLY, db_column=u'NamespacePrefix', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'BrandTemplate'
        verbose_name = 'Letterhead'
        verbose_name_plural = 'Letterheads'
        # keyPrefix = '016'

class Businesshours(models.Model):
    name = models.CharField(max_length=80, verbose_name=u'Business Hours Name', db_column=u'Name') # Field name made lowercase.
    isactive = models.BooleanField(verbose_name=u'Active', db_column=u'IsActive') # Field name made lowercase.
    isdefault = models.BooleanField(verbose_name=u'Default Business Hours', db_column=u'IsDefault') # Field name made lowercase.
    sundaystarttime = models.TimeField(null=True, verbose_name=u'Sunday Start', db_column=u'SundayStartTime', blank=True) # Field name made lowercase.
    sundayendtime = models.TimeField(null=True, verbose_name=u'Sunday End', db_column=u'SundayEndTime', blank=True) # Field name made lowercase.
    mondaystarttime = models.TimeField(null=True, verbose_name=u'Monday Start', db_column=u'MondayStartTime', blank=True) # Field name made lowercase.
    mondayendtime = models.TimeField(null=True, verbose_name=u'Monday End', db_column=u'MondayEndTime', blank=True) # Field name made lowercase.
    tuesdaystarttime = models.TimeField(null=True, verbose_name=u'Tuesday Start', db_column=u'TuesdayStartTime', blank=True) # Field name made lowercase.
    tuesdayendtime = models.TimeField(null=True, verbose_name=u'Tuesday End', db_column=u'TuesdayEndTime', blank=True) # Field name made lowercase.
    wednesdaystarttime = models.TimeField(null=True, verbose_name=u'Wednesday Start', db_column=u'WednesdayStartTime', blank=True) # Field name made lowercase.
    wednesdayendtime = models.TimeField(null=True, verbose_name=u'Wednesday End', db_column=u'WednesdayEndTime', blank=True) # Field name made lowercase.
    thursdaystarttime = models.TimeField(null=True, verbose_name=u'Thursday Start', db_column=u'ThursdayStartTime', blank=True) # Field name made lowercase.
    thursdayendtime = models.TimeField(null=True, verbose_name=u'Thursday End', db_column=u'ThursdayEndTime', blank=True) # Field name made lowercase.
    fridaystarttime = models.TimeField(null=True, verbose_name=u'Friday Start', db_column=u'FridayStartTime', blank=True) # Field name made lowercase.
    fridayendtime = models.TimeField(null=True, verbose_name=u'Friday End', db_column=u'FridayEndTime', blank=True) # Field name made lowercase.
    saturdaystarttime = models.TimeField(null=True, verbose_name=u'Saturday Start', db_column=u'SaturdayStartTime', blank=True) # Field name made lowercase.
    saturdayendtime = models.TimeField(null=True, verbose_name=u'Saturday End', db_column=u'SaturdayEndTime', blank=True) # Field name made lowercase.
    timezonesidkey = models.CharField(max_length=40, verbose_name=u'Time Zone', db_column=u'TimeZoneSidKey', choices=[(u'Pacific/Kiritimati', u'(GMT+14:00) Line Islands Time (Pacific/Kiritimati)'), (u'Pacific/Chatham', u'(GMT+13:45) Chatham Daylight Time (Pacific/Chatham)'), (u'Pacific/Auckland', u'(GMT+13:00) New Zealand Daylight Time (Pacific/Auckland)'), (u'Pacific/Enderbury', u'(GMT+13:00) Phoenix Islands Time (Pacific/Enderbury)'), (u'Pacific/Fiji', u'(GMT+13:00) Fiji Summer Time (Pacific/Fiji)'), (u'Pacific/Tongatapu', u'(GMT+13:00) Tonga Time (Pacific/Tongatapu)'), (u'Asia/Kamchatka', u'(GMT+12:00) Magadan Time (Asia/Kamchatka)'), (u'Pacific/Norfolk', u'(GMT+11:30) Norfolk Islands Time (Pacific/Norfolk)'), (u'Australia/Lord_Howe', u'(GMT+11:00) Lord Howe Daylight Time (Australia/Lord_Howe)'), (u'Australia/Sydney', u'(GMT+11:00) Australian Eastern Daylight Time (Australia/Sydney)'), (u'Pacific/Guadalcanal', u'(GMT+11:00) Solomon Islands Time (Pacific/Guadalcanal)'), (u'Australia/Adelaide', u'(GMT+10:30) Australian Central Daylight Time (Australia/Adelaide)'), (u'Australia/Brisbane', u'(GMT+10:00) Australian Eastern Standard Time (Australia/Brisbane)'), (u'Australia/Darwin', u'(GMT+09:30) Australian Central Standard Time (Australia/Darwin)'), (u'Asia/Seoul', u'(GMT+09:00) Korean Standard Time (Asia/Seoul)'), (u'Asia/Tokyo', u'(GMT+09:00) Japan Standard Time (Asia/Tokyo)'), (u'Asia/Hong_Kong', u'(GMT+08:00) Hong Kong Time (Asia/Hong_Kong)'), (u'Asia/Kuala_Lumpur', u'(GMT+08:00) Malaysia Time (Asia/Kuala_Lumpur)'), (u'Asia/Manila', u'(GMT+08:00) Philippine Time (Asia/Manila)'), (u'Asia/Shanghai', u'(GMT+08:00) China Standard Time (Asia/Shanghai)'), (u'Asia/Singapore', u'(GMT+08:00) Singapore Standard Time (Asia/Singapore)'), (u'Asia/Taipei', u'(GMT+08:00) Taipei Standard Time (Asia/Taipei)'), (u'Australia/Perth', u'(GMT+08:00) Australian Western Standard Time (Australia/Perth)'), (u'Asia/Bangkok', u'(GMT+07:00) Indochina Time (Asia/Bangkok)'), (u'Asia/Ho_Chi_Minh', u'(GMT+07:00) Indochina Time (Asia/Ho_Chi_Minh)'), (u'Asia/Jakarta', u'(GMT+07:00) Western Indonesia Time (Asia/Jakarta)'), (u'Asia/Rangoon', u'(GMT+06:30) Myanmar Time (Asia/Rangoon)'), (u'Asia/Dhaka', u'(GMT+06:00) Bangladesh Time (Asia/Dhaka)'), (u'Asia/Yekaterinburg', u'(GMT+06:00) Yekaterinburg Time (Asia/Yekaterinburg)'), (u'Asia/Kathmandu', u'(GMT+05:45) Nepal Time (Asia/Kathmandu)'), (u'Asia/Colombo', u'(GMT+05:30) India Standard Time (Asia/Colombo)'), (u'Asia/Kolkata', u'(GMT+05:30) India Standard Time (Asia/Kolkata)'), (u'Asia/Baku', u'(GMT+05:00) Azerbaijan Summer Time (Asia/Baku)'), (u'Asia/Karachi', u'(GMT+05:00) Pakistan Time (Asia/Karachi)'), (u'Asia/Tashkent', u'(GMT+05:00) Uzbekistan Time (Asia/Tashkent)'), (u'Asia/Kabul', u'(GMT+04:30) Afghanistan Time (Asia/Kabul)'), (u'Asia/Dubai', u'(GMT+04:00) Gulf Standard Time (Asia/Dubai)'), (u'Asia/Tbilisi', u'(GMT+04:00) Georgia Time (Asia/Tbilisi)'), (u'Asia/Yerevan', u'(GMT+04:00) Armenia Time (Asia/Yerevan)'), (u'Europe/Moscow', u'(GMT+04:00) Moscow Standard Time (Europe/Moscow)'), (u'Asia/Tehran', u'(GMT+03:30) Iran Standard Time (Asia/Tehran)'), (u'Africa/Nairobi', u'(GMT+03:00) East Africa Time (Africa/Nairobi)'), (u'Asia/Baghdad', u'(GMT+03:00) Arabian Standard Time (Asia/Baghdad)'), (u'Asia/Beirut', u'(GMT+03:00) Eastern European Summer Time (Asia/Beirut)'), (u'Asia/Jerusalem', u'(GMT+03:00) Israel Daylight Time (Asia/Jerusalem)'), (u'Asia/Kuwait', u'(GMT+03:00) Arabian Standard Time (Asia/Kuwait)'), (u'Asia/Riyadh', u'(GMT+03:00) Arabian Standard Time (Asia/Riyadh)'), (u'Europe/Athens', u'(GMT+03:00) Eastern European Summer Time (Europe/Athens)'), (u'Europe/Bucharest', u'(GMT+03:00) Eastern European Summer Time (Europe/Bucharest)'), (u'Europe/Helsinki', u'(GMT+03:00) Eastern European Summer Time (Europe/Helsinki)'), (u'Europe/Istanbul', u'(GMT+03:00) Eastern European Summer Time (Europe/Istanbul)'), (u'Europe/Minsk', u'(GMT+03:00) Further-eastern European Time (Europe/Minsk)'), (u'Africa/Cairo', u'(GMT+02:00) Eastern European Time (Africa/Cairo)'), (u'Africa/Johannesburg', u'(GMT+02:00) South Africa Standard Time (Africa/Johannesburg)'), (u'Europe/Amsterdam', u'(GMT+02:00) Central European Summer Time (Europe/Amsterdam)'), (u'Europe/Berlin', u'(GMT+02:00) Central European Summer Time (Europe/Berlin)'), (u'Europe/Brussels', u'(GMT+02:00) Central European Summer Time (Europe/Brussels)'), (u'Europe/Paris', u'(GMT+02:00) Central European Summer Time (Europe/Paris)'), (u'Europe/Prague', u'(GMT+02:00) Central European Summer Time (Europe/Prague)'), (u'Europe/Rome', u'(GMT+02:00) Central European Summer Time (Europe/Rome)'), (u'Africa/Algiers', u'(GMT+01:00) Central European Time (Africa/Algiers)'), (u'Europe/Dublin', u'(GMT+01:00) Irish Summer Time (Europe/Dublin)'), (u'Europe/Lisbon', u'(GMT+01:00) Western European Summer Time (Europe/Lisbon)'), (u'Europe/London', u'(GMT+01:00) British Summer Time (Europe/London)'), (u'Africa/Casablanca', u'(GMT+00:00) Western European Time (Africa/Casablanca)'), (u'America/Scoresbysund', u'(GMT+00:00) East Greenland Summer Time (America/Scoresbysund)'), (u'Atlantic/Azores', u'(GMT+00:00) Azores Summer Time (Atlantic/Azores)'), (u'GMT', u'(GMT+00:00) Greenwich Mean Time (GMT)'), (u'Atlantic/Cape_Verde', u'(GMT-01:00) Cape Verde Time (Atlantic/Cape_Verde)'), (u'America/Sao_Paulo', u'(GMT-02:00) Brasilia Summer Time (America/Sao_Paulo)'), (u'Atlantic/South_Georgia', u'(GMT-02:00) South Georgia Time (Atlantic/South_Georgia)'), (u'America/St_Johns', u'(GMT-02:30) Newfoundland Daylight Time (America/St_Johns)'), (u'America/Argentina/Buenos_Aires', u'(GMT-03:00) Argentina Time (America/Argentina/Buenos_Aires)'), (u'America/Halifax', u'(GMT-03:00) Atlantic Daylight Time (America/Halifax)'), (u'America/Santiago', u'(GMT-03:00) Chile Summer Time (America/Santiago)'), (u'Atlantic/Bermuda', u'(GMT-03:00) Atlantic Daylight Time (Atlantic/Bermuda)'), (u'America/Indiana/Indianapolis', u'(GMT-04:00) Eastern Daylight Time (America/Indiana/Indianapolis)'), (u'America/New_York', u'(GMT-04:00) Eastern Daylight Time (America/New_York)'), (u'America/Puerto_Rico', u'(GMT-04:00) Atlantic Standard Time (America/Puerto_Rico)'), (u'America/Caracas', u'(GMT-04:30) Venezuela Time (America/Caracas)'), (u'America/Bogota', u'(GMT-05:00) Colombia Time (America/Bogota)'), (u'America/Chicago', u'(GMT-05:00) Central Daylight Time (America/Chicago)'), (u'America/Lima', u'(GMT-05:00) Peru Time (America/Lima)'), (u'America/Mexico_City', u'(GMT-05:00) Central Daylight Time (America/Mexico_City)'), (u'America/Panama', u'(GMT-05:00) Eastern Standard Time (America/Panama)'), (u'America/Denver', u'(GMT-06:00) Mountain Daylight Time (America/Denver)'), (u'America/El_Salvador', u'(GMT-06:00) Central Standard Time (America/El_Salvador)'), (u'America/Mazatlan', u'(GMT-06:00) Mountain Daylight Time (America/Mazatlan)'), (u'America/Los_Angeles', u'(GMT-07:00) Pacific Daylight Time (America/Los_Angeles)'), (u'America/Phoenix', u'(GMT-07:00) Mountain Standard Time (America/Phoenix)'), (u'America/Tijuana', u'(GMT-07:00) Pacific Daylight Time (America/Tijuana)'), (u'America/Anchorage', u'(GMT-08:00) Alaska Daylight Time (America/Anchorage)'), (u'Pacific/Pitcairn', u'(GMT-08:00) Pitcairn Time (Pacific/Pitcairn)'), (u'America/Adak', u'(GMT-09:00) Hawaii-Aleutian Standard Time (America/Adak)'), (u'Pacific/Gambier', u'(GMT-09:00) Gambier Time (Pacific/Gambier)'), (u'Pacific/Marquesas', u'(GMT-09:30) Marquesas Time (Pacific/Marquesas)'), (u'Pacific/Honolulu', u'(GMT-10:00) Hawaii-Aleutian Standard Time (Pacific/Honolulu)'), (u'Pacific/Niue', u'(GMT-11:00) Niue Time (Pacific/Niue)'), (u'Pacific/Pago_Pago', u'(GMT-11:00) Samoa Standard Time (Pacific/Pago_Pago)')]) # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'BusinessHours'
        verbose_name = 'Business Hours'
        verbose_name_plural = 'Business Hours'
        # keyPrefix = '01m'

class Businessprocess(models.Model):
    name = models.CharField(max_length=80, verbose_name=u'Name', db_column=u'Name') # Field name made lowercase.
    namespaceprefix = models.CharField(max_length=15, verbose_name=u'Namespace Prefix', sf_read_only=models.READ_ONLY, db_column=u'NamespacePrefix', blank=True) # Field name made lowercase.
    description = models.CharField(max_length=255, verbose_name=u'Description', db_column=u'Description', blank=True) # Field name made lowercase.
    tableenumorid = models.CharField(max_length=40, verbose_name=u'Entity Enumeration Or ID', sf_read_only=models.NOT_UPDATEABLE, db_column=u'TableEnumOrId', choices=[(u'Case', None), (u'Lead', None), (u'Opportunity', None), (u'Solution', None)]) # Field name made lowercase.
    isactive = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Active', db_column=u'IsActive') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'BusinessProcess'
        verbose_name = 'Business Process'
        verbose_name_plural = 'Business Process'
        # keyPrefix = '019'

class Callcenter(models.Model):
    name = models.CharField(max_length=255, verbose_name=u'Name', sf_read_only=models.NOT_UPDATEABLE, db_column=u'Name') # Field name made lowercase.
    internalname = models.CharField(max_length=240, verbose_name=u'Internal Name', sf_read_only=models.NOT_UPDATEABLE, db_column=u'InternalName') # Field name made lowercase.
    version = models.DecimalField(decimal_places=3, db_column=u'Version', sf_read_only=models.NOT_UPDATEABLE, max_digits=18, blank=True, null=True, verbose_name=u'Version') # Field name made lowercase.
    adapterurl = models.CharField(max_length=2000, verbose_name=u'CTI Adapter URL', sf_read_only=models.NOT_UPDATEABLE, db_column=u'AdapterUrl', blank=True) # Field name made lowercase.
    customsettings = models.CharField(max_length=3000, verbose_name=u'Custom Settings', sf_read_only=models.NOT_UPDATEABLE, db_column=u'CustomSettings', blank=True) # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'CallCenter'
        verbose_name = 'Call Center'
        verbose_name_plural = 'Call Centers'
        # keyPrefix = '04v'

class Campaign(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'Name', db_column=u'Name') # Field name made lowercase.
    parentid = models.ForeignKey('self', null=True, db_column=u'ParentId', blank=True) # Field name made lowercase.
    type = models.CharField(blank=True, max_length=40, verbose_name=u'Type', db_column=u'Type', choices=[(u'Conference', u'Conference'), (u'Content / White Paper', u'Content / White Paper'), (u'Email', u'Email'), (u'PR', u'PR'), (u'Partners', u'Partners'), (u'Referral Program', u'Referral Program'), (u'Signup / Trial', u'Signup / Trial'), (u'Social Media - Organic', u'Social Media - Organic'), (u'Social Media - Paid', u'Social Media - Paid'), (u'Webinar', u'Webinar'), (u'Other', u'Other')]) # Field name made lowercase.
    status = models.CharField(blank=True, max_length=40, verbose_name=u'Status', db_column=u'Status', choices=[(u'In Progress', u'In Progress'), (u'Completed', u'Completed'), (u'Aborted', u'Aborted'), (u'Planned', u'Planned')]) # Field name made lowercase.
    startdate = models.DateField(null=True, verbose_name=u'Start Date', db_column=u'StartDate', blank=True) # Field name made lowercase.
    enddate = models.DateField(null=True, verbose_name=u'End Date', db_column=u'EndDate', blank=True) # Field name made lowercase.
    expectedrevenue = models.DecimalField(db_column=u'ExpectedRevenue', decimal_places=0, max_digits=18, blank=True, null=True, verbose_name=u'Expected Revenue') # Field name made lowercase.
    budgetedcost = models.DecimalField(db_column=u'BudgetedCost', decimal_places=0, max_digits=18, blank=True, null=True, verbose_name=u'Budgeted Cost') # Field name made lowercase.
    actualcost = models.DecimalField(db_column=u'ActualCost', decimal_places=0, max_digits=18, blank=True, null=True, verbose_name=u'Actual Cost') # Field name made lowercase.
    expectedresponse = models.DecimalField(db_column=u'ExpectedResponse', decimal_places=2, max_digits=10, blank=True, null=True, verbose_name=u'Expected Response (%)') # Field name made lowercase.
    numbersent = models.DecimalField(db_column=u'NumberSent', decimal_places=0, max_digits=18, blank=True, null=True, verbose_name=u'Num Sent') # Field name made lowercase.
    isactive = models.BooleanField(verbose_name=u'Active', db_column=u'IsActive') # Field name made lowercase.
    description = models.TextField(verbose_name=u'Description', db_column=u'Description', blank=True) # Field name made lowercase.
    numberofleads = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Total Leads', db_column=u'NumberOfLeads') # Field name made lowercase.
    numberofconvertedleads = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Converted Leads', db_column=u'NumberOfConvertedLeads') # Field name made lowercase.
    numberofcontacts = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Total Contacts', db_column=u'NumberOfContacts') # Field name made lowercase.
    numberofresponses = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Total Responses', db_column=u'NumberOfResponses') # Field name made lowercase.
    numberofopportunities = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Num Total Opportunities', db_column=u'NumberOfOpportunities') # Field name made lowercase.
    numberofwonopportunities = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Num Won Opportunities', db_column=u'NumberOfWonOpportunities') # Field name made lowercase.
    amountallopportunities = models.DecimalField(sf_read_only=models.READ_ONLY, verbose_name=u'Total Value Opportunities', max_digits=18, db_column=u'AmountAllOpportunities', decimal_places=0) # Field name made lowercase.
    amountwonopportunities = models.DecimalField(sf_read_only=models.READ_ONLY, verbose_name=u'Total Value Won Opportunities', max_digits=18, db_column=u'AmountWonOpportunities', decimal_places=0) # Field name made lowercase.
    ownerid = models.ForeignKey('User', db_column=u'OwnerId') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    lastactivitydate = models.DateField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Activity', db_column=u'LastActivityDate', blank=True) # Field name made lowercase.
    lastvieweddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Viewed Date', db_column=u'LastViewedDate', blank=True) # Field name made lowercase.
    lastreferenceddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Referenced Date', db_column=u'LastReferencedDate', blank=True) # Field name made lowercase.
    campaignmemberrecordtypeid = models.ForeignKey('Recordtype', null=True, db_column=u'CampaignMemberRecordTypeId', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Campaign'
        verbose_name = 'Campaign'
        verbose_name_plural = 'Campaigns'
        # keyPrefix = '701'

class Campaignfeed(models.Model):
    parentid = models.ForeignKey('Campaign', db_column=u'ParentId') # Field name made lowercase.
    type = models.CharField(db_column=u'Type', choices=[(u'TrackedChange', u'Tracked Change'), (u'UserStatus', u'User Status'), (u'TextPost', u'Text Post'), (u'AdvancedTextPost', u'Advanced Text Post'), (u'LinkPost', u'Link Post'), (u'ContentPost', u'Content Post'), (u'PollPost', u'Poll'), (u'RypplePost', u'Work.com Thanks'), (u'ProfileSkillPost', u'Profile Skill Post'), (u'DashboardComponentSnapshot', u'Dashboard Component Snapshot'), (u'ApprovalPost', u'Approval Post'), (u'CaseCommentPost', u'Case Comment Feed'), (u'ReplyPost', u'Reply Post'), (u'EmailMessageEvent', u'Email Message Feed'), (u'CallLogPost', u'Call Log Feed'), (u'ChangeStatusPost', u'Change Status Feed'), (u'AttachArticleEvent', u'Attached Article'), (u'MilestoneEvent', u'Milestone Event'), (u'ActivityEvent', u'Activity Change'), (u'ChatTranscriptPost', u'Chat Transcript Post'), (u'CollaborationGroupCreated', u'Collaboration Group Created'), (u'CollaborationGroupUnarchived', u'Collaboration Group Reactivated'), (u'SocialPost', u'Social Post'), (u'QuestionPost', u'Question Post'), (u'FacebookPost', u'Facebook Post'), (u'BasicTemplateFeedItem', u'Basic Template Post'), (u'CreateRecordEvent', u'Created Record'), (u'CanvasPost', u'Canvas'), (u'AnnouncementPost', u'a')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Feed Item Type') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    commentcount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Comment Count', db_column=u'CommentCount') # Field name made lowercase.
    likecount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Like Count', db_column=u'LikeCount') # Field name made lowercase.
    title = models.CharField(max_length=255, verbose_name=u'Title', sf_read_only=models.READ_ONLY, db_column=u'Title', blank=True) # Field name made lowercase.
    body = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Body', db_column=u'Body', blank=True) # Field name made lowercase.
    linkurl = models.URLField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Link Url', db_column=u'LinkUrl', blank=True) # Field name made lowercase.
    relatedrecordid = models.ForeignKey('Contentversion', null=True, db_column=u'RelatedRecordId', blank=True) # Field name made lowercase.
    contentdata = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Content Data', db_column=u'ContentData', blank=True) # Field name made lowercase.
    contentfilename = models.CharField(max_length=255, verbose_name=u'Content File Name', sf_read_only=models.READ_ONLY, db_column=u'ContentFileName', blank=True) # Field name made lowercase.
    contentdescription = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Content Description', db_column=u'ContentDescription', blank=True) # Field name made lowercase.
    contenttype = models.CharField(max_length=120, verbose_name=u'Content File Type', sf_read_only=models.READ_ONLY, db_column=u'ContentType', blank=True) # Field name made lowercase.
    contentsize = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Content Size', db_column=u'ContentSize', blank=True) # Field name made lowercase.
    insertedbyid = models.ForeignKey('User', null=True, db_column=u'InsertedById', blank=True) # Field name made lowercase.
    networkscope = models.CharField(db_column=u'NetworkScope', choices=[(u'AllNetworks', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Network Scope') # Field name made lowercase.
    visibility = models.CharField(db_column=u'Visibility', choices=[(u'AllUsers', None), (u'InternalUsers', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Visibility') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'CampaignFeed'
        verbose_name = 'Campaign Feed'
        verbose_name_plural = 'Campaign Feed'
        # keyPrefix = 'None'

class Campaignmember(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    campaignid = models.ForeignKey('Campaign', db_column=u'CampaignId') # Field name made lowercase.
    leadid = models.ForeignKey('Lead', null=True, db_column=u'LeadId', blank=True) # Field name made lowercase.
    contactid = models.ForeignKey('Contact', null=True, db_column=u'ContactId', blank=True) # Field name made lowercase.
    status = models.CharField(blank=True, max_length=40, verbose_name=u'Status', db_column=u'Status', choices=[(u'Attended', u'Attended'), (u'Invited', u'Invited'), (u'No Show', u'No Show'), (u'Registered', u'Registered'), (u'Responded', u'Responded'), (u'Sent', u'Sent')]) # Field name made lowercase.
    hasresponded = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Responded', db_column=u'HasResponded') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    firstrespondeddate = models.DateField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'First Responded Date', db_column=u'FirstRespondedDate', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'CampaignMember'
        verbose_name = 'Campaign Member'
        verbose_name_plural = 'Campaign Members'
        # keyPrefix = '00v'

class Campaignmemberstatus(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    campaignid = models.ForeignKey('Campaign', db_column=u'CampaignId') # Field name made lowercase.
    label = models.CharField(max_length=765, verbose_name=u'Label', sf_read_only=models.NOT_UPDATEABLE, db_column=u'Label') # Field name made lowercase.
    sortorder = models.IntegerField(verbose_name=u'Sort Order', db_column=u'SortOrder') # Field name made lowercase.
    isdefault = models.BooleanField(verbose_name=u'Is Default', db_column=u'IsDefault') # Field name made lowercase.
    hasresponded = models.BooleanField(verbose_name=u'Responded', db_column=u'HasResponded') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'CampaignMemberStatus'
        verbose_name = 'Campaign Member Status'
        verbose_name_plural = 'Campaign Member Status'
        # keyPrefix = '01Y'

class Campaignshare(models.Model):
    campaignid = models.ForeignKey('Campaign', db_column=u'CampaignId') # Field name made lowercase.
    userorgroupid = models.ForeignKey('Group', db_column=u'UserOrGroupId') # Field name made lowercase.
    campaignaccesslevel = models.CharField(max_length=40, verbose_name=u'Campaign Access', sf_read_only=models.READ_ONLY, db_column=u'CampaignAccessLevel', choices=[(u'Read', u'Read Only'), (u'Edit', u'Read/Write'), (u'All', u'Owner')]) # Field name made lowercase.
    rowcause = models.CharField(db_column=u'RowCause', choices=[(u'Owner', u'Owner'), (u'Manual', u'Manual Sharing'), (u'Rule', u'Sharing Rule'), (u'ImplicitChild', u'Account Sharing'), (u'ImplicitParent', u'Associated record owner or sharing'), (u'Team', u'Sales Team'), (u'Territory', u'Territory Assignment Rule'), (u'TerritoryManual', u'Territory Manual'), (u'TerritoryRule', u'Territory Sharing Rule')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Row Cause') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'CampaignShare'
        verbose_name = 'Campaign Share'
        verbose_name_plural = 'Campaign Share'
        # keyPrefix = '08s'

class CarrierHistory(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    parentid = models.ForeignKey('CarrierC', db_column=u'ParentId') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    field = models.CharField(max_length=255, verbose_name=u'Changed Field', sf_read_only=models.READ_ONLY, db_column=u'Field', choices=[(u'created', u'Created.'), (u'feedEvent', u'Feed event'), (u'Name', None), (u'Notes__c', None), (u'Owner', None), (u'ownerAccepted', u'Owner (Accepted)'), (u'ownerAssignment', u'Owner (Assignment)'), (u'Primary_contact_number__c', None), (u'locked', u'Record locked.'), (u'unlocked', u'Record unlocked.')]) # Field name made lowercase.
    oldvalue = models.CharField(max_length=255, verbose_name=u'Old Value', sf_read_only=models.READ_ONLY, db_column=u'OldValue', blank=True) # Field name made lowercase.
    newvalue = models.CharField(max_length=255, verbose_name=u'New Value', sf_read_only=models.READ_ONLY, db_column=u'NewValue', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Carrier__History'
        verbose_name = 'History: Carrier'
        verbose_name_plural = 'History: Carrier'
        # keyPrefix = 'None'

class CarrierC(models.Model):
    ownerid = models.ForeignKey('Group', db_column=u'OwnerId') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'Carrier Name', db_column=u'Name', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    lastactivitydate = models.DateField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Activity Date', db_column=u'LastActivityDate', blank=True) # Field name made lowercase.
    lastvieweddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Viewed Date', db_column=u'LastViewedDate', blank=True) # Field name made lowercase.
    lastreferenceddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Referenced Date', db_column=u'LastReferencedDate', blank=True) # Field name made lowercase.
    notes__c = models.TextField(verbose_name=u'Notes', db_column=u'Notes__c', blank=True) # Field name made lowercase.
    policies_in_force__c = models.DecimalField(decimal_places=0, db_column=u'Policies_In_Force__c', sf_read_only=models.READ_ONLY, max_digits=18, blank=True, null=True, verbose_name=u'Policies In Force') # Field name made lowercase.
    primary_contact_number__c = models.CharField(max_length=40, verbose_name=u'Primary contact number', db_column=u'Primary_contact_number__c', blank=True) # Field name made lowercase.
    total_policy_premium__c = models.DecimalField(decimal_places=2, db_column=u'Total_Policy_Premium__c', sf_read_only=models.READ_ONLY, max_digits=18, blank=True, null=True, verbose_name=u'Total Policy Premium') # Field name made lowercase.
    total_policy_premium_in_force__c = models.DecimalField(decimal_places=2, db_column=u'Total_Policy_Premium_In_Force__c', sf_read_only=models.READ_ONLY, max_digits=18, blank=True, null=True, verbose_name=u'Total Policy Premium In Force') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Carrier__c'
        verbose_name = 'Carrier'
        verbose_name_plural = 'Carriers'
        # keyPrefix = 'a01'

class Case(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    casenumber = models.CharField(max_length=30, verbose_name=u'Case Number', sf_read_only=models.READ_ONLY, db_column=u'CaseNumber') # Field name made lowercase.
    contactid = models.ForeignKey('Contact', null=True, db_column=u'ContactId', blank=True) # Field name made lowercase.
    accountid = models.ForeignKey('Account', null=True, db_column=u'AccountId', blank=True) # Field name made lowercase.
    suppliedname = models.CharField(max_length=80, verbose_name=u'Name', db_column=u'SuppliedName', blank=True) # Field name made lowercase.
    suppliedemail = models.EmailField(null=True, verbose_name=u'Email Address', db_column=u'SuppliedEmail', blank=True) # Field name made lowercase.
    suppliedphone = models.CharField(max_length=40, verbose_name=u'Phone', db_column=u'SuppliedPhone', blank=True) # Field name made lowercase.
    suppliedcompany = models.CharField(max_length=80, verbose_name=u'Company', db_column=u'SuppliedCompany', blank=True) # Field name made lowercase.
    type = models.CharField(blank=True, max_length=40, verbose_name=u'Case Type', db_column=u'Type', choices=[(u'Problem', u'Problem'), (u'Feature Request', u'Feature Request'), (u'Question', u'Question'), (u'Member Portal Creation Issue', u'Member Portal Creation Issue'), (u'Provider Escalation', u'Provider Escalation'), (u'Billing/Payment Question', u'Billing/Payment Question')]) # Field name made lowercase.
    recordtypeid = models.ForeignKey('Recordtype', null=True, db_column=u'RecordTypeId', blank=True) # Field name made lowercase.
    status = models.CharField(blank=True, max_length=40, verbose_name=u'Status', db_column=u'Status', choices=[(u'On Hold', u'On Hold'), (u'Escalated', u'Escalated'), (u'Closed', u'Closed'), (u'New', u'New'), (u'Static', u'Static')]) # Field name made lowercase.
    reason = models.CharField(blank=True, max_length=40, verbose_name=u'Case Reason', db_column=u'Reason', choices=[(u"User didn't attend training", u"User didn't attend training"), (u'Complex functionality', u'Complex functionality'), (u'Existing problem', u'Existing problem'), (u'Instructions not clear', u'Instructions not clear'), (u'New problem', u'New problem'), (u'Request for Medical Card', u'Request for Medical Card'), (u'Request for Disease Managment', u'Request for Disease Managment')]) # Field name made lowercase.
    origin = models.CharField(blank=True, max_length=40, verbose_name=u'Case Origin', db_column=u'Origin', choices=[(u'Email', u'Email'), (u'Phone', u'Phone'), (u'Web', u'Web'), (u'Member Portal', u'Member Portal')]) # Field name made lowercase.
    subject = models.CharField(max_length=255, verbose_name=u'Subject', db_column=u'Subject', blank=True) # Field name made lowercase.
    priority = models.CharField(blank=True, max_length=40, verbose_name=u'Priority', db_column=u'Priority', choices=[(u'High', u'High'), (u'Medium', u'Medium'), (u'Low', u'Low')]) # Field name made lowercase.
    description = models.TextField(verbose_name=u'Description', db_column=u'Description', blank=True) # Field name made lowercase.
    isclosed = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Closed', db_column=u'IsClosed') # Field name made lowercase.
    closeddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Closed Date', db_column=u'ClosedDate', blank=True) # Field name made lowercase.
    ownerid = models.ForeignKey('Group', db_column=u'OwnerId') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    lastvieweddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Viewed Date', db_column=u'LastViewedDate', blank=True) # Field name made lowercase.
    lastreferenceddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Referenced Date', db_column=u'LastReferencedDate', blank=True) # Field name made lowercase.
    type_of_event_grievance__c = models.CharField(blank=True, max_length=255, verbose_name=u'Type of Event / Grievance', db_column=u'Type_of_Event_Grievance__c', choices=[(u'Benefits Complaint', u'Benefits Complaint'), (u'Claims Complaint', u'Claims Complaint'), (u'Compliance Complaint', u'Compliance Complaint'), (u'Customer Service Complaint', u'Customer Service Complaint'), (u'Member Complaint', u'Member Complaint'), (u'Prior Auth Complaint', u'Prior Auth Complaint'), (u'Provider Complaint', u'Provider Complaint'), (u'Vendor Complaint', u'Vendor Complaint'), (u'Other', u'Other')]) # Field name made lowercase.
    disease_management_program_association__c = models.ForeignKey('MedicalManagementC', null=True, db_column=u'Disease_Management_Program_Association__c', blank=True) # Field name made lowercase.
    review_and_update_demographic_info__c = models.BooleanField(help_text=u'During the conversation did you review and update demographic information with the member?', verbose_name=u'Review and update demographic info?', db_column=u'Review_and_update_demographic_info__c') # Field name made lowercase.
    review_and_update_practitioner_info__c = models.BooleanField(help_text=u'During the conversation was a review and update practitioner information performed?', verbose_name=u'Review and update practitioner info?', db_column=u'Review_and_update_practitioner_info__c') # Field name made lowercase.
    how_often_had_shortness_of_breath__c = models.CharField(db_column=u'How_often_had_shortness_of_breath__c', choices=[(u'1', u'1'), (u'2', u'2'), (u'3', u'3'), (u'4', u'4'), (u'5', u'5')], max_length=255, blank=True, help_text=u'During the past 4 weeks, how often has the member had shortness of breath?\r\nThe integer represents a five-point Likert Scale from \u201cmore than once a day\u201d to \u201cnot at all.\u201d', verbose_name=u'How often had shortness of breath?') # Field name made lowercase.
    how_often_used_rescue_inhaler_or_meds__c = models.CharField(db_column=u'How_often_used_rescue_inhaler_or_meds__c', choices=[(u'1', u'1'), (u'2', u'2'), (u'3', u'3'), (u'4', u'4'), (u'5', u'5')], max_length=255, blank=True, help_text=u'During the past 4 weeks, how often have you used your rescue inhaler or nebulizer medication (such as albuterol)?\r\nThe integer represents a five-point Likert Scale from \u201c3 or more times per day\u201d to \u201cnot at all.\u201d', verbose_name=u'How often used rescue inhaler or meds?') # Field name made lowercase.
    asthma_affecting_work_school_home_etc__c = models.CharField(db_column=u'Asthma_affecting_work_school_home_etc__c', choices=[(u'1', u'1'), (u'2', u'2'), (u'3', u'3'), (u'4', u'4'), (u'5', u'5')], max_length=255, blank=True, help_text=u'In the past 4 weeks, how much of the time did your asthma keep you from getting as much done at work, school or home? The integer represents a five-point Likert Scale from \u201call of the time\u201d to \u201cnone of the time.\u201d', verbose_name=u'Asthma affecting work, school, home, etc') # Field name made lowercase.
    asthma_symptoms_wake_you__c = models.CharField(db_column=u'Asthma_symptoms_wake_you__c', choices=[(u'1', u'1'), (u'2', u'2'), (u'3', u'3'), (u'4', u'4'), (u'5', u'5')], max_length=255, blank=True, help_text=u'During the past 4 weeks, how often did your asthma symptoms (wheezing, coughing, short-of-breath, chest tightness, or pain) wake you up at night or earlier than usual in the morning? Five-point Likert Scale from \u201c4 or more nights a week\u201d to \u201cnot at all"', verbose_name=u'Asthma symptoms wake you?') # Field name made lowercase.
    rate_for_asthma_control_in_past_4_weeks__c = models.CharField(db_column=u'Rate_for_asthma_control_in_past_4_weeks__c', choices=[(u'1', u'1'), (u'2', u'2'), (u'3', u'3'), (u'4', u'4'), (u'5', u'5')], max_length=255, blank=True, help_text=u'How would you rate your asthma control during the past 4 weeks?\r\nThe integer represents a five-point Likert Scale from \u201cnot controlled at all\u201d to \u201ccompletely controlled.\u201d', verbose_name=u'Rate for asthma control in past 4 weeks?') # Field name made lowercase.
    assess_for_any_areas_where_member__c = models.TextField(help_text=u'Assess for any areas where member is not adhering to the program.', verbose_name=u'Where is member is not adhering to prog?', db_column=u'Assess_for_any_areas_where_member__c', blank=True) # Field name made lowercase.
    identify_barriers_for_adherence__c = models.TextField(help_text=u'Identify barriers to adherence and explore solutions to overcoming barriers. If financial or transportation barriers are identified, provide information on community resources that may be able to assist.', verbose_name=u'Identify barriers for adherence?', db_column=u'Identify_barriers_for_adherence__c', blank=True) # Field name made lowercase.
    knowing_the_results_of_peak_flow__c = models.TextField(help_text=u'Provide education on the various components of the program as appropriate to the assessment. Discuss knowing the results of peak flow meter testing.', verbose_name=u'Discuss peak flow meter testing?', db_column=u'Knowing_the_results_of_peak_flow__c', blank=True) # Field name made lowercase.
    log_of_medications__c = models.TextField(help_text=u'Provide education on the various components of the program as appropriate to the assessment.  Discuss keeping a log of medication use including number of rescue meds/week.', verbose_name=u'Log of medications?', db_column=u'Log_of_medications__c', blank=True) # Field name made lowercase.
    verbalize_effectiveness_of_treatments__c = models.TextField(help_text=u'Provide education on the various components of the program as appropriate to the assessment. Discuss being able to verbalize effectiveness of nebulizer and rescue medication treatments.', verbose_name=u'Verbalize effectiveness of treatments', db_column=u'Verbalize_effectiveness_of_treatments__c', blank=True) # Field name made lowercase.
    developing_and_updating_a_schedule__c = models.TextField(help_text=u'Provide education on the various components of the program as appropriate to the assessment, discuss developing and updating a schedule of tests, practitioner visits, and dental visits.', verbose_name=u'Developing and updating a schedule.', db_column=u'Developing_and_updating_a_schedule__c', blank=True) # Field name made lowercase.
    materials_for_working_with_providers__c = models.TextField(help_text=u'If appropriate, provide education and support related to communicating with practitioners.', verbose_name=u'Materials for working with providers.', db_column=u'Materials_for_working_with_providers__c', blank=True) # Field name made lowercase.
    assess_for_the_presence_of_gerd__c = models.TextField(help_text=u'Assess for the presence of GERD and provide education as appropriate.', verbose_name=u'Assess for the presence of GERD.', db_column=u'Assess_for_the_presence_of_GERD__c', blank=True) # Field name made lowercase.
    discussion_of_health_behaviors__c = models.TextField(help_text=u'Discuss the following: smoking, passive smoking, diet, exercise, flu vaccine for calls occurring in autumn or winter.', verbose_name=u'Discussion of health behaviors.', db_column=u'Discussion_of_health_behaviors__c', blank=True) # Field name made lowercase.
    presence_of_anxiety_and_assistance__c = models.TextField(help_text=u'Assess for the presence of anxiety and provide education and referral assistance as appropriate.', verbose_name=u'Presence of anxiety and assistance.', db_column=u'Presence_of_anxiety_and_assistance__c', blank=True) # Field name made lowercase.
    little_interest_or_pleasure_in_activity__c = models.DecimalField(db_column=u'Little_interest_or_pleasure_in_activity__c', decimal_places=0, max_digits=18, blank=True, help_text=u'Over the last 2 weeks, how often have you been bothered by this:\r\n0 = Not at all\r\n1 = Several Days\r\n2 = More than half the days\r\n3 = Nearly every day', null=True, verbose_name=u'Little interest or pleasure in activity.') # Field name made lowercase.
    feeling_down_depressed_or_hopeless__c = models.DecimalField(db_column=u'Feeling_down_depressed_or_hopeless__c', decimal_places=0, max_digits=18, blank=True, help_text=u'Over the last 2 weeks, how often have you been bothered by this:\r\n0 = Not at all\r\n1 = Several Days\r\n2 = More than half the days\r\n3 = Nearly every day', null=True, verbose_name=u'Feeling down, depressed, or hopeless') # Field name made lowercase.
    trouble_related_to_sleeping__c = models.DecimalField(db_column=u'Trouble_related_to_sleeping__c', decimal_places=0, max_digits=18, blank=True, help_text=u'Trouble falling or staying asleep, or sleeping too much?\r\nOver the last 2 weeks, how often have you been bothered by this:\r\n0 = Not at all\r\n1 = Several Days\r\n2 = More than half the days\r\n3 = Nearly every day', null=True, verbose_name=u'Trouble related to sleeping.') # Field name made lowercase.
    feeling_tired_or_having_little_energy__c = models.DecimalField(db_column=u'Feeling_tired_or_having_little_energy__c', decimal_places=0, max_digits=18, blank=True, help_text=u'Over the last 2 weeks, how often have you been bothered by this:\r\n0 = Not at all\r\n1 = Several Days\r\n2 = More than half the days\r\n3 = Nearly every day', null=True, verbose_name=u'Feeling tired or having little energy') # Field name made lowercase.
    poor_appetite_or_overeating__c = models.DecimalField(db_column=u'Poor_appetite_or_overeating__c', decimal_places=0, max_digits=1, blank=True, help_text=u'Over the last 2 weeks, how often have you been bothered by this:\r\n0 = Not at all\r\n1 = Several Days\r\n2 = More than half the days\r\n3 = Nearly every day', null=True, verbose_name=u'Poor appetite or overeating') # Field name made lowercase.
    feeling_bad_about_yourself_or_that_you_a__c = models.DecimalField(db_column=u'Feeling_bad_about_yourself_or_that_you_a__c', decimal_places=0, max_digits=1, blank=True, help_text=u'Feeling bad about yourself\u2014or that you are a failure or have let yourself or your family down.\r\n\r\nOver the last 2 weeks, how often have you been bothered by this:\r\n0 = Not at all\r\n1 = Several Days\r\n2 = More than half the days\r\n3 = Nearly every day', null=True, verbose_name=u'Feeling bad about yourself.') # Field name made lowercase.
    trouble_concentrating_on_things__c = models.DecimalField(db_column=u'Trouble_concentrating_on_things__c', decimal_places=0, max_digits=1, blank=True, help_text=u'Trouble concentrating on things, such as reading the newspaper or watching television?\r\n\r\nOver the last 2 weeks, how often have you been bothered by this:\r\n0 = Not at all\r\n1 = Several Days\r\n2 = More than half the days\r\n3 = Nearly every day', null=True, verbose_name=u'Trouble concentrating on things.') # Field name made lowercase.
    noticable_change_in_behavior__c = models.DecimalField(db_column=u'Noticable_change_in_behavior__c', decimal_places=0, max_digits=1, blank=True, help_text=u'Moving or speaking slowly or being fidgety or restless  that other people could have noticed:\r\n\r\nOver the last 2 weeks, how often have you been bothered by this:\r\n0 = Not at all\r\n1 = Several Days\r\n2 = More than half the days\r\n3 = Nearly every day', null=True, verbose_name=u'Noticable change in behavior?') # Field name made lowercase.
    thoughts_of_death_or_hurthing_themselves__c = models.DecimalField(db_column=u'Thoughts_of_death_or_hurthing_themselves__c', decimal_places=0, max_digits=1, blank=True, help_text=u'Thoughts that you would be better off dead or of hurting yourself in some way.\r\n\r\nOver the last 2 weeks, how often have you been bothered by this:\r\n0 = Not at all\r\n1 = Several Days\r\n2 = More than half the days\r\n3 = Nearly every day', null=True, verbose_name=u'Thoughts of death or hurthing themselves') # Field name made lowercase.
    how_difficult_have_these_problems_been__c = models.CharField(db_column=u'How_difficult_have_these_problems_been__c', choices=[(u'Not difficult at all', u'Not difficult at all'), (u'Somewhat difficult', u'Somewhat difficult'), (u'Very difficult', u'Very difficult'), (u'Extremely difficult', u'Extremely difficult')], max_length=255, blank=True, help_text=u'If you checked off any problems, how difficult have these problems made it for you to do your work, take care of things at home, or get along with other people?', verbose_name=u'How difficult have these problems been?') # Field name made lowercase.
    assist_member_with_treatment_if_needed__c = models.BooleanField(help_text=u'If score is greater than 10, assist member with behavioral health referral if not already in treatment.', verbose_name=u'Assist member with treatment if needed?', db_column=u'Assist_member_with_treatment_if_needed__c') # Field name made lowercase.
    provided_materials_as_necessary__c = models.BooleanField(help_text=u'If the score is less than 10, provide education and referral assistance as appropriate.', verbose_name=u'Provided materials as necessary?', db_column=u'Provided_materials_as_necessary__c') # Field name made lowercase.
    assess_areas_that_could_impact_treatment__c = models.TextField(help_text=u'Assess the following areas that could impact member\u2019s treatment and provide education as appropriate:\r\n1) Beliefs or concerns about asthma or diabetes.\r\n2) Cultural issues.\r\n3) Religious beliefs.\r\n4) Ethnic characteristics.', verbose_name=u'Assess areas that could impact treatment', db_column=u'Assess_areas_that_could_impact_treatment__c', blank=True) # Field name made lowercase.
    information_to_be_sent_to_a_caregiver__c = models.TextField(help_text=u'Ask if member would like information to be sent to a caregiver.', verbose_name=u'Information to be sent to a caregiver?', db_column=u'Information_to_be_sent_to_a_caregiver__c', blank=True) # Field name made lowercase.
    rn_assessment__c = models.TextField(help_text=u'Details regarding the RN assessment.', verbose_name=u'RN Assessment', db_column=u'RN_Assessment__c', blank=True) # Field name made lowercase.
    date_of_rn_assessment__c = models.DateTimeField(null=True, verbose_name=u'Date of RN assessment', db_column=u'Date_of_RN_assessment__c', blank=True) # Field name made lowercase.
    contact_type__c = models.CharField(db_column=u'Contact_Type__c', choices=[(u'Asthma Program Initial Telephone Contact', u'Asthma Program Initial Telephone Contact'), (u'Asthma Program Follow-Up Telephone Contact', u'Asthma Program Follow-Up Telephone Contact'), (u'Diabetes Program Initial Telephone Contact', u'Diabetes Program Initial Telephone Contact'), (u'Diabetes Program Follow-Up Telephone Contact', u'Diabetes Program Follow-Up Telephone Contact')], max_length=255, blank=True, help_text=u'Associated script details.', verbose_name=u'Contact Type') # Field name made lowercase.
    discussion_of_areas_previously_found__c = models.TextField(help_text=u'Discuss any areas identified in previous telephone contact that require additional follow-up or education.', verbose_name=u'Discussion of areas previously found', db_column=u'Discussion_of_areas_previously_found__c', blank=True) # Field name made lowercase.
    hospitalizations_er_visits_past_6_months__c = models.TextField(help_text=u'Hospitalizations/ER visits in past six months?', verbose_name=u'Hospitalizations/ER visits past 6 months', db_column=u'Hospitalizations_ER_visits_past_6_months__c', blank=True) # Field name made lowercase.
    typical_fasting_blood_glucose__c = models.TextField(help_text=u'Typical fasting blood glucose?', verbose_name=u'Typical fasting blood glucose?', db_column=u'Typical_fasting_blood_glucose__c', blank=True) # Field name made lowercase.
    hba1c__c = models.TextField(help_text=u'In regards to diabetes assessment HbA1C?', verbose_name=u'HbA1C?', db_column=u'HbA1C__c', blank=True) # Field name made lowercase.
    daily_foot_checks__c = models.BooleanField(help_text=u'Check box if the answer is yes regarding daily foot checks.', verbose_name=u'Daily foot checks?', db_column=u'Daily_foot_checks__c') # Field name made lowercase.
    dental_visit_in_past_six_months__c = models.BooleanField(help_text=u'Dental visit in past six months?', verbose_name=u'Dental visit in past six months?', db_column=u'Dental_visit_in_past_six_months__c') # Field name made lowercase.
    eye_exam_in_past_year__c = models.BooleanField(help_text=u'Eye exam in past year?', verbose_name=u'Eye exam in past year?', db_column=u'Eye_exam_in_past_year__c') # Field name made lowercase.
    results_of_hba1c_test_and_bp_monitoring__c = models.TextField(help_text=u'Provide education on the various components of the program as appropriate to the assessment.  At a minimum discuss:\r\nKnowing the results of HbA1c testing and blood pressure monitoring.', verbose_name=u'Results of HbA1c test and BP monitoring', db_column=u'Results_of_HbA1c_test_and_BP_monitoring__c', blank=True) # Field name made lowercase.
    keeping_a_log_of_glucose_results__c = models.TextField(help_text=u'Discuss keeping a log of glucose testing results.', verbose_name=u'Keeping a log of glucose test results.', db_column=u'Keeping_a_log_of_glucose_results__c', blank=True) # Field name made lowercase.
    schedule_of_tests_and_practitioner_visit__c = models.TextField(help_text=u'Developing and updating a schedule of tests and practitioner visits including:\r\n1) Urinalysis.\r\n2) Serum creatinine.\r\n3) Lipid assessment.\r\n4) Eye exam.\r\n5) Foot care.', verbose_name=u'Schedule of tests and practitioner visit', db_column=u'Schedule_of_tests_and_practitioner_visit__c', blank=True) # Field name made lowercase.
    presence_of_cardiovascular_disease__c = models.TextField(help_text=u'Assess for the presence of cardiovascular disease and provide education as appropriate', verbose_name=u'Presence of cardiovascular disease', db_column=u'Presence_of_cardiovascular_disease__c', blank=True) # Field name made lowercase.
    phq_9_score__c = models.DecimalField(decimal_places=0, db_column=u'PHQ_9_Score__c', sf_read_only=models.READ_ONLY, max_digits=18, blank=True, null=True, verbose_name=u'PHQ-9 Score') # Field name made lowercase.
    related_department__c = models.CharField(blank=True, max_length=255, verbose_name=u'Related Department', db_column=u'Related_Department__c', choices=[(u'Appeals', u'Appeals'), (u'Customer Service', u'Customer Service'), (u'Disease/Case Management', u'Disease/Case Management'), (u'Enrollment/Billing', u'Enrollment/Billing'), (u'IT', u'IT')]) # Field name made lowercase.
    iscloned__c = models.BooleanField(verbose_name=u'isCloned', db_column=u'isCloned__c') # Field name made lowercase.
    isvipaccount__c = models.BooleanField(verbose_name=u'isVIPAccount', db_column=u'isVIPAccount__c') # Field name made lowercase.
    cloned_from__c = models.ForeignKey('self', null=True, db_column=u'Cloned_From__c', blank=True) # Field name made lowercase.
    clonecomments__c = models.CharField(max_length=50, verbose_name=u'cloneComments', db_column=u'cloneComments__c', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Case'
        verbose_name = 'Case'
        verbose_name_plural = 'Cases'
        # keyPrefix = '500'

class Casecomment(models.Model):
    parentid = models.ForeignKey('Case', db_column=u'ParentId') # Field name made lowercase.
    ispublished = models.BooleanField(verbose_name=u'Published', db_column=u'IsPublished') # Field name made lowercase.
    commentbody = models.TextField(verbose_name=u'Body', db_column=u'CommentBody', blank=True) # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'CaseComment'
        verbose_name = 'Case Comment'
        verbose_name_plural = 'Case Comments'
        # keyPrefix = '00a'

class Casecontactrole(models.Model):
    casesid = models.ForeignKey('Case', db_column=u'CasesId') # Field name made lowercase.
    contactid = models.ForeignKey('Contact', db_column=u'ContactId') # Field name made lowercase.
    role = models.CharField(blank=True, max_length=40, verbose_name=u'Role', db_column=u'Role', choices=[(u'Technical Contact', u'Technical Contact'), (u'Business Contact', u'Business Contact'), (u'Decision Maker', u'Decision Maker'), (u'Other', u'Other')]) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'CaseContactRole'
        verbose_name = 'Case Contact Role'
        verbose_name_plural = 'Case Contact Role'
        # keyPrefix = '03j'

class Casefeed(models.Model):
    parentid = models.ForeignKey('Case', db_column=u'ParentId') # Field name made lowercase.
    type = models.CharField(db_column=u'Type', choices=[(u'TrackedChange', u'Tracked Change'), (u'UserStatus', u'User Status'), (u'TextPost', u'Text Post'), (u'AdvancedTextPost', u'Advanced Text Post'), (u'LinkPost', u'Link Post'), (u'ContentPost', u'Content Post'), (u'PollPost', u'Poll'), (u'RypplePost', u'Work.com Thanks'), (u'ProfileSkillPost', u'Profile Skill Post'), (u'DashboardComponentSnapshot', u'Dashboard Component Snapshot'), (u'ApprovalPost', u'Approval Post'), (u'CaseCommentPost', u'Case Comment Feed'), (u'ReplyPost', u'Reply Post'), (u'EmailMessageEvent', u'Email Message Feed'), (u'CallLogPost', u'Call Log Feed'), (u'ChangeStatusPost', u'Change Status Feed'), (u'AttachArticleEvent', u'Attached Article'), (u'MilestoneEvent', u'Milestone Event'), (u'ActivityEvent', u'Activity Change'), (u'ChatTranscriptPost', u'Chat Transcript Post'), (u'CollaborationGroupCreated', u'Collaboration Group Created'), (u'CollaborationGroupUnarchived', u'Collaboration Group Reactivated'), (u'SocialPost', u'Social Post'), (u'QuestionPost', u'Question Post'), (u'FacebookPost', u'Facebook Post'), (u'BasicTemplateFeedItem', u'Basic Template Post'), (u'CreateRecordEvent', u'Created Record'), (u'CanvasPost', u'Canvas'), (u'AnnouncementPost', u'a')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Feed Item Type') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    commentcount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Comment Count', db_column=u'CommentCount') # Field name made lowercase.
    likecount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Like Count', db_column=u'LikeCount') # Field name made lowercase.
    title = models.CharField(max_length=255, verbose_name=u'Title', sf_read_only=models.READ_ONLY, db_column=u'Title', blank=True) # Field name made lowercase.
    body = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Body', db_column=u'Body', blank=True) # Field name made lowercase.
    linkurl = models.URLField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Link Url', db_column=u'LinkUrl', blank=True) # Field name made lowercase.
    relatedrecordid = models.ForeignKey('Contentversion', null=True, db_column=u'RelatedRecordId', blank=True) # Field name made lowercase.
    contentdata = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Content Data', db_column=u'ContentData', blank=True) # Field name made lowercase.
    contentfilename = models.CharField(max_length=255, verbose_name=u'Content File Name', sf_read_only=models.READ_ONLY, db_column=u'ContentFileName', blank=True) # Field name made lowercase.
    contentdescription = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Content Description', db_column=u'ContentDescription', blank=True) # Field name made lowercase.
    contenttype = models.CharField(max_length=120, verbose_name=u'Content File Type', sf_read_only=models.READ_ONLY, db_column=u'ContentType', blank=True) # Field name made lowercase.
    contentsize = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Content Size', db_column=u'ContentSize', blank=True) # Field name made lowercase.
    insertedbyid = models.ForeignKey('User', null=True, db_column=u'InsertedById', blank=True) # Field name made lowercase.
    networkscope = models.CharField(db_column=u'NetworkScope', choices=[(u'AllNetworks', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Network Scope') # Field name made lowercase.
    visibility = models.CharField(db_column=u'Visibility', choices=[(u'AllUsers', None), (u'InternalUsers', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Visibility') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'CaseFeed'
        verbose_name = 'Case Feed'
        verbose_name_plural = 'Case Feed'
        # keyPrefix = 'None'

class Casehistory(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    caseid = models.ForeignKey('Case', db_column=u'CaseId') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    field = models.CharField(max_length=255, verbose_name=u'Changed Field', sf_read_only=models.READ_ONLY, db_column=u'Field', choices=[(u'Account', None), (u'Assess_areas_that_could_impact_treatment__c', None), (u'Assess_for_any_areas_where_member__c', None), (u'Assess_for_the_presence_of_GERD__c', None), (u'Asset', None), (u'Assist_member_with_treatment_if_needed__c', None), (u'Asthma_affecting_work_school_home_etc__c', None), (u'Asthma_symptoms_wake_you__c', None), (u'BusinessHours', None), (u'cloneComments__c', None), (u'Cloned_From__c', None), (u'closed', u'Closed.'), (u'Contact', None), (u'Contact_Type__c', None), (u'created', u'Created.'), (u'Daily_foot_checks__c', None), (u'Date_of_RN_assessment__c', None), (u'Dental_visit_in_past_six_months__c', None), (u'Description', None), (u'Developing_and_updating_a_schedule__c', None), (u'Discussion_of_areas_previously_found__c', None), (u'Discussion_of_health_behaviors__c', None), (u'Disease_Management_Program_Association__c', None), (u'Eye_exam_in_past_year__c', None), (u'feedEvent', u'Feed event'), (u'Feeling_bad_about_yourself_or_that_you_a__c', None), (u'Feeling_down_depressed_or_hopeless__c', None), (u'Feeling_tired_or_having_little_energy__c', None), (u'HbA1C__c', None), (u'Hospitalizations_ER_visits_past_6_months__c', None), (u'How_difficult_have_these_problems_been__c', None), (u'How_often_had_shortness_of_breath__c', None), (u'How_often_used_rescue_inhaler_or_meds__c', None), (u'Identify_barriers_for_adherence__c', None), (u'Information_to_be_sent_to_a_caregiver__c', None), (u'isCloned__c', None), (u'IsClosedOnCreate', None), (u'IsEscalated', None), (u'isVIPAccount__c', None), (u'Keeping_a_log_of_glucose_results__c', None), (u'Knowing_the_results_of_peak_flow__c', None), (u'Little_interest_or_pleasure_in_activity__c', None), (u'Log_of_medications__c', None), (u'Materials_for_working_with_providers__c', None), (u'Noticable_change_in_behavior__c', None), (u'Origin', None), (u'Owner', None), (u'ownerAccepted', u'Owner (Accepted)'), (u'ownerAssignment', u'Owner (Assignment)'), (u'ownerEscalated', u'Owner (Escalation)'), (u'Parent', None), (u'Poor_appetite_or_overeating__c', None), (u'Presence_of_anxiety_and_assistance__c', None), (u'Presence_of_cardiovascular_disease__c', None), (u'Priority', None), (u'Provided_materials_as_necessary__c', None), (u'Rate_for_asthma_control_in_past_4_weeks__c', None), (u'Reason', None), (u'locked', u'Record locked.'), (u'RecordType', None), (u'unlocked', u'Record unlocked.'), (u'Related_Department__c', None), (u'Results_of_HbA1c_test_and_BP_monitoring__c', None), (u'Review_and_update_demographic_info__c', None), (u'Review_and_update_practitioner_info__c', None), (u'RN_Assessment__c', None), (u'Schedule_of_tests_and_practitioner_visit__c', None), (u'Status', None), (u'Subject', None), (u'Thoughts_of_death_or_hurthing_themselves__c', None), (u'Trouble_concentrating_on_things__c', None), (u'Trouble_related_to_sleeping__c', None), (u'Type', None), (u'Type_of_Event_Grievance__c', None), (u'Typical_fasting_blood_glucose__c', None), (u'Verbalize_effectiveness_of_treatments__c', None)]) # Field name made lowercase.
    oldvalue = models.CharField(max_length=255, verbose_name=u'Old Value', sf_read_only=models.READ_ONLY, db_column=u'OldValue', blank=True) # Field name made lowercase.
    newvalue = models.CharField(max_length=255, verbose_name=u'New Value', sf_read_only=models.READ_ONLY, db_column=u'NewValue', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'CaseHistory'
        verbose_name = 'Case History'
        verbose_name_plural = 'Case History'
        # keyPrefix = 'None'

class Caseshare(models.Model):
    caseid = models.ForeignKey('Case', db_column=u'CaseId') # Field name made lowercase.
    userorgroupid = models.ForeignKey('Group', db_column=u'UserOrGroupId') # Field name made lowercase.
    caseaccesslevel = models.CharField(max_length=40, verbose_name=u'Case Access', sf_read_only=models.READ_ONLY, db_column=u'CaseAccessLevel', choices=[(u'Read', u'Read Only'), (u'Edit', u'Read/Write'), (u'All', u'Owner')]) # Field name made lowercase.
    rowcause = models.CharField(db_column=u'RowCause', choices=[(u'Owner', u'Owner'), (u'Manual', u'Manual Sharing'), (u'Rule', u'Sharing Rule'), (u'ImplicitChild', u'Account Sharing'), (u'ImplicitParent', u'Associated record owner or sharing'), (u'Team', u'Sales Team'), (u'Territory', u'Territory Assignment Rule'), (u'TerritoryManual', u'Territory Manual'), (u'TerritoryRule', u'Territory Sharing Rule')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Row Cause') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'CaseShare'
        verbose_name = 'Case Share'
        verbose_name_plural = 'Case Share'
        # keyPrefix = '01n'

class Casesolution(models.Model):
    caseid = models.ForeignKey('Case', db_column=u'CaseId') # Field name made lowercase.
    solutionid = models.ForeignKey('Solution', db_column=u'SolutionId') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'CaseSolution'
        verbose_name = 'Case Solution'
        verbose_name_plural = 'Case Solution'
        # keyPrefix = '010'

class Casestatus(models.Model):
    masterlabel = models.CharField(max_length=255, verbose_name=u'Master Label', sf_read_only=models.READ_ONLY, db_column=u'MasterLabel', blank=True) # Field name made lowercase.
    sortorder = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Sort Order', db_column=u'SortOrder', blank=True) # Field name made lowercase.
    isdefault = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Is Default', db_column=u'IsDefault') # Field name made lowercase.
    isclosed = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Is Closed', db_column=u'IsClosed') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'CaseStatus'
        verbose_name = 'Case Status Value'
        verbose_name_plural = 'Case Status Value'
        # keyPrefix = 'None'

class Caseteammember(models.Model):
    parentid = models.ForeignKey('Case', db_column=u'ParentId') # Field name made lowercase.
    memberid = models.ForeignKey('Contact', db_column=u'MemberId') # Field name made lowercase.
    teamtemplatememberid = models.ForeignKey('Caseteamtemplatemember', null=True, db_column=u'TeamTemplateMemberId', blank=True) # Field name made lowercase.
    teamroleid = models.ForeignKey('Caseteamrole', db_column=u'TeamRoleId') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'CaseTeamMember'
        verbose_name = 'Case Team Member'
        verbose_name_plural = 'Case Team Member'
        # keyPrefix = 'None'

class Caseteamrole(models.Model):
    name = models.CharField(max_length=80, verbose_name=u'Name', db_column=u'Name') # Field name made lowercase.
    accesslevel = models.CharField(max_length=40, verbose_name=u'Access Level', db_column=u'AccessLevel', choices=[(u'None', u'Private'), (u'Read', u'Read Only'), (u'Edit', u'Read/Write')]) # Field name made lowercase.
    preferencesvisibleincsp = models.BooleanField(verbose_name=u'Visible in Customer Portal', db_column=u'PreferencesVisibleInCSP') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'CaseTeamRole'
        verbose_name = 'Case Team Member Role'
        verbose_name_plural = 'Case Team Member Role'
        # keyPrefix = 'None'

class Caseteamtemplate(models.Model):
    name = models.CharField(max_length=80, verbose_name=u'Name', db_column=u'Name') # Field name made lowercase.
    description = models.TextField(verbose_name=u'Description', db_column=u'Description', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'CaseTeamTemplate'
        verbose_name = 'Predefined Case Team'
        verbose_name_plural = 'Predefined Case Team'
        # keyPrefix = 'None'

class Caseteamtemplatemember(models.Model):
    teamtemplateid = models.ForeignKey('Caseteamtemplate', db_column=u'TeamTemplateId') # Field name made lowercase.
    memberid = models.ForeignKey('Contact', db_column=u'MemberId') # Field name made lowercase.
    teamroleid = models.ForeignKey('Caseteamrole', null=True, db_column=u'TeamRoleId', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'CaseTeamTemplateMember'
        verbose_name = 'Predefined Case Team Member'
        verbose_name_plural = 'Predefined Case Team Member'
        # keyPrefix = 'None'

class Caseteamtemplaterecord(models.Model):
    parentid = models.ForeignKey('Case', db_column=u'ParentId') # Field name made lowercase.
    teamtemplateid = models.ForeignKey('Caseteamtemplate', db_column=u'TeamTemplateId') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'CaseTeamTemplateRecord'
        verbose_name = 'Predefined Case Team Record'
        verbose_name_plural = 'Predefined Case Team Record'
        # keyPrefix = 'None'

class Categorydata(models.Model):
    categorynodeid = models.ForeignKey('Categorynode', db_column=u'CategoryNodeId') # Field name made lowercase.
    relatedsobjectid = models.ForeignKey('Solution', db_column=u'RelatedSobjectId') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'CategoryData'
        verbose_name = 'Category Data'
        verbose_name_plural = 'Category Data'
        # keyPrefix = '02o'

class Categorynode(models.Model):
    parentid = models.ForeignKey('self', null=True, db_column=u'ParentId', blank=True) # Field name made lowercase.
    masterlabel = models.CharField(max_length=40, verbose_name=u'Name', db_column=u'MasterLabel') # Field name made lowercase.
    sortorder = models.IntegerField(null=True, verbose_name=u'Sort Order', db_column=u'SortOrder', blank=True) # Field name made lowercase.
    sortstyle = models.CharField(max_length=40, verbose_name=u'Subcategory Sort Style', db_column=u'SortStyle', choices=[(u'custom', u'Custom Order'), (u'alphabetical', u'Alphabetical Order')]) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'CategoryNode'
        verbose_name = 'Category Node'
        verbose_name_plural = 'Category Nodes'
        # keyPrefix = '02n'

class Chatteractivity(models.Model):
    networkid = models.ForeignKey('Network', null=True, db_column=u'NetworkId', blank=True) # Field name made lowercase.
    parentid = models.ForeignKey('User', null=True, db_column=u'ParentId', blank=True) # Field name made lowercase.
    postcount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Post Count', db_column=u'PostCount') # Field name made lowercase.
    commentcount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Comment Count', db_column=u'CommentCount') # Field name made lowercase.
    commentreceivedcount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Comment Received Count', db_column=u'CommentReceivedCount') # Field name made lowercase.
    likereceivedcount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Like Received Count', db_column=u'LikeReceivedCount') # Field name made lowercase.
    influencerawrank = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Influence Raw Rank', db_column=u'InfluenceRawRank') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'ChatterActivity'
        verbose_name = 'Chatter Activity'
        verbose_name_plural = 'Chatter Activity'
        # keyPrefix = '0ca'

class ClaimHistory(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    parentid = models.ForeignKey('ClaimC', db_column=u'ParentId') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    field = models.CharField(max_length=255, verbose_name=u'Changed Field', sf_read_only=models.READ_ONLY, db_column=u'Field', choices=[(u'Adjustment__c', None), (u'admission_date__c', None), (u'Allowed_Amount__c', None), (u'Check_Number__c', None), (u'cloneComments__c', None), (u'Cloned_From__c', None), (u'COB_adjustment__c', None), (u'Coinsurance__c', None), (u'Copay__c', None), (u'Covered_Charges__c', None), (u'CPT_Codes__c', None), (u'created', u'Created.'), (u'Deductible__c', None), (u'Denial_Reason__c', None), (u'DenialCode__c', None), (u'Description__c', None), (u'Disallowed_Amount__c', None), (u'discharge_date__c', None), (u'Facility__c', None), (u'Facility_Full_Address__c', None), (u'feedEvent', u'Feed event'), (u'Group_NPI__c', None), (u'ICD_9_Code__c', None), (u'icd10_codes__c', None), (u'id_in_Connectria__c', None), (u'Imported__c', None), (u'Imported_Source_Point__c', None), (u'In_Network__c', None), (u'Incurred_Date__c', None), (u'isCloned__c', None), (u'IsETLUpdate__c', None), (u'isVIPAccount__c', None), (u'Last_Modified_Date_Javelina__c', None), (u'Member__c', None), (u'Name', None), (u'Original_Created_Date__c', None), (u'Oucr__c', None), (u'Out_of_Pocket__c', None), (u'ownerAccepted', u'Owner (Accepted)'), (u'ownerAssignment', u'Owner (Assignment)'), (u'Paid__c', None), (u'patient_paid__c', None), (u'Patient_Responsibility__c', None), (u'Payment_Date__c', None), (u'Prior_Authorization_Information__c', None), (u'Provider__c', None), (u'Provider_Discount__c', None), (u'Provider_First_Name__c', None), (u'Provider_Last_Name__c', None), (u'Provider_NPI__c', None), (u'provider_office_name__c', None), (u'Provider_Paid__c', None), (u'provider_taxonomy_code__c', None), (u'recieved_date__c', None), (u'locked', u'Record locked.'), (u'unlocked', u'Record unlocked.'), (u'RedCard_Login__c', None), (u'Repriced_Amount__c', None), (u'service_type__c', None), (u'Status__c', None), (u'Total_Charge__c', None), (u'uhh_parent_id__c', None), (u'uhh_patient_first_name__c', None), (u'uhh_patient_id__c', None), (u'uhh_patient_last_name__c', None), (u'uhh_patient_relationship__c', None), (u'uhh_type__c', None), (u'uhh_update_at__c', None), (u'uhhApi_ClaimsId__c', None), (u'uhhApi_Status__c', None)]) # Field name made lowercase.
    oldvalue = models.CharField(max_length=255, verbose_name=u'Old Value', sf_read_only=models.READ_ONLY, db_column=u'OldValue', blank=True) # Field name made lowercase.
    newvalue = models.CharField(max_length=255, verbose_name=u'New Value', sf_read_only=models.READ_ONLY, db_column=u'NewValue', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Claim__History'
        verbose_name = 'History: Claim'
        verbose_name_plural = 'History: Claim'
        # keyPrefix = 'None'

class ClaimC(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'Claim Number', db_column=u'Name', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    lastactivitydate = models.DateField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Activity Date', db_column=u'LastActivityDate', blank=True) # Field name made lowercase.
    lastvieweddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Viewed Date', db_column=u'LastViewedDate', blank=True) # Field name made lowercase.
    lastreferenceddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Referenced Date', db_column=u'LastReferencedDate', blank=True) # Field name made lowercase.
    member__c = models.ForeignKey('Account', db_column=u'Member__c') # Field name made lowercase.
    allowed_amount__c = models.DecimalField(db_column=u'Allowed_Amount__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Allowed Amount') # Field name made lowercase.
    cpt_codes__c = models.CharField(max_length=255, verbose_name=u'CPT Codes', db_column=u'CPT_Codes__c', blank=True) # Field name made lowercase.
    coinsurance__c = models.DecimalField(db_column=u'Coinsurance__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Coinsurance') # Field name made lowercase.
    copay__c = models.DecimalField(db_column=u'Copay__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Copay') # Field name made lowercase.
    covered_charges__c = models.DecimalField(db_column=u'Covered_Charges__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Covered Charges') # Field name made lowercase.
    deductible__c = models.DecimalField(db_column=u'Deductible__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Deductible') # Field name made lowercase.
    disallowed_amount__c = models.DecimalField(db_column=u'Disallowed_Amount__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Disallowed Amount') # Field name made lowercase.
    group_npi__c = models.CharField(max_length=30, verbose_name=u'Group NPI', db_column=u'Group_NPI__c', blank=True) # Field name made lowercase.
    icd_9_code__c = models.CharField(max_length=50, verbose_name=u'ICD-9 Code', db_column=u'ICD_9_Code__c', blank=True) # Field name made lowercase.
    in_network__c = models.BooleanField(verbose_name=u'In Network', db_column=u'In_Network__c') # Field name made lowercase.
    incurred_date__c = models.DateTimeField(null=True, verbose_name=u'Incurred Date', db_column=u'Incurred_Date__c', blank=True) # Field name made lowercase.
    last_modified_date_javelina__c = models.DateTimeField(null=True, verbose_name=u'Last Modified Date Javelina', db_column=u'Last_Modified_Date_Javelina__c', blank=True) # Field name made lowercase.
    original_created_date__c = models.DateTimeField(null=True, verbose_name=u'Original Created Date', db_column=u'Original_Created_Date__c', blank=True) # Field name made lowercase.
    oucr__c = models.DecimalField(db_column=u'Oucr__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Oucr') # Field name made lowercase.
    out_of_pocket__c = models.DecimalField(db_column=u'Out_of_Pocket__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Out of Pocket') # Field name made lowercase.
    paid__c = models.DecimalField(db_column=u'Paid__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Paid') # Field name made lowercase.
    patient_responsibility__c = models.DecimalField(db_column=u'Patient_Responsibility__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Patient Responsibility') # Field name made lowercase.
    payment_date__c = models.DateField(null=True, verbose_name=u'Payment Date', db_column=u'Payment_Date__c', blank=True) # Field name made lowercase.
    provider_discount__c = models.DecimalField(db_column=u'Provider_Discount__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Provider Discount') # Field name made lowercase.
    provider_first_name__c = models.CharField(max_length=50, verbose_name=u'Provider First Name', db_column=u'Provider_First_Name__c', blank=True) # Field name made lowercase.
    provider_last_name__c = models.CharField(max_length=50, verbose_name=u'Provider Last Name', db_column=u'Provider_Last_Name__c', blank=True) # Field name made lowercase.
    provider_npi__c = models.CharField(max_length=50, verbose_name=u'Provider NPI #', db_column=u'Provider_NPI__c', blank=True) # Field name made lowercase.
    provider_paid__c = models.CharField(max_length=10, verbose_name=u'Provider Paid', db_column=u'Provider_Paid__c', blank=True) # Field name made lowercase.
    redcard_login__c = models.URLField(null=True, verbose_name=u'RedCard Login', db_column=u'RedCard_Login__c', blank=True) # Field name made lowercase.
    repriced_amount__c = models.DecimalField(db_column=u'Repriced_Amount__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Repriced Amount') # Field name made lowercase.
    total_charge__c = models.DecimalField(db_column=u'Total_Charge__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Total Charge') # Field name made lowercase.
    id_in_connectria__c = models.CharField(max_length=15, verbose_name=u'id_in_Connectria', db_column=u'id_in_Connectria__c', blank=True) # Field name made lowercase.
    uhhapi_claimsid__c = models.DecimalField(null=True, decimal_places=0, db_column=u'uhhApi_ClaimsId__c', max_digits=18, blank=True, unique=True, verbose_name=u'uhhApi_ClaimsId') # Field name made lowercase.
    uhh_update_at__c = models.DateTimeField(null=True, verbose_name=u'uhh_update_at', blank=True)
    adjustment__c = models.DecimalField(db_column=u'Adjustment__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Adjustment') # Field name made lowercase.
    admission_date__c = models.DateTimeField(null=True, verbose_name=u'Admission date', blank=True)
    provider_office_name__c = models.CharField(max_length=200, verbose_name=u'Provider office name', blank=True)
    provider_taxonomy_code__c = models.CharField(max_length=15, verbose_name=u'Provider taxonomy code', blank=True)
    cob_adjustment__c = models.DecimalField(db_column=u'COB_adjustment__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'COB adjustment') # Field name made lowercase.
    service_type__c = models.CharField(max_length=15, verbose_name=u'Service type', blank=True)
    icd10_codes__c = models.CharField(max_length=15, verbose_name=u'icd10 codes', blank=True)
    description__c = models.TextField(verbose_name=u'Description', db_column=u'Description__c', blank=True) # Field name made lowercase.
    patient_paid__c = models.DecimalField(null=True, verbose_name=u'Patient paid', max_digits=18, decimal_places=2, blank=True)
    recieved_date__c = models.DateTimeField(null=True, verbose_name=u'Recieved date', blank=True)
    discharge_date__c = models.DateTimeField(null=True, verbose_name=u'Discharge date', blank=True)
    uhh_parent_id__c = models.DecimalField(null=True, verbose_name=u'uhh_parent_id', max_digits=11, decimal_places=0, blank=True)
    uhh_patient_id__c = models.DecimalField(null=True, verbose_name=u'uhh_patient_id', max_digits=11, decimal_places=0, blank=True)
    uhh_patient_first_name__c = models.CharField(max_length=40, verbose_name=u'uhh_patient_first_name', blank=True)
    uhh_patient_last_name__c = models.CharField(max_length=40, verbose_name=u'uhh_patient_last_name', blank=True)
    uhh_patient_relationship__c = models.CharField(max_length=15, verbose_name=u'uhh_patient_relationship', blank=True)
    uhh_type__c = models.CharField(max_length=15, verbose_name=u'uhh_type', blank=True)
    status__c = models.CharField(db_column=u'Status__c', choices=[(u'New', u'New'), (u'Awaiting information', u'Awaiting information'), (u'Resolved', u'Resolved')], max_length=255, blank=True, help_text=u'Status of a claim', verbose_name=u'Status') # Field name made lowercase.
    check_number__c = models.CharField(help_text=u'Just the last 4 of the check number are stored.', max_length=35, verbose_name=u'Check Number', db_column=u'Check_Number__c', blank=True) # Field name made lowercase.
    prior_authorization_information__c = models.TextField(help_text=u'Details regarding prior authorization.', verbose_name=u'Prior Authorization Information', db_column=u'Prior_Authorization_Information__c', blank=True) # Field name made lowercase.
    imported__c = models.CharField(blank=True, max_length=255, verbose_name=u'Imported', db_column=u'Imported__c', choices=[(u'Javalina', u'Javalina'), (u'Nevada Health Link', u'Nevada Health Link')]) # Field name made lowercase.
    imported_source_point__c = models.CharField(blank=True, max_length=255, verbose_name=u'Imported Source Point', db_column=u'Imported_Source_Point__c', choices=[(u'Dataloader', u'Dataloader'), (u'EDI', u'EDI'), (u'Web-Service', u'Web-Service')]) # Field name made lowercase.
    iscloned__c = models.BooleanField(verbose_name=u'isCloned', db_column=u'isCloned__c') # Field name made lowercase.
    cloned_from__c = models.ForeignKey('self', null=True, db_column=u'Cloned_From__c', blank=True) # Field name made lowercase.
    isvipaccount__c = models.BooleanField(verbose_name=u'isVIPAccount', db_column=u'isVIPAccount__c') # Field name made lowercase.
    isetlupdate__c = models.BooleanField(verbose_name=u'IsETLUpdate', db_column=u'IsETLUpdate__c') # Field name made lowercase.
    provider__c = models.ForeignKey('Contact', null=True, db_column=u'Provider__c', blank=True) # Field name made lowercase.
    facility_full_address__c = models.CharField(max_length=150, verbose_name=u'Facility Full Address', db_column=u'Facility_Full_Address__c', blank=True) # Field name made lowercase.
    clonecomments__c = models.CharField(max_length=50, verbose_name=u'cloneComments', db_column=u'cloneComments__c', blank=True) # Field name made lowercase.
    uhhapi_status__c = models.CharField(max_length=20, verbose_name=u'uhhApi_Status', db_column=u'uhhApi_Status__c', blank=True) # Field name made lowercase.
    denialcode__c = models.CharField(max_length=25, verbose_name=u'Denial Code', db_column=u'DenialCode__c', blank=True) # Field name made lowercase.
    denial_reason__c = models.TextField(verbose_name=u'Denial Reason', db_column=u'Denial_Reason__c', blank=True) # Field name made lowercase.
    facility__c = models.ForeignKey('Account', null=True, db_column=u'Facility__c', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Claim__c'
        verbose_name = 'Claim'
        verbose_name_plural = 'Claims'
        # keyPrefix = 'a0W'

class Clientbrowser(models.Model):
    usersid = models.ForeignKey('User', db_column=u'UsersId') # Field name made lowercase.
    fulluseragent = models.CharField(max_length=1024, verbose_name=u'Full User Agent', sf_read_only=models.READ_ONLY, db_column=u'FullUserAgent', blank=True) # Field name made lowercase.
    proxyinfo = models.CharField(max_length=1024, verbose_name=u'Proxy Info', sf_read_only=models.READ_ONLY, db_column=u'ProxyInfo', blank=True) # Field name made lowercase.
    lastupdate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Update', db_column=u'LastUpdate', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'ClientBrowser'
        verbose_name = 'Client Browser'
        verbose_name_plural = 'Client Browser'
        # keyPrefix = '713'

class Collaborationgroup(models.Model):
    name = models.CharField(max_length=40, verbose_name=u'Name', db_column=u'Name') # Field name made lowercase.
    membercount = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Member Count', db_column=u'MemberCount', blank=True) # Field name made lowercase.
    ownerid = models.ForeignKey('User', db_column=u'OwnerId') # Field name made lowercase.
    collaborationtype = models.CharField(max_length=40, verbose_name=u'Access Type', db_column=u'CollaborationType', choices=[(u'Public', u'Public'), (u'Private', u'Private')]) # Field name made lowercase.
    description = models.TextField(verbose_name=u'Description', db_column=u'Description', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    fullphotourl = models.URLField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Url for full-sized Photo', db_column=u'FullPhotoUrl', blank=True) # Field name made lowercase.
    smallphotourl = models.URLField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Url for Thumbnail sized Photo', db_column=u'SmallPhotoUrl', blank=True) # Field name made lowercase.
    lastfeedmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Feed Modified Date', db_column=u'LastFeedModifiedDate') # Field name made lowercase.
    informationtitle = models.CharField(max_length=30, verbose_name=u'Information Title', db_column=u'InformationTitle', blank=True) # Field name made lowercase.
    informationbody = models.TextField(verbose_name=u'Information', db_column=u'InformationBody', blank=True) # Field name made lowercase.
    hasprivatefieldsaccess = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Has Private Fields Access', db_column=u'HasPrivateFieldsAccess') # Field name made lowercase.
    canhaveguests = models.BooleanField(verbose_name=u'Allow Customers', db_column=u'CanHaveGuests') # Field name made lowercase.
    networkid = models.ForeignKey('Network', null=True, db_column=u'NetworkId', blank=True) # Field name made lowercase.
    lastvieweddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Viewed Date', db_column=u'LastViewedDate', blank=True) # Field name made lowercase.
    lastreferenceddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Referenced Date', db_column=u'LastReferencedDate', blank=True) # Field name made lowercase.
    isarchived = models.BooleanField(verbose_name=u'Is Archived', db_column=u'IsArchived') # Field name made lowercase.
    isautoarchivedisabled = models.BooleanField(verbose_name=u'Is Auto Archive Disabled', db_column=u'IsAutoArchiveDisabled') # Field name made lowercase.
    announcementid = models.ForeignKey('Announcement', null=True, db_column=u'AnnouncementId', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'CollaborationGroup'
        verbose_name = 'Group'
        verbose_name_plural = 'Groups'
        # keyPrefix = '0F9'

class Collaborationgroupfeed(models.Model):
    parentid = models.ForeignKey('Collaborationgroup', db_column=u'ParentId') # Field name made lowercase.
    type = models.CharField(db_column=u'Type', choices=[(u'TrackedChange', u'Tracked Change'), (u'UserStatus', u'User Status'), (u'TextPost', u'Text Post'), (u'AdvancedTextPost', u'Advanced Text Post'), (u'LinkPost', u'Link Post'), (u'ContentPost', u'Content Post'), (u'PollPost', u'Poll'), (u'RypplePost', u'Work.com Thanks'), (u'ProfileSkillPost', u'Profile Skill Post'), (u'DashboardComponentSnapshot', u'Dashboard Component Snapshot'), (u'ApprovalPost', u'Approval Post'), (u'CaseCommentPost', u'Case Comment Feed'), (u'ReplyPost', u'Reply Post'), (u'EmailMessageEvent', u'Email Message Feed'), (u'CallLogPost', u'Call Log Feed'), (u'ChangeStatusPost', u'Change Status Feed'), (u'AttachArticleEvent', u'Attached Article'), (u'MilestoneEvent', u'Milestone Event'), (u'ActivityEvent', u'Activity Change'), (u'ChatTranscriptPost', u'Chat Transcript Post'), (u'CollaborationGroupCreated', u'Collaboration Group Created'), (u'CollaborationGroupUnarchived', u'Collaboration Group Reactivated'), (u'SocialPost', u'Social Post'), (u'QuestionPost', u'Question Post'), (u'FacebookPost', u'Facebook Post'), (u'BasicTemplateFeedItem', u'Basic Template Post'), (u'CreateRecordEvent', u'Created Record'), (u'CanvasPost', u'Canvas'), (u'AnnouncementPost', u'a')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Feed Item Type') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    commentcount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Comment Count', db_column=u'CommentCount') # Field name made lowercase.
    likecount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Like Count', db_column=u'LikeCount') # Field name made lowercase.
    title = models.CharField(max_length=255, verbose_name=u'Title', sf_read_only=models.READ_ONLY, db_column=u'Title', blank=True) # Field name made lowercase.
    body = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Body', db_column=u'Body', blank=True) # Field name made lowercase.
    linkurl = models.URLField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Link Url', db_column=u'LinkUrl', blank=True) # Field name made lowercase.
    relatedrecordid = models.ForeignKey('Contentversion', null=True, db_column=u'RelatedRecordId', blank=True) # Field name made lowercase.
    contentdata = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Content Data', db_column=u'ContentData', blank=True) # Field name made lowercase.
    contentfilename = models.CharField(max_length=255, verbose_name=u'Content File Name', sf_read_only=models.READ_ONLY, db_column=u'ContentFileName', blank=True) # Field name made lowercase.
    contentdescription = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Content Description', db_column=u'ContentDescription', blank=True) # Field name made lowercase.
    contenttype = models.CharField(max_length=120, verbose_name=u'Content File Type', sf_read_only=models.READ_ONLY, db_column=u'ContentType', blank=True) # Field name made lowercase.
    contentsize = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Content Size', db_column=u'ContentSize', blank=True) # Field name made lowercase.
    insertedbyid = models.ForeignKey('User', null=True, db_column=u'InsertedById', blank=True) # Field name made lowercase.
    networkscope = models.CharField(db_column=u'NetworkScope', choices=[(u'AllNetworks', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Network Scope') # Field name made lowercase.
    visibility = models.CharField(db_column=u'Visibility', choices=[(u'AllUsers', None), (u'InternalUsers', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Visibility') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'CollaborationGroupFeed'
        verbose_name = 'Group Feed'
        verbose_name_plural = 'Group Feed'
        # keyPrefix = 'None'

class Collaborationgroupmember(models.Model):
    collaborationgroupid = models.ForeignKey('Collaborationgroup', db_column=u'CollaborationGroupId') # Field name made lowercase.
    memberid = models.ForeignKey('User', db_column=u'MemberId') # Field name made lowercase.
    collaborationrole = models.CharField(blank=True, max_length=40, verbose_name=u'Group Member Role', db_column=u'CollaborationRole', choices=[(u'Admin', u'Manager'), (u'Standard', u'Member')]) # Field name made lowercase.
    notificationfrequency = models.CharField(blank=True, max_length=40, verbose_name=u'Notification Frequency', db_column=u'NotificationFrequency', choices=[(u'P', u'Email on Each Post'), (u'D', u'Daily Digests'), (u'W', u'Weekly Digests'), (u'N', u'Never')]) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    lastfeedaccessdate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Feed Access Date', db_column=u'LastFeedAccessDate', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'CollaborationGroupMember'
        verbose_name = 'Group Member'
        verbose_name_plural = 'Group Members'
        # keyPrefix = '0FB'

class Collaborationgroupmemberrequest(models.Model):
    collaborationgroupid = models.ForeignKey('Collaborationgroup', db_column=u'CollaborationGroupId') # Field name made lowercase.
    requesterid = models.ForeignKey('User', db_column=u'RequesterId') # Field name made lowercase.
    responsemessage = models.CharField(max_length=255, verbose_name=u'Response Message', sf_read_only=models.NOT_CREATEABLE, db_column=u'ResponseMessage', blank=True) # Field name made lowercase.
    status = models.CharField(max_length=40, verbose_name=u'Status', sf_read_only=models.NOT_CREATEABLE, db_column=u'Status', choices=[(u'Pending', None), (u'Accepted', None), (u'Declined', None)]) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'CollaborationGroupMemberRequest'
        verbose_name = 'Group Member Request'
        verbose_name_plural = 'Group Member Requests'
        # keyPrefix = '0I5'

class Collaborationinvitation(models.Model):
    parentid = models.ForeignKey('self', null=True, db_column=u'ParentId', blank=True) # Field name made lowercase.
    sharedentityid = models.ForeignKey('Collaborationgroup', db_column=u'SharedEntityId') # Field name made lowercase.
    inviterid = models.ForeignKey('User', db_column=u'InviterId') # Field name made lowercase.
    inviteduseremail = models.CharField(max_length=240, verbose_name=u'Invited Email', sf_read_only=models.NOT_UPDATEABLE, db_column=u'InvitedUserEmail') # Field name made lowercase.
    inviteduseremailnormalized = models.EmailField(sf_read_only=models.READ_ONLY, verbose_name=u'Invited Email (Normalized)', db_column=u'InvitedUserEmailNormalized') # Field name made lowercase.
    status = models.CharField(max_length=40, verbose_name=u'Invitation Status', sf_read_only=models.READ_ONLY, db_column=u'Status', choices=[(u'Sent', None), (u'Accepted', None), (u'Canceled', None)]) # Field name made lowercase.
    optionalmessage = models.CharField(max_length=255, verbose_name=u'Optional Message', sf_read_only=models.NOT_UPDATEABLE, db_column=u'OptionalMessage', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'CollaborationInvitation'
        verbose_name = 'Chatter Invitation'
        verbose_name_plural = 'Chatter Invitations'
        # keyPrefix = '0H1'

class Combinedattachment(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    parentid = models.ForeignKey('Account', db_column=u'ParentId') # Field name made lowercase.
    recordtype = models.CharField(max_length=30, verbose_name=u'Type', sf_read_only=models.READ_ONLY, db_column=u'RecordType', blank=True) # Field name made lowercase.
    title = models.CharField(max_length=255, verbose_name=u'Title', sf_read_only=models.READ_ONLY, db_column=u'Title', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Content Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    filetype = models.CharField(max_length=30, verbose_name=u'File Type', sf_read_only=models.READ_ONLY, db_column=u'FileType', blank=True) # Field name made lowercase.
    contentsize = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Content Size', db_column=u'ContentSize', blank=True) # Field name made lowercase.
    fileextension = models.CharField(max_length=40, verbose_name=u'File Extension', sf_read_only=models.READ_ONLY, db_column=u'FileExtension', blank=True) # Field name made lowercase.
    contenturl = models.URLField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Content URL', db_column=u'ContentUrl', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'CombinedAttachment'
        verbose_name = 'Note, Attachment, Google Doc And File'
        verbose_name_plural = 'Notes, Attachments, Google Docs And Files'
        # keyPrefix = 'None'

class Community(models.Model):
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'Name', sf_read_only=models.READ_ONLY, db_column=u'Name') # Field name made lowercase.
    description = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Description', db_column=u'Description', blank=True) # Field name made lowercase.
    isactive = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Active', db_column=u'IsActive') # Field name made lowercase.
    networkid = models.ForeignKey('Network', null=True, db_column=u'NetworkId', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Community'
        verbose_name = 'Zone'
        verbose_name_plural = 'Zones'
        # keyPrefix = '09a'

class Contact(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    masterrecordid = models.ForeignKey('self', null=True, db_column=u'MasterRecordId', blank=True) # Field name made lowercase.
    accountid = models.ForeignKey('Account', null=True, db_column=u'AccountId', blank=True) # Field name made lowercase.
    ispersonaccount = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Is Person Account', db_column=u'IsPersonAccount') # Field name made lowercase.
    lastname = models.CharField(max_length=80, verbose_name=u'Last Name', db_column=u'LastName') # Field name made lowercase.
    firstname = models.CharField(max_length=40, verbose_name=u'First Name', db_column=u'FirstName', blank=True) # Field name made lowercase.
    salutation = models.CharField(blank=True, max_length=40, verbose_name=u'Salutation', db_column=u'Salutation', choices=[(u'Mr.', u'Mr.'), (u'Ms.', u'Ms.'), (u'Mrs.', u'Mrs.'), (u'Dr.', u'Dr.'), (u'Prof.', u'Prof.')]) # Field name made lowercase.
    name = models.CharField(max_length=121, verbose_name=u'Full Name', sf_read_only=models.READ_ONLY, db_column=u'Name') # Field name made lowercase.
    recordtypeid = models.ForeignKey('Recordtype', null=True, db_column=u'RecordTypeId', blank=True) # Field name made lowercase.
    otherstreet = models.TextField(verbose_name=u'Other Street', db_column=u'OtherStreet', blank=True) # Field name made lowercase.
    othercity = models.CharField(max_length=40, verbose_name=u'Other City', db_column=u'OtherCity', blank=True) # Field name made lowercase.
    otherstate = models.CharField(max_length=80, verbose_name=u'Other State/Province', db_column=u'OtherState', blank=True) # Field name made lowercase.
    otherpostalcode = models.CharField(max_length=20, verbose_name=u'Other Zip/Postal Code', db_column=u'OtherPostalCode', blank=True) # Field name made lowercase.
    othercountry = models.CharField(max_length=80, verbose_name=u'Other Country', db_column=u'OtherCountry', blank=True) # Field name made lowercase.
    otherlatitude = models.DecimalField(db_column=u'OtherLatitude', decimal_places=15, max_digits=18, blank=True, null=True, verbose_name=u'Other Latitude') # Field name made lowercase.
    otherlongitude = models.DecimalField(db_column=u'OtherLongitude', decimal_places=15, max_digits=18, blank=True, null=True, verbose_name=u'Other Longitude') # Field name made lowercase.
    otheraddress = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Other Address', db_column=u'OtherAddress', blank=True) # Field name made lowercase. This field type is a guess.
    mailingstreet = models.TextField(verbose_name=u'Mailing Street', db_column=u'MailingStreet', blank=True) # Field name made lowercase.
    mailingcity = models.CharField(max_length=40, verbose_name=u'Mailing City', db_column=u'MailingCity', blank=True) # Field name made lowercase.
    mailingstate = models.CharField(max_length=80, verbose_name=u'Mailing State/Province', db_column=u'MailingState', blank=True) # Field name made lowercase.
    mailingpostalcode = models.CharField(max_length=20, verbose_name=u'Mailing Zip/Postal Code', db_column=u'MailingPostalCode', blank=True) # Field name made lowercase.
    mailingcountry = models.CharField(max_length=80, verbose_name=u'Mailing Country', db_column=u'MailingCountry', blank=True) # Field name made lowercase.
    mailinglatitude = models.DecimalField(db_column=u'MailingLatitude', decimal_places=15, max_digits=18, blank=True, null=True, verbose_name=u'Mailing Latitude') # Field name made lowercase.
    mailinglongitude = models.DecimalField(db_column=u'MailingLongitude', decimal_places=15, max_digits=18, blank=True, null=True, verbose_name=u'Mailing Longitude') # Field name made lowercase.
    mailingaddress = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Mailing Address', db_column=u'MailingAddress', blank=True) # Field name made lowercase. This field type is a guess.
    phone = models.CharField(max_length=40, verbose_name=u'Business Phone', db_column=u'Phone', blank=True) # Field name made lowercase.
    fax = models.CharField(max_length=40, verbose_name=u'Business Fax', db_column=u'Fax', blank=True) # Field name made lowercase.
    mobilephone = models.CharField(max_length=40, verbose_name=u'Mobile Phone', db_column=u'MobilePhone', blank=True) # Field name made lowercase.
    homephone = models.CharField(max_length=40, verbose_name=u'Home Phone', db_column=u'HomePhone', blank=True) # Field name made lowercase.
    otherphone = models.CharField(max_length=40, verbose_name=u'Other Phone', db_column=u'OtherPhone', blank=True) # Field name made lowercase.
    assistantphone = models.CharField(max_length=40, verbose_name=u'Asst. Phone', db_column=u'AssistantPhone', blank=True) # Field name made lowercase.
    reportstoid = models.ForeignKey('self', null=True, db_column=u'ReportsToId', blank=True) # Field name made lowercase.
    email = models.EmailField(null=True, verbose_name=u'Email', db_column=u'Email', blank=True) # Field name made lowercase.
    title = models.CharField(max_length=128, verbose_name=u'Title', db_column=u'Title', blank=True) # Field name made lowercase.
    department = models.CharField(max_length=80, verbose_name=u'Department', db_column=u'Department', blank=True) # Field name made lowercase.
    assistantname = models.CharField(max_length=40, verbose_name=u"Assistant's Name", db_column=u'AssistantName', blank=True) # Field name made lowercase.
    leadsource = models.CharField(blank=True, max_length=40, verbose_name=u'Lead Source', db_column=u'LeadSource', choices=[(u'Advertisement', u'Advertisement'), (u'Employee Referral', u'Employee Referral'), (u'External Referral', u'External Referral'), (u'Partner', u'Partner'), (u'Public Relations', u'Public Relations'), (u'Seminar - Internal', u'Seminar - Internal'), (u'Seminar - Partner', u'Seminar - Partner'), (u'Trade Show', u'Trade Show'), (u'Web', u'Web'), (u'Word of mouth', u'Word of mouth'), (u'Other', u'Other'), (u'Call In', u'Call In'), (u'Walk In', u'Walk In'), (u'Online', u'Online'), (u'Administrative Upload', u'Administrative Upload')]) # Field name made lowercase.
    birthdate = models.DateField(null=True, verbose_name=u'Birthdate', db_column=u'Birthdate', blank=True) # Field name made lowercase.
    description = models.TextField(verbose_name=u'Contact Description', db_column=u'Description', blank=True) # Field name made lowercase.
    ownerid = models.ForeignKey('User', db_column=u'OwnerId') # Field name made lowercase.
    hasoptedoutofemail = models.BooleanField(verbose_name=u'Email Opt Out', db_column=u'HasOptedOutOfEmail') # Field name made lowercase.
    hasoptedoutoffax = models.BooleanField(verbose_name=u'Fax Opt Out', db_column=u'HasOptedOutOfFax') # Field name made lowercase.
    donotcall = models.BooleanField(verbose_name=u'Do Not Call', db_column=u'DoNotCall') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    lastactivitydate = models.DateField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Activity', db_column=u'LastActivityDate', blank=True) # Field name made lowercase.
    lastcurequestdate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Stay-in-Touch Request Date', db_column=u'LastCURequestDate', blank=True) # Field name made lowercase.
    lastcuupdatedate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Stay-in-Touch Save Date', db_column=u'LastCUUpdateDate', blank=True) # Field name made lowercase.
    lastvieweddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Viewed Date', db_column=u'LastViewedDate', blank=True) # Field name made lowercase.
    lastreferenceddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Referenced Date', db_column=u'LastReferencedDate', blank=True) # Field name made lowercase.
    emailbouncedreason = models.CharField(max_length=255, verbose_name=u'Email Bounced Reason', db_column=u'EmailBouncedReason', blank=True) # Field name made lowercase.
    emailbounceddate = models.DateTimeField(null=True, verbose_name=u'Email Bounced Date', db_column=u'EmailBouncedDate', blank=True) # Field name made lowercase.
    isemailbounced = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Is Email Bounced', db_column=u'IsEmailBounced') # Field name made lowercase.
    photourl = models.URLField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Photo URL', db_column=u'PhotoUrl', blank=True) # Field name made lowercase.
    jigsaw = models.CharField(max_length=20, verbose_name=u'Data.com Key', db_column=u'Jigsaw', blank=True) # Field name made lowercase.
    jigsawcontactid = models.CharField(max_length=20, verbose_name=u'Jigsaw Contact ID', sf_read_only=models.READ_ONLY, db_column=u'JigsawContactId', blank=True) # Field name made lowercase.
    annual_mileage__c = models.DecimalField(db_column=u'Annual_Mileage__c', decimal_places=0, max_digits=18, blank=True, null=True, verbose_name=u'Annual Mileage') # Field name made lowercase.
    at_this_address_since__c = models.DateField(null=True, verbose_name=u'At This Address Since', db_column=u'At_This_Address_Since__c', blank=True) # Field name made lowercase.
    car_make__c = models.CharField(max_length=255, verbose_name=u'Car Make', db_column=u'Car_Make__c', blank=True) # Field name made lowercase.
    car_model__c = models.CharField(max_length=255, verbose_name=u'Car Model', db_column=u'Car_Model__c', blank=True) # Field name made lowercase.
    car_year__c = models.CharField(max_length=4, verbose_name=u'Car Year', db_column=u'Car_Year__c', blank=True) # Field name made lowercase.
    current_mileage__c = models.DecimalField(db_column=u'Current_Mileage__c', decimal_places=0, max_digits=18, blank=True, null=True, verbose_name=u'Current Mileage') # Field name made lowercase.
    education__c = models.CharField(blank=True, max_length=255, verbose_name=u'Education', db_column=u'Education__c', choices=[(u'Some or No High School', u'Some or No High School'), (u'High School Diploma', u'High School Diploma'), (u'GED', u'GED'), (u'Some College', u'Some College'), (u'Associate Degree', u'Associate Degree'), (u'Bachelors Degree', u'Bachelors Degree'), (u'Masters Degree', u'Masters Degree'), (u'Doctorate Degree', u'Doctorate Degree'), (u'Other Professional Degree', u'Other Professional Degree'), (u'Other Non Professional Degree', u'Other Non Professional Degree'), (u'Trade/Vocational School', u'Trade/Vocational School')]) # Field name made lowercase.
    gender__c = models.CharField(blank=True, max_length=255, verbose_name=u'Gender', db_column=u'Gender__c', choices=[(u'Female', u'Female'), (u'Male', u'Male')]) # Field name made lowercase.
    driver_s_license_number__c = models.CharField(max_length=255, verbose_name=u"Driver's License Number", db_column=u'Driver_s_License_Number__c', blank=True) # Field name made lowercase.
    driver_s_license_state__c = models.CharField(blank=True, max_length=255, verbose_name=u"Driver's License State", db_column=u'Driver_s_License_State__c', choices=[(u'AK', u'AK'), (u'AL', u'AL'), (u'AR', u'AR'), (u'AZ', u'AZ'), (u'CA', u'CA'), (u'CO', u'CO'), (u'CT', u'CT'), (u'DC', u'DC'), (u'DE', u'DE'), (u'FL', u'FL'), (u'GA', u'GA'), (u'HI', u'HI'), (u'IA', u'IA'), (u'ID', u'ID'), (u'IL', u'IL'), (u'IN', u'IN'), (u'KS', u'KS'), (u'KY', u'KY'), (u'LA', u'LA'), (u'MA', u'MA'), (u'MD', u'MD'), (u'ME', u'ME'), (u'MI', u'MI'), (u'MN', u'MN'), (u'MO', u'MO'), (u'MS', u'MS'), (u'MT', u'MT'), (u'NC', u'NC'), (u'ND', u'ND'), (u'NE', u'NE'), (u'NJ', u'NJ'), (u'NM', u'NM'), (u'NV', u'NV'), (u'NY', u'NY'), (u'OH', u'OH'), (u'OK', u'OK'), (u'OR', u'OR'), (u'PA', u'PA'), (u'RI', u'RI'), (u'SC', u'SC'), (u'SD', u'SD'), (u'TN', u'TN'), (u'TX', u'TX'), (u'UT', u'UT'), (u'VA', u'VA'), (u'VT', u'VT'), (u'WA', u'WA'), (u'WI', u'WI'), (u'WV', u'WV'), (u'WY', u'WY')]) # Field name made lowercase.
    marital_status__c = models.CharField(blank=True, max_length=255, verbose_name=u'Marital Status', db_column=u'Marital_Status__c', choices=[(u'Single', u'Single'), (u'Married', u'Married'), (u'Divorced', u'Divorced'), (u'Separated', u'Separated'), (u'Widowed', u'Widowed')]) # Field name made lowercase.
    occupation__c = models.CharField(max_length=255, verbose_name=u'Occupation', db_column=u'Occupation__c', blank=True) # Field name made lowercase.
    owns_residence__c = models.CharField(blank=True, max_length=255, verbose_name=u'Owns Residence', db_column=u'Owns_Residence__c', choices=[(u'Yes', u'Yes'), (u'No', u'No')]) # Field name made lowercase.
    preferred_method_of_contact__c = models.CharField(blank=True, max_length=255, verbose_name=u'Preferred Method of Contact', db_column=u'Preferred_Method_of_Contact__c', choices=[(u'Phone', u'Phone'), (u'Email', u'Email')]) # Field name made lowercase.
    property_type__c = models.CharField(blank=True, max_length=255, verbose_name=u'Property Type', db_column=u'Property_Type__c', choices=[(u'Single Family Home', u'Single Family Home'), (u'Apartment', u'Apartment'), (u'Duplex', u'Duplex'), (u'Condominium', u'Condominium'), (u'Town Home', u'Town Home'), (u'Mobile Home', u'Mobile Home')]) # Field name made lowercase.
    registered_state__c = models.CharField(blank=True, max_length=255, verbose_name=u'Registered State', db_column=u'Registered_State__c', choices=[(u'AK', u'AK'), (u'AL', u'AL'), (u'AR', u'AR'), (u'AZ', u'AZ'), (u'CA', u'CA'), (u'CO', u'CO'), (u'CT', u'CT'), (u'DC', u'DC'), (u'DE', u'DE'), (u'FL', u'FL'), (u'GA', u'GA'), (u'HI', u'HI'), (u'IA', u'IA'), (u'ID', u'ID'), (u'IL', u'IL'), (u'IN', u'IN'), (u'KS', u'KS'), (u'KY', u'KY'), (u'LA', u'LA'), (u'MA', u'MA'), (u'MD', u'MD'), (u'ME', u'ME'), (u'MI', u'MI'), (u'MN', u'MN'), (u'MO', u'MO'), (u'MS', u'MS'), (u'MT', u'MT'), (u'NC', u'NC'), (u'ND', u'ND'), (u'NE', u'NE'), (u'NJ', u'NJ'), (u'NM', u'NM'), (u'NV', u'NV'), (u'NY', u'NY'), (u'OH', u'OH'), (u'OK', u'OK'), (u'OR', u'OR'), (u'PA', u'PA'), (u'RI', u'RI'), (u'SC', u'SC'), (u'SD', u'SD'), (u'TN', u'TN'), (u'TX', u'TX'), (u'UT', u'UT'), (u'VA', u'VA'), (u'VT', u'VT'), (u'WA', u'WA'), (u'WI', u'WI'), (u'WV', u'WV'), (u'WY', u'WY')]) # Field name made lowercase.
    residence_city__c = models.CharField(max_length=200, verbose_name=u'Residence City', db_column=u'Residence_City__c', blank=True) # Field name made lowercase.
    residence_country__c = models.CharField(max_length=255, verbose_name=u'Residence Country', db_column=u'Residence_Country__c', blank=True) # Field name made lowercase.
    residence_state__c = models.CharField(blank=True, max_length=255, verbose_name=u'Residence State', db_column=u'Residence_State__c', choices=[(u'AK', u'AK'), (u'AL', u'AL'), (u'AR', u'AR'), (u'AZ', u'AZ'), (u'CA', u'CA'), (u'CO', u'CO'), (u'CT', u'CT'), (u'DC', u'DC'), (u'DE', u'DE'), (u'FL', u'FL'), (u'GA', u'GA'), (u'HI', u'HI'), (u'IA', u'IA'), (u'ID', u'ID'), (u'IL', u'IL'), (u'IN', u'IN'), (u'KS', u'KS'), (u'KY', u'KY'), (u'LA', u'LA'), (u'MA', u'MA'), (u'MD', u'MD'), (u'ME', u'ME'), (u'MI', u'MI'), (u'MN', u'MN'), (u'MO', u'MO'), (u'MS', u'MS'), (u'MT', u'MT'), (u'NC', u'NC'), (u'ND', u'ND'), (u'NE', u'NE'), (u'NJ', u'NJ'), (u'NM', u'NM'), (u'NV', u'NV'), (u'NY', u'NY'), (u'OH', u'OH'), (u'OK', u'OK'), (u'OR', u'OR'), (u'PA', u'PA'), (u'RI', u'RI'), (u'SC', u'SC'), (u'SD', u'SD'), (u'TN', u'TN'), (u'TX', u'TX'), (u'UT', u'UT'), (u'VA', u'VA'), (u'VT', u'VT'), (u'WA', u'WA'), (u'WI', u'WI'), (u'WV', u'WV'), (u'WY', u'WY')]) # Field name made lowercase.
    residence_street__c = models.CharField(max_length=255, verbose_name=u'Residence Street', db_column=u'Residence_Street__c', blank=True) # Field name made lowercase.
    residence_zip_postal_code__c = models.CharField(max_length=10, verbose_name=u'Residence Zip/Postal Code', db_column=u'Residence_Zip_Postal_Code__c', blank=True) # Field name made lowercase.
    spouse__c = models.CharField(max_length=255, verbose_name=u'Spouse', db_column=u'Spouse__c', blank=True) # Field name made lowercase.
    vin__c = models.CharField(max_length=255, verbose_name=u'VIN', db_column=u'VIN__c', blank=True) # Field name made lowercase.
    date_of_birth__c = models.DateField(null=True, verbose_name=u'Date of Birth', db_column=u'Date_of_Birth__c', blank=True) # Field name made lowercase.
    provider_npi__c = models.CharField(help_text=u'Providers NPI number.', max_length=30, verbose_name=u'Provider NPI', db_column=u'Provider_NPI__c', blank=True) # Field name made lowercase.
    provider_degree__c = models.CharField(help_text=u'The degree regarding the provider.', max_length=10, verbose_name=u'Provider Degree', db_column=u'Provider_Degree__c', blank=True) # Field name made lowercase.
    provider_specialty_code__c = models.CharField(help_text=u'Provider specialty code, see Provider Specialty Name for more context.', max_length=10, verbose_name=u'Provider Specialty Code', db_column=u'Provider_Specialty_Code__c', blank=True) # Field name made lowercase.
    provider_group_npi__c = models.CharField(help_text=u'Provider group npi number.', max_length=20, verbose_name=u'Provider Group NPI', db_column=u'Provider_Group_NPI__c', blank=True) # Field name made lowercase.
    migrated__c = models.BooleanField(verbose_name=u'Migrated', db_column=u'Migrated__c') # Field name made lowercase.
    original_object_id__c = models.CharField(max_length=18, verbose_name=u'Original Object ID', db_column=u'Original_Object_ID__c', blank=True) # Field name made lowercase.
    affiliate_id__c = models.CharField(help_text=u'Affiliate ID for the broker or agent identification.', max_length=30, verbose_name=u'Affiliate ID', db_column=u'Affiliate_ID__c', blank=True) # Field name made lowercase.
    date_of_hire__c = models.DateField(null=True, verbose_name=u'Date of Hire', db_column=u'Date_of_Hire__c', blank=True) # Field name made lowercase.
    policy_member__c = models.BooleanField(verbose_name=u'Policy Member', db_column=u'Policy_Member__c') # Field name made lowercase.
    spouse_gender__c = models.CharField(blank=True, max_length=255, verbose_name=u'Spouse Gender', db_column=u'Spouse_Gender__c', choices=[(u'Male', u'Male'), (u'Female', u'Female')]) # Field name made lowercase.
    spouse_date_of_birth__c = models.DateField(null=True, verbose_name=u'Spouse Date of Birth', db_column=u'Spouse_Date_of_Birth__c', blank=True) # Field name made lowercase.
    number_of_children__c = models.DecimalField(db_column=u'Number_of_Children__c', decimal_places=0, max_digits=2, blank=True, null=True, verbose_name=u'Number of Children') # Field name made lowercase.
    not_included_on_policy_because__c = models.CharField(blank=True, max_length=255, verbose_name=u'Not Included on Policy Because', db_column=u'Not_Included_on_Policy_Because__c', choices=[(u'Waived', u'Waived'), (u'Term', u'Term'), (u'Other Coverage', u'Other Coverage')]) # Field name made lowercase.
    provider_specialty_name__c = models.CharField(db_column=u'Provider_Specialty_Name__c', max_length=1300, blank=True, help_text=u'Provider Specialty name based on code value from Provider Specialty Code field.', sf_read_only=models.READ_ONLY, verbose_name=u'Provider Specialty Name') # Field name made lowercase.
    facility_name__c = models.CharField(help_text=u'Name of facility for provider contacts.', max_length=100, verbose_name=u'Facility Name', db_column=u'Facility_Name__c', blank=True) # Field name made lowercase.
    facility_street_address__c = models.CharField(help_text=u'Street address for the facility of the provider contact', max_length=100, verbose_name=u'Facility Street Address', db_column=u'Facility_Street_Address__c', blank=True) # Field name made lowercase.
    facility_city__c = models.CharField(help_text=u'City for the facility of the provider contact.', max_length=50, verbose_name=u'Facility City', db_column=u'Facility_City__c', blank=True) # Field name made lowercase.
    facility_state__c = models.CharField(help_text=u'State where the facility is located for the provider contact.', max_length=2, verbose_name=u'Facility State', db_column=u'Facility_State__c', blank=True) # Field name made lowercase.
    facility_postal_code__c = models.CharField(help_text=u'Postal code for the facility location regarding the provider contact.', max_length=15, verbose_name=u'Facility Postal Code', db_column=u'Facility_Postal_Code__c', blank=True) # Field name made lowercase.
    associated_plan__c = models.CharField(blank=True, max_length=255, verbose_name=u'Associated Plan', db_column=u'Associated_Plan__c', choices=[(u'Frontier', u'Frontier'), (u'Neighborhood VIP', u'Neighborhood VIP'), (u'Northern', u'Northern'), (u'Southern Simple', u'Southern Simple'), (u'Star', u'Star')]) # Field name made lowercase.
    cell_carrier__c = models.CharField(blank=True, max_length=255, verbose_name=u'Cell Carrier', db_column=u'Cell_Carrier__c', choices=[(u'AT&T', u'AT&T'), (u'Sprint', u'Sprint'), (u'T-Mobile', u'T-Mobile'), (u'Verizon', u'Verizon'), (u'Virgin Mobile', u'Virgin Mobile'), (u'Cingular', u'Cingular'), (u'Alltel', u'Alltel'), (u'Nextel', u'Nextel'), (u'Boost Mobile', u'Boost Mobile'), (u'Quest Wireless', u'Quest Wireless')]) # Field name made lowercase.
    email_to_text_address__c = models.CharField(max_length=1300, verbose_name=u'Email to Text Address', sf_read_only=models.READ_ONLY, db_column=u'Email_to_Text_Address__c', blank=True) # Field name made lowercase.
    mkto2__acquisition_date__c = models.DateTimeField(null=True, verbose_name=u'Acquisition Date', db_column=u'mkto2__Acquisition_Date__c', blank=True) # Field name made lowercase.
    mkto2__acquisition_program_id__c = models.DecimalField(db_column=u'mkto2__Acquisition_Program_Id__c', decimal_places=0, max_digits=18, blank=True, null=True, verbose_name=u'Acquisition Program Id') # Field name made lowercase.
    mkto2__acquisition_program__c = models.CharField(max_length=255, verbose_name=u'Acquisition Program', db_column=u'mkto2__Acquisition_Program__c', blank=True) # Field name made lowercase.
    mkto2__inferred_city__c = models.CharField(max_length=255, verbose_name=u'Inferred City', db_column=u'mkto2__Inferred_City__c', blank=True) # Field name made lowercase.
    mkto2__inferred_company__c = models.CharField(max_length=255, verbose_name=u'Inferred Company', db_column=u'mkto2__Inferred_Company__c', blank=True) # Field name made lowercase.
    mkto2__inferred_country__c = models.CharField(max_length=255, verbose_name=u'Inferred Country', db_column=u'mkto2__Inferred_Country__c', blank=True) # Field name made lowercase.
    mkto2__inferred_metropolitan_area__c = models.CharField(max_length=255, verbose_name=u'Inferred Metropolitan Area', db_column=u'mkto2__Inferred_Metropolitan_Area__c', blank=True) # Field name made lowercase.
    mkto2__inferred_phone_area_code__c = models.CharField(max_length=255, verbose_name=u'Inferred Phone Area Code', db_column=u'mkto2__Inferred_Phone_Area_Code__c', blank=True) # Field name made lowercase.
    mkto2__inferred_postal_code__c = models.CharField(max_length=255, verbose_name=u'Inferred Postal Code', db_column=u'mkto2__Inferred_Postal_Code__c', blank=True) # Field name made lowercase.
    mkto2__inferred_state_region__c = models.CharField(max_length=255, verbose_name=u'Inferred State Region', db_column=u'mkto2__Inferred_State_Region__c', blank=True) # Field name made lowercase.
    mkto2__lead_score__c = models.DecimalField(db_column=u'mkto2__Lead_Score__c', decimal_places=0, max_digits=18, blank=True, null=True, verbose_name=u'Lead Score') # Field name made lowercase.
    mkto2__original_referrer__c = models.CharField(max_length=255, verbose_name=u'Original Referrer', db_column=u'mkto2__Original_Referrer__c', blank=True) # Field name made lowercase.
    mkto2__original_search_engine__c = models.CharField(max_length=255, verbose_name=u'Original Search Engine', db_column=u'mkto2__Original_Search_Engine__c', blank=True) # Field name made lowercase.
    mkto2__original_search_phrase__c = models.CharField(max_length=255, verbose_name=u'Original Search Phrase', db_column=u'mkto2__Original_Search_Phrase__c', blank=True) # Field name made lowercase.
    mkto2__original_source_info__c = models.TextField(verbose_name=u'Original Source Info', db_column=u'mkto2__Original_Source_Info__c', blank=True) # Field name made lowercase.
    mkto2__original_source_type__c = models.CharField(max_length=255, verbose_name=u'Original Source Type', db_column=u'mkto2__Original_Source_Type__c', blank=True) # Field name made lowercase.
    mkto_si__hidedate__c = models.DateField(null=True, verbose_name=u'Hide Date', db_column=u'mkto_si__HideDate__c', blank=True) # Field name made lowercase.
    mkto_si__last_interesting_moment_date__c = models.DateTimeField(null=True, verbose_name=u'Last Interesting Moment Date', db_column=u'mkto_si__Last_Interesting_Moment_Date__c', blank=True) # Field name made lowercase.
    mkto_si__last_interesting_moment_desc__c = models.TextField(verbose_name=u'Last Interesting Moment Desc', db_column=u'mkto_si__Last_Interesting_Moment_Desc__c', blank=True) # Field name made lowercase.
    mkto_si__last_interesting_moment_source__c = models.CharField(max_length=100, verbose_name=u'Last Interesting Moment Source', db_column=u'mkto_si__Last_Interesting_Moment_Source__c', blank=True) # Field name made lowercase.
    mkto_si__last_interesting_moment_type__c = models.CharField(max_length=100, verbose_name=u'Last Interesting Moment Type', db_column=u'mkto_si__Last_Interesting_Moment_Type__c', blank=True) # Field name made lowercase.
    mkto_si__last_interesting_moment__c = models.CharField(max_length=1300, verbose_name=u'Last Interesting Moment', sf_read_only=models.READ_ONLY, db_column=u'mkto_si__Last_Interesting_Moment__c', blank=True) # Field name made lowercase.
    mkto_si__priority__c = models.DecimalField(db_column=u'mkto_si__Priority__c', decimal_places=0, max_digits=18, blank=True, null=True, verbose_name=u'Priority') # Field name made lowercase.
    mkto_si__relative_score_value__c = models.DecimalField(db_column=u'mkto_si__Relative_Score_Value__c', decimal_places=0, max_digits=4, blank=True, null=True, verbose_name=u'Relative Score Value') # Field name made lowercase.
    mkto_si__relative_score__c = models.CharField(max_length=1300, verbose_name=u'Relative Score', sf_read_only=models.READ_ONLY, db_column=u'mkto_si__Relative_Score__c', blank=True) # Field name made lowercase.
    mkto_si__sales_insight__c = models.CharField(max_length=1300, verbose_name=u'Sales Insight', sf_read_only=models.READ_ONLY, db_column=u'mkto_si__Sales_Insight__c', blank=True) # Field name made lowercase.
    mkto_si__urgency_value__c = models.DecimalField(db_column=u'mkto_si__Urgency_Value__c', decimal_places=0, max_digits=4, blank=True, null=True, verbose_name=u'Urgency Value') # Field name made lowercase.
    mkto_si__urgency__c = models.CharField(max_length=1300, verbose_name=u'Urgency', sf_read_only=models.READ_ONLY, db_column=u'mkto_si__Urgency__c', blank=True) # Field name made lowercase.
    mkto_si__view_in_marketo__c = models.CharField(max_length=1300, verbose_name=u'View in Marketo', sf_read_only=models.READ_ONLY, db_column=u'mkto_si__View_in_Marketo__c', blank=True) # Field name made lowercase.
    broker_status__c = models.CharField(blank=True, max_length=255, verbose_name=u'Broker Status', db_column=u'Broker_Status__c', choices=[(u'Active', u'Active'), (u'Inactive', u'Inactive')]) # Field name made lowercase.
    memberid__c = models.CharField(max_length=50, verbose_name=u'Member Id', db_column=u'MemberId__c', blank=True) # Field name made lowercase.
    billingaddress__c = models.CharField(max_length=1300, verbose_name=u'Billing Address', sf_read_only=models.READ_ONLY, db_column=u'BillingAddress__c', blank=True) # Field name made lowercase.
    networks_associated_with__c = models.CharField(db_column=u'Networks_Associated_With__c', choices=[(u'Star Network - Tier 1', u'Star Network - Tier 1'), (u'Star Network - Tier 2', u'Star Network - Tier 2'), (u'Neighborhood VIP - Tier 1', u'Neighborhood VIP - Tier 1'), (u'Neighborhood VIP - Tier 2', u'Neighborhood VIP - Tier 2'), (u'Southern Simple', u'Southern Simple'), (u'Northern Simple', u'Northern Simple'), (u'Frontier Simple', u'Frontier Simple')], max_length=4099, blank=True, help_text=u'Indication of which networks the provider is currently associated with.', verbose_name=u'Networks Associated With') # Field name made lowercase.
    conownedby_user__c = models.DecimalField(sf_read_only=models.READ_ONLY, decimal_places=0, max_digits=18, db_column=u'ConOwnedBy_User__c', blank=True, help_text=u'Used to configure Dashboards and Reports that are tailored to the Logged in user', null=True, verbose_name=u'ConOwnedBy$User') # Field name made lowercase.
    provider_status__c = models.CharField(blank=True, max_length=255, verbose_name=u'Provider Status', db_column=u'Provider_Status__c', choices=[(u'Active', u'Active'), (u'Inactive', u'Inactive'), (u'Not Yet Contacted', u'Not Yet Contacted')]) # Field name made lowercase.
    ssn__c = models.CharField(max_length=15, verbose_name=u'ssn', blank=True)
    auth_code__c = models.CharField(max_length=25, verbose_name=u'Auth code', blank=True)
    benefit_status__c = models.CharField(max_length=35, verbose_name=u'Benefit status', blank=True)
    pcp__c = models.CharField(max_length=25, verbose_name=u'pcp', blank=True)
    eligible_effective_date__c = models.DateTimeField(null=True, verbose_name=u'Eligible effective date', blank=True)
    eligible_end_date__c = models.DateTimeField(null=True, verbose_name=u'Eligible end date', db_column=u'Eligible_end_date__c', blank=True) # Field name made lowercase.
    person_notes__c = models.TextField(verbose_name=u'Person notes', blank=True)
    broker_number__c = models.CharField(max_length=15, verbose_name=u'Broker number', blank=True)
    conversion_comments__c = models.TextField(verbose_name=u'Conversion Comments', db_column=u'Conversion_Comments__c', blank=True) # Field name made lowercase.
    deduplication_comments__c = models.TextField(verbose_name=u'Deduplication Comments', db_column=u'Deduplication_Comments__c', blank=True) # Field name made lowercase.
    tobacco_user__c = models.CharField(db_column=u'Tobacco_User__c', choices=[(u'no', u'no'), (u'yes', u'yes')], max_length=255, blank=True, help_text=u'Select yes if the person is a tobacco user.', verbose_name=u'Tobacco User') # Field name made lowercase.
    handicapped__c = models.CharField(db_column=u'Handicapped__c', choices=[(u'no', u'no'), (u'yes', u'yes')], max_length=255, blank=True, help_text=u'Select yes if this person is handicapped.', verbose_name=u'Handicapped') # Field name made lowercase.
    currently_a_student__c = models.CharField(db_column=u'Currently_a_Student__c', choices=[(u'no', u'no'), (u'yes', u'yes')], max_length=255, blank=True, help_text=u'Select yes if this person is currently a student.', verbose_name=u'Currently a Student') # Field name made lowercase.
    height_ft__c = models.DecimalField(db_column=u'Height_ft__c', decimal_places=0, max_digits=1, blank=True, null=True, verbose_name=u'Height ft') # Field name made lowercase.
    relationship__c = models.CharField(blank=True, max_length=255, verbose_name=u'Relationship', choices=[(u'Employee', u'Employee'), (u'Spouse', u'Spouse'), (u'Child', u'Child'), (u'LifePartner', u'LifePartner')])
    height_in__c = models.DecimalField(null=True, verbose_name=u'height in', max_digits=2, decimal_places=0, blank=True)
    weight_lb__c = models.DecimalField(null=True, verbose_name=u'weight lb', max_digits=3, decimal_places=0, blank=True)
    bmi__c = models.DecimalField(db_column=u'BMI__c', decimal_places=2, max_digits=4, blank=True, null=True, verbose_name=u'BMI') # Field name made lowercase.
    medications__c = models.CharField(max_length=255, verbose_name=u'medications', blank=True)
    medical_conditions__c = models.TextField(verbose_name=u'Medical Conditions', db_column=u'Medical_Conditions__c', blank=True) # Field name made lowercase.
    tobacco_products__c = models.CharField(max_length=255, verbose_name=u'Tobacco Products', db_column=u'Tobacco_Products__c', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Contact'
        verbose_name = 'Contact'
        verbose_name_plural = 'Contacts'
        # keyPrefix = '003'

class Contactfeed(models.Model):
    parentid = models.ForeignKey('Contact', db_column=u'ParentId') # Field name made lowercase.
    type = models.CharField(db_column=u'Type', choices=[(u'TrackedChange', u'Tracked Change'), (u'UserStatus', u'User Status'), (u'TextPost', u'Text Post'), (u'AdvancedTextPost', u'Advanced Text Post'), (u'LinkPost', u'Link Post'), (u'ContentPost', u'Content Post'), (u'PollPost', u'Poll'), (u'RypplePost', u'Work.com Thanks'), (u'ProfileSkillPost', u'Profile Skill Post'), (u'DashboardComponentSnapshot', u'Dashboard Component Snapshot'), (u'ApprovalPost', u'Approval Post'), (u'CaseCommentPost', u'Case Comment Feed'), (u'ReplyPost', u'Reply Post'), (u'EmailMessageEvent', u'Email Message Feed'), (u'CallLogPost', u'Call Log Feed'), (u'ChangeStatusPost', u'Change Status Feed'), (u'AttachArticleEvent', u'Attached Article'), (u'MilestoneEvent', u'Milestone Event'), (u'ActivityEvent', u'Activity Change'), (u'ChatTranscriptPost', u'Chat Transcript Post'), (u'CollaborationGroupCreated', u'Collaboration Group Created'), (u'CollaborationGroupUnarchived', u'Collaboration Group Reactivated'), (u'SocialPost', u'Social Post'), (u'QuestionPost', u'Question Post'), (u'FacebookPost', u'Facebook Post'), (u'BasicTemplateFeedItem', u'Basic Template Post'), (u'CreateRecordEvent', u'Created Record'), (u'CanvasPost', u'Canvas'), (u'AnnouncementPost', u'a')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Feed Item Type') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    commentcount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Comment Count', db_column=u'CommentCount') # Field name made lowercase.
    likecount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Like Count', db_column=u'LikeCount') # Field name made lowercase.
    title = models.CharField(max_length=255, verbose_name=u'Title', sf_read_only=models.READ_ONLY, db_column=u'Title', blank=True) # Field name made lowercase.
    body = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Body', db_column=u'Body', blank=True) # Field name made lowercase.
    linkurl = models.URLField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Link Url', db_column=u'LinkUrl', blank=True) # Field name made lowercase.
    relatedrecordid = models.ForeignKey('Contentversion', null=True, db_column=u'RelatedRecordId', blank=True) # Field name made lowercase.
    contentdata = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Content Data', db_column=u'ContentData', blank=True) # Field name made lowercase.
    contentfilename = models.CharField(max_length=255, verbose_name=u'Content File Name', sf_read_only=models.READ_ONLY, db_column=u'ContentFileName', blank=True) # Field name made lowercase.
    contentdescription = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Content Description', db_column=u'ContentDescription', blank=True) # Field name made lowercase.
    contenttype = models.CharField(max_length=120, verbose_name=u'Content File Type', sf_read_only=models.READ_ONLY, db_column=u'ContentType', blank=True) # Field name made lowercase.
    contentsize = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Content Size', db_column=u'ContentSize', blank=True) # Field name made lowercase.
    insertedbyid = models.ForeignKey('User', null=True, db_column=u'InsertedById', blank=True) # Field name made lowercase.
    networkscope = models.CharField(db_column=u'NetworkScope', choices=[(u'AllNetworks', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Network Scope') # Field name made lowercase.
    visibility = models.CharField(db_column=u'Visibility', choices=[(u'AllUsers', None), (u'InternalUsers', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Visibility') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'ContactFeed'
        verbose_name = 'Contact Feed'
        verbose_name_plural = 'Contact Feed'
        # keyPrefix = 'None'

class Contacthistory(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    contactid = models.ForeignKey('Contact', db_column=u'ContactId') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    field = models.CharField(max_length=255, verbose_name=u'Changed Field', sf_read_only=models.READ_ONLY, db_column=u'Field', choices=[(u'Account', None), (u'Affiliate_ID__c', None), (u'Annual_Mileage__c', None), (u'AssistantName', None), (u'AssistantPhone', None), (u'Associated_Plan__c', None), (u'At_This_Address_Since__c', None), (u'auth_code__c', None), (u'benefit_status__c', None), (u'Birthdate', None), (u'BMI__c', None), (u'broker_number__c', None), (u'Broker_Status__c', None), (u'Car_Make__c', None), (u'Car_Model__c', None), (u'Car_Year__c', None), (u'Cell_Carrier__c', None), (u'contactMerged', u'Contact Merged'), (u'Conversion_Comments__c', None), (u'created', u'Created.'), (u'contactCreatedFromLead', u'Created by lead convert'), (u'Current_Mileage__c', None), (u'Currently_a_Student__c', None), (u'Date_of_Birth__c', None), (u'Date_of_Hire__c', None), (u'Deduplication_Comments__c', None), (u'Department', None), (u'Description', None), (u'DoNotCall', None), (u'Driver_s_License_Number__c', None), (u'Driver_s_License_State__c', None), (u'Education__c', None), (u'eligible_effective_date__c', None), (u'Eligible_end_date__c', None), (u'Email', None), (u'EmailBouncedDate', None), (u'EmailBouncedReason', None), (u'Facility_City__c', None), (u'Facility_Name__c', None), (u'Facility_Postal_Code__c', None), (u'Facility_State__c', None), (u'Facility_Street_Address__c', None), (u'Fax', None), (u'feedEvent', u'Feed event'), (u'FirstName', None), (u'Gender__c', None), (u'Handicapped__c', None), (u'HasOptedOutOfEmail', None), (u'HasOptedOutOfFax', None), (u'Height_ft__c', None), (u'height_in__c', None), (u'HomePhone', None), (u'Jigsaw', None), (u'LastName', None), (u'contactUpdatedByLead', u'Lead converted to Contact'), (u'LeadSource', None), (u'MailingAddress', None), (u'MailingCity', None), (u'MailingCountry', None), (u'MailingLatitude', None), (u'MailingLongitude', None), (u'MailingPostalCode', None), (u'MailingState', None), (u'MailingStreet', None), (u'Marital_Status__c', None), (u'Medical_Conditions__c', None), (u'medications__c', None), (u'MemberId__c', None), (u'Migrated__c', None), (u'mkto_si__HideDate__c', None), (u'mkto_si__Last_Interesting_Moment_Date__c', None), (u'mkto_si__Last_Interesting_Moment_Desc__c', None), (u'mkto_si__Last_Interesting_Moment_Source__c', None), (u'mkto_si__Last_Interesting_Moment_Type__c', None), (u'mkto_si__Priority__c', None), (u'mkto_si__Relative_Score_Value__c', None), (u'mkto_si__Urgency_Value__c', None), (u'mkto2__Acquisition_Date__c', None), (u'mkto2__Acquisition_Program__c', None), (u'mkto2__Acquisition_Program_Id__c', None), (u'mkto2__Inferred_City__c', None), (u'mkto2__Inferred_Company__c', None), (u'mkto2__Inferred_Country__c', None), (u'mkto2__Inferred_Metropolitan_Area__c', None), (u'mkto2__Inferred_Phone_Area_Code__c', None), (u'mkto2__Inferred_Postal_Code__c', None), (u'mkto2__Inferred_State_Region__c', None), (u'mkto2__Lead_Score__c', None), (u'mkto2__Original_Referrer__c', None), (u'mkto2__Original_Search_Engine__c', None), (u'mkto2__Original_Search_Phrase__c', None), (u'mkto2__Original_Source_Info__c', None), (u'mkto2__Original_Source_Type__c', None), (u'MobilePhone', None), (u'Name', None), (u'Networks_Associated_With__c', None), (u'Not_Included_on_Policy_Because__c', None), (u'Number_of_Children__c', None), (u'Occupation__c', None), (u'Original_Object_ID__c', None), (u'OtherAddress', None), (u'OtherCity', None), (u'OtherCountry', None), (u'OtherLatitude', None), (u'OtherLongitude', None), (u'OtherPhone', None), (u'OtherPostalCode', None), (u'OtherState', None), (u'OtherStreet', None), (u'Owner', None), (u'ownerAccepted', u'Owner (Accepted)'), (u'ownerAssignment', u'Owner (Assignment)'), (u'Owns_Residence__c', None), (u'pcp__c', None), (u'person_notes__c', None), (u'Phone', None), (u'Policy_Member__c', None), (u'Preferred_Method_of_Contact__c', None), (u'Property_Type__c', None), (u'Provider_Degree__c', None), (u'Provider_Group_NPI__c', None), (u'Provider_NPI__c', None), (u'Provider_Specialty_Code__c', None), (u'Provider_Status__c', None), (u'locked', u'Record locked.'), (u'RecordType', None), (u'unlocked', u'Record unlocked.'), (u'Registered_State__c', None), (u'relationship__c', None), (u'ReportsTo', None), (u'Residence_City__c', None), (u'Residence_Country__c', None), (u'Residence_State__c', None), (u'Residence_Street__c', None), (u'Residence_Zip_Postal_Code__c', None), (u'Salutation', None), (u'Spouse__c', None), (u'Spouse_Date_of_Birth__c', None), (u'Spouse_Gender__c', None), (u'ssn__c', None), (u'Title', None), (u'Tobacco_Products__c', None), (u'Tobacco_User__c', None), (u'VIN__c', None), (u'weight_lb__c', None)]) # Field name made lowercase.
    oldvalue = models.CharField(max_length=255, verbose_name=u'Old Value', sf_read_only=models.READ_ONLY, db_column=u'OldValue', blank=True) # Field name made lowercase.
    newvalue = models.CharField(max_length=255, verbose_name=u'New Value', sf_read_only=models.READ_ONLY, db_column=u'NewValue', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'ContactHistory'
        verbose_name = 'Contact History'
        verbose_name_plural = 'Contact History'
        # keyPrefix = 'None'

class Contactshare(models.Model):
    contactid = models.ForeignKey('Contact', db_column=u'ContactId') # Field name made lowercase.
    userorgroupid = models.ForeignKey('Group', db_column=u'UserOrGroupId') # Field name made lowercase.
    contactaccesslevel = models.CharField(max_length=40, verbose_name=u'Contact Access', sf_read_only=models.READ_ONLY, db_column=u'ContactAccessLevel', choices=[(u'Read', u'Read Only'), (u'Edit', u'Read/Write'), (u'All', u'Owner')]) # Field name made lowercase.
    rowcause = models.CharField(db_column=u'RowCause', choices=[(u'Owner', u'Owner'), (u'Manual', u'Manual Sharing'), (u'Rule', u'Sharing Rule'), (u'ImplicitChild', u'Account Sharing'), (u'ImplicitParent', u'Associated record owner or sharing'), (u'Team', u'Sales Team'), (u'Territory', u'Territory Assignment Rule'), (u'TerritoryManual', u'Territory Manual'), (u'TerritoryRule', u'Territory Sharing Rule')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Row Cause') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'ContactShare'
        verbose_name = 'Contact Share'
        verbose_name_plural = 'Contact Share'
        # keyPrefix = '03s'

class Contentdocument(models.Model):
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    isarchived = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Is Archived', db_column=u'IsArchived') # Field name made lowercase.
    archivedbyid = models.ForeignKey('User', null=True, db_column=u'ArchivedById', blank=True) # Field name made lowercase.
    archiveddate = models.DateField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Archived Date', db_column=u'ArchivedDate', blank=True) # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Is Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    ownerid = models.ForeignKey('User', db_column=u'OwnerId') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    title = models.CharField(max_length=255, verbose_name=u'Title', sf_read_only=models.READ_ONLY, db_column=u'Title') # Field name made lowercase.
    publishstatus = models.CharField(max_length=40, verbose_name=u'Publish Status', sf_read_only=models.READ_ONLY, db_column=u'PublishStatus', choices=[(u'U', u'Upload Interrupted'), (u'P', u'Public'), (u'R', u'Personal Library')]) # Field name made lowercase.
    latestpublishedversionid = models.ForeignKey('Contentversion', null=True, db_column=u'LatestPublishedVersionId', blank=True) # Field name made lowercase.
    lastvieweddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Viewed Date', db_column=u'LastViewedDate', blank=True) # Field name made lowercase.
    lastreferenceddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Referenced Date', db_column=u'LastReferencedDate', blank=True) # Field name made lowercase.
    description = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Description', db_column=u'Description', blank=True) # Field name made lowercase.
    contentsize = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Size', db_column=u'ContentSize', blank=True) # Field name made lowercase.
    filetype = models.CharField(max_length=20, verbose_name=u'File Type', sf_read_only=models.READ_ONLY, db_column=u'FileType', blank=True) # Field name made lowercase.
    fileextension = models.CharField(max_length=40, verbose_name=u'File Extension', sf_read_only=models.READ_ONLY, db_column=u'FileExtension', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'ContentDocument'
        verbose_name = 'Content'
        verbose_name_plural = 'Content'
        # keyPrefix = '069'

class Contentdocumentfeed(models.Model):
    parentid = models.ForeignKey('Contentdocument', db_column=u'ParentId') # Field name made lowercase.
    type = models.CharField(db_column=u'Type', choices=[(u'TrackedChange', u'Tracked Change'), (u'UserStatus', u'User Status'), (u'TextPost', u'Text Post'), (u'AdvancedTextPost', u'Advanced Text Post'), (u'LinkPost', u'Link Post'), (u'ContentPost', u'Content Post'), (u'PollPost', u'Poll'), (u'RypplePost', u'Work.com Thanks'), (u'ProfileSkillPost', u'Profile Skill Post'), (u'DashboardComponentSnapshot', u'Dashboard Component Snapshot'), (u'ApprovalPost', u'Approval Post'), (u'CaseCommentPost', u'Case Comment Feed'), (u'ReplyPost', u'Reply Post'), (u'EmailMessageEvent', u'Email Message Feed'), (u'CallLogPost', u'Call Log Feed'), (u'ChangeStatusPost', u'Change Status Feed'), (u'AttachArticleEvent', u'Attached Article'), (u'MilestoneEvent', u'Milestone Event'), (u'ActivityEvent', u'Activity Change'), (u'ChatTranscriptPost', u'Chat Transcript Post'), (u'CollaborationGroupCreated', u'Collaboration Group Created'), (u'CollaborationGroupUnarchived', u'Collaboration Group Reactivated'), (u'SocialPost', u'Social Post'), (u'QuestionPost', u'Question Post'), (u'FacebookPost', u'Facebook Post'), (u'BasicTemplateFeedItem', u'Basic Template Post'), (u'CreateRecordEvent', u'Created Record'), (u'CanvasPost', u'Canvas'), (u'AnnouncementPost', u'a')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Feed Item Type') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    commentcount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Comment Count', db_column=u'CommentCount') # Field name made lowercase.
    likecount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Like Count', db_column=u'LikeCount') # Field name made lowercase.
    title = models.CharField(max_length=255, verbose_name=u'Title', sf_read_only=models.READ_ONLY, db_column=u'Title', blank=True) # Field name made lowercase.
    body = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Body', db_column=u'Body', blank=True) # Field name made lowercase.
    linkurl = models.URLField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Link Url', db_column=u'LinkUrl', blank=True) # Field name made lowercase.
    relatedrecordid = models.ForeignKey('Contentversion', null=True, db_column=u'RelatedRecordId', blank=True) # Field name made lowercase.
    contentdata = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Content Data', db_column=u'ContentData', blank=True) # Field name made lowercase.
    contentfilename = models.CharField(max_length=255, verbose_name=u'Content File Name', sf_read_only=models.READ_ONLY, db_column=u'ContentFileName', blank=True) # Field name made lowercase.
    contentdescription = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Content Description', db_column=u'ContentDescription', blank=True) # Field name made lowercase.
    contenttype = models.CharField(max_length=120, verbose_name=u'Content File Type', sf_read_only=models.READ_ONLY, db_column=u'ContentType', blank=True) # Field name made lowercase.
    contentsize = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Content Size', db_column=u'ContentSize', blank=True) # Field name made lowercase.
    insertedbyid = models.ForeignKey('User', null=True, db_column=u'InsertedById', blank=True) # Field name made lowercase.
    networkscope = models.CharField(db_column=u'NetworkScope', choices=[(u'AllNetworks', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Network Scope') # Field name made lowercase.
    visibility = models.CharField(db_column=u'Visibility', choices=[(u'AllUsers', None), (u'InternalUsers', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Visibility') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'ContentDocumentFeed'
        verbose_name = 'ContentDocument Feed'
        verbose_name_plural = 'ContentDocument Feed'
        # keyPrefix = 'None'

class Contentdocumenthistory(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    contentdocumentid = models.ForeignKey('Contentdocument', db_column=u'ContentDocumentId') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    field = models.CharField(max_length=255, verbose_name=u'Changed Field', sf_read_only=models.READ_ONLY, db_column=u'Field', choices=[(u'ArchivedBy', None), (u'ArchivedDate', None), (u'created', u'Created.'), (u'DeletedBy', None), (u'DeletedDate', None), (u'contentDocPublished', u'Document Added To Library'), (u'contentDocFeatured', u'Document Featured'), (u'contentDocRepublished', u'Document Re-added To Library'), (u'contentDocUnpublished', u'Document Removed From Library'), (u'contentDocSubscribed', u'Document Subscribed to'), (u'contentDocUnsubscribed', u'Document Unsubscribed to'), (u'feedEvent', u'Feed event'), (u'IsArchived', None), (u'Owner', None), (u'ownerAccepted', u'Owner (Accepted)'), (u'ownerAssignment', u'Owner (Assignment)'), (u'Parent', None), (u'PublishStatus', None), (u'locked', u'Record locked.'), (u'unlocked', u'Record unlocked.'), (u'Title', None)]) # Field name made lowercase.
    oldvalue = models.CharField(max_length=255, verbose_name=u'Old Value', sf_read_only=models.READ_ONLY, db_column=u'OldValue', blank=True) # Field name made lowercase.
    newvalue = models.CharField(max_length=255, verbose_name=u'New Value', sf_read_only=models.READ_ONLY, db_column=u'NewValue', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'ContentDocumentHistory'
        verbose_name = 'Content Document History'
        verbose_name_plural = 'Content Document History'
        # keyPrefix = 'None'

class Contentdocumentlink(models.Model):
    linkedentityid = models.ForeignKey('Account', db_column=u'LinkedEntityId') # Field name made lowercase.
    contentdocumentid = models.ForeignKey('Contentdocument', db_column=u'ContentDocumentId') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Is Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    sharetype = models.CharField(blank=True, max_length=40, verbose_name=u'Share Type', db_column=u'ShareType', choices=[(u'V', u'Viewer'), (u'C', u'Collaborator'), (u'I', u'Inferred')]) # Field name made lowercase.
    visibility = models.CharField(db_column=u'Visibility', choices=[(u'AllUsers', u'All Users'), (u'InternalUsers', u'Standard Users'), (u'SharedUsers', u'Shared Users')], max_length=40, blank=True, sf_read_only=models.NOT_UPDATEABLE, verbose_name=u'Visibility') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'ContentDocumentLink'
        verbose_name = 'Content Document Link'
        verbose_name_plural = 'Content Document Link'
        # keyPrefix = '06A'

class Contentversion(models.Model):
    contentdocumentid = models.ForeignKey('Contentdocument', db_column=u'ContentDocumentId') # Field name made lowercase.
    islatest = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Is Latest', db_column=u'IsLatest') # Field name made lowercase.
    contenturl = models.URLField(null=True, verbose_name=u'Content URL', db_column=u'ContentUrl', blank=True) # Field name made lowercase.
    versionnumber = models.CharField(max_length=20, verbose_name=u'Version Number', sf_read_only=models.READ_ONLY, db_column=u'VersionNumber', blank=True) # Field name made lowercase.
    title = models.CharField(max_length=255, verbose_name=u'Title', db_column=u'Title') # Field name made lowercase.
    description = models.TextField(verbose_name=u'Description', db_column=u'Description', blank=True) # Field name made lowercase.
    reasonforchange = models.CharField(max_length=1000, verbose_name=u'Reason For Change', sf_read_only=models.NOT_UPDATEABLE, db_column=u'ReasonForChange', blank=True) # Field name made lowercase.
    pathonclient = models.CharField(max_length=500, verbose_name=u'Path On Client', sf_read_only=models.NOT_UPDATEABLE, db_column=u'PathOnClient', blank=True) # Field name made lowercase.
    ratingcount = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Rating Count', db_column=u'RatingCount', blank=True) # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Is Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    contentmodifieddate = models.DateTimeField(null=True, sf_read_only=models.NOT_UPDATEABLE, verbose_name=u'Content Modified Date', db_column=u'ContentModifiedDate', blank=True) # Field name made lowercase.
    contentmodifiedbyid = models.ForeignKey('User', null=True, db_column=u'ContentModifiedById', blank=True) # Field name made lowercase.
    positiveratingcount = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Positive Rating Count', db_column=u'PositiveRatingCount', blank=True) # Field name made lowercase.
    negativeratingcount = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Negative Rating Count', db_column=u'NegativeRatingCount', blank=True) # Field name made lowercase.
    featuredcontentboost = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Featured Content Boost', db_column=u'FeaturedContentBoost', blank=True) # Field name made lowercase.
    featuredcontentdate = models.DateField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Featured Content Date', db_column=u'FeaturedContentDate', blank=True) # Field name made lowercase.
    ownerid = models.ForeignKey('User', db_column=u'OwnerId') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    tagcsv = models.TextField(verbose_name=u'Tags', db_column=u'TagCsv', blank=True) # Field name made lowercase.
    filetype = models.CharField(max_length=20, verbose_name=u'File Type', sf_read_only=models.READ_ONLY, db_column=u'FileType') # Field name made lowercase.
    publishstatus = models.CharField(max_length=40, verbose_name=u'Publish Status', sf_read_only=models.READ_ONLY, db_column=u'PublishStatus', choices=[(u'U', u'Upload Interrupted'), (u'P', u'Public'), (u'R', u'Personal Library')]) # Field name made lowercase.
    versiondata = models.TextField(sf_read_only=models.NOT_UPDATEABLE, verbose_name=u'Version Data', db_column=u'VersionData', blank=True) # Field name made lowercase.
    contentsize = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Size', db_column=u'ContentSize', blank=True) # Field name made lowercase.
    fileextension = models.CharField(max_length=40, verbose_name=u'File Extension', sf_read_only=models.READ_ONLY, db_column=u'FileExtension', blank=True) # Field name made lowercase.
    firstpublishlocationid = models.ForeignKey('Account', null=True, db_column=u'FirstPublishLocationId', blank=True) # Field name made lowercase.
    origin = models.CharField(max_length=40, verbose_name=u'Content Origin', sf_read_only=models.NOT_UPDATEABLE, db_column=u'Origin', choices=[(u'C', u'Content'), (u'H', u'Chatter')]) # Field name made lowercase.
    networkid = models.ForeignKey('Network', null=True, db_column=u'NetworkId', blank=True) # Field name made lowercase.
    contentlocation = models.CharField(max_length=40, verbose_name=u'Content Location', sf_read_only=models.NOT_UPDATEABLE, db_column=u'ContentLocation', choices=[(u'S', u'Salesforce'), (u'E', u'External')]) # Field name made lowercase.
    externaldocumentinfo1 = models.CharField(max_length=1000, verbose_name=u'External Document Info1', db_column=u'ExternalDocumentInfo1', blank=True) # Field name made lowercase.
    externaldocumentinfo2 = models.CharField(max_length=1000, verbose_name=u'External Document Info2', db_column=u'ExternalDocumentInfo2', blank=True) # Field name made lowercase.
    externaldatasourceid = models.ForeignKey('Externaldatasource', null=True, db_column=u'ExternalDataSourceId', blank=True) # Field name made lowercase.
    checksum = models.CharField(max_length=50, verbose_name=u'Checksum', sf_read_only=models.READ_ONLY, db_column=u'Checksum', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'ContentVersion'
        verbose_name = 'Content'
        verbose_name_plural = 'Content'
        # keyPrefix = '068'

class Contentversionhistory(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    contentversionid = models.ForeignKey('Contentversion', db_column=u'ContentVersionId') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    field = models.CharField(max_length=255, verbose_name=u'Changed Field', sf_read_only=models.READ_ONLY, db_column=u'Field', choices=[(u'AvgRating', None), (u'ContentModifiedBy', None), (u'ContentModifiedDate', None), (u'ContentUrl', None), (u'created', u'Created.'), (u'Description', None), (u'ExternalDataSource', None), (u'ExternalDocumentInfo1', None), (u'ExternalDocumentInfo2', None), (u'FeaturedContentBoost', None), (u'FeaturedContentDate', None), (u'feedEvent', u'Feed event'), (u'FileType', None), (u'FirstPublishLocation', None), (u'IsMajorVersion', None), (u'IsPublic', None), (u'Language', None), (u'MaxRating', None), (u'MinRating', None), (u'NegativeRatingCount', None), (u'Owner', None), (u'ownerAccepted', u'Owner (Accepted)'), (u'ownerAssignment', u'Owner (Assignment)'), (u'PositiveRatingCount', None), (u'PublishStatus', None), (u'RatingCount', None), (u'ReasonForChange', None), (u'locked', u'Record locked.'), (u'unlocked', u'Record unlocked.'), (u'Reference', None), (u'SuggestedTags', None), (u'Title', None), (u'contentVersionCommented', u'Version Commented'), (u'contentVersionCreated', u'Version Created'), (u'contentVersionDataReplaced', u'Version Data Replaced'), (u'contentVersionDeleted', u'Version Deleted'), (u'contentVersionDownloaded', u'Version Downloaded'), (u'VersionNumber', None), (u'contentVersionRated', u'Version Rated'), (u'contentVersionUpdated', u'Version Updated'), (u'contentVersionViewed', u'Version Viewed')]) # Field name made lowercase.
    oldvalue = models.CharField(max_length=255, verbose_name=u'Old Value', sf_read_only=models.READ_ONLY, db_column=u'OldValue', blank=True) # Field name made lowercase.
    newvalue = models.CharField(max_length=255, verbose_name=u'New Value', sf_read_only=models.READ_ONLY, db_column=u'NewValue', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'ContentVersionHistory'
        verbose_name = 'Content Version History'
        verbose_name_plural = 'Content Version History'
        # keyPrefix = 'None'

class Contract(models.Model):
    accountid = models.ForeignKey('Account', db_column=u'AccountId') # Field name made lowercase.
    ownerexpirationnotice = models.CharField(blank=True, max_length=40, verbose_name=u'Owner Expiration Notice', db_column=u'OwnerExpirationNotice', choices=[(u'15', u'15 Days'), (u'30', u'30 Days'), (u'45', u'45 Days'), (u'60', u'60 Days'), (u'90', u'90 Days'), (u'120', u'120 Days')]) # Field name made lowercase.
    startdate = models.DateField(null=True, verbose_name=u'Contract Start Date', db_column=u'StartDate', blank=True) # Field name made lowercase.
    enddate = models.DateField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Contract End Date', db_column=u'EndDate', blank=True) # Field name made lowercase.
    billingstreet = models.TextField(verbose_name=u'Billing Street', db_column=u'BillingStreet', blank=True) # Field name made lowercase.
    billingcity = models.CharField(max_length=40, verbose_name=u'Billing City', db_column=u'BillingCity', blank=True) # Field name made lowercase.
    billingstate = models.CharField(max_length=80, verbose_name=u'Billing State/Province', db_column=u'BillingState', blank=True) # Field name made lowercase.
    billingpostalcode = models.CharField(max_length=20, verbose_name=u'Billing Zip/Postal Code', db_column=u'BillingPostalCode', blank=True) # Field name made lowercase.
    billingcountry = models.CharField(max_length=80, verbose_name=u'Billing Country', db_column=u'BillingCountry', blank=True) # Field name made lowercase.
    billinglatitude = models.DecimalField(db_column=u'BillingLatitude', decimal_places=15, max_digits=18, blank=True, null=True, verbose_name=u'Billing Latitude') # Field name made lowercase.
    billinglongitude = models.DecimalField(db_column=u'BillingLongitude', decimal_places=15, max_digits=18, blank=True, null=True, verbose_name=u'Billing Longitude') # Field name made lowercase.
    billingaddress = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Billing Address', db_column=u'BillingAddress', blank=True) # Field name made lowercase. This field type is a guess.
    shippingstreet = models.TextField(verbose_name=u'Shipping Street', db_column=u'ShippingStreet', blank=True) # Field name made lowercase.
    shippingcity = models.CharField(max_length=40, verbose_name=u'Shipping City', db_column=u'ShippingCity', blank=True) # Field name made lowercase.
    shippingstate = models.CharField(max_length=80, verbose_name=u'Shipping State/Province', db_column=u'ShippingState', blank=True) # Field name made lowercase.
    shippingpostalcode = models.CharField(max_length=20, verbose_name=u'Shipping Zip/Postal Code', db_column=u'ShippingPostalCode', blank=True) # Field name made lowercase.
    shippingcountry = models.CharField(max_length=80, verbose_name=u'Shipping Country', db_column=u'ShippingCountry', blank=True) # Field name made lowercase.
    shippinglatitude = models.DecimalField(db_column=u'ShippingLatitude', decimal_places=15, max_digits=18, blank=True, null=True, verbose_name=u'Shipping Latitude') # Field name made lowercase.
    shippinglongitude = models.DecimalField(db_column=u'ShippingLongitude', decimal_places=15, max_digits=18, blank=True, null=True, verbose_name=u'Shipping Longitude') # Field name made lowercase.
    shippingaddress = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Shipping Address', db_column=u'ShippingAddress', blank=True) # Field name made lowercase. This field type is a guess.
    contractterm = models.IntegerField(null=True, verbose_name=u'Contract Term', db_column=u'ContractTerm', blank=True) # Field name made lowercase.
    ownerid = models.ForeignKey('User', db_column=u'OwnerId') # Field name made lowercase.
    status = models.CharField(max_length=40, verbose_name=u'Status', db_column=u'Status', choices=[(u'In Approval Process', u'In Approval Process'), (u'Activated', u'Activated'), (u'Draft', u'Draft')]) # Field name made lowercase.
    companysignedid = models.ForeignKey('User', null=True, db_column=u'CompanySignedId', blank=True) # Field name made lowercase.
    companysigneddate = models.DateField(null=True, verbose_name=u'Company Signed Date', db_column=u'CompanySignedDate', blank=True) # Field name made lowercase.
    customersignedid = models.ForeignKey('Contact', null=True, db_column=u'CustomerSignedId', blank=True) # Field name made lowercase.
    customersignedtitle = models.CharField(max_length=40, verbose_name=u'Customer Signed Title', db_column=u'CustomerSignedTitle', blank=True) # Field name made lowercase.
    customersigneddate = models.DateField(null=True, verbose_name=u'Customer Signed Date', db_column=u'CustomerSignedDate', blank=True) # Field name made lowercase.
    specialterms = models.TextField(verbose_name=u'Special Terms', db_column=u'SpecialTerms', blank=True) # Field name made lowercase.
    activatedbyid = models.ForeignKey('User', null=True, db_column=u'ActivatedById', blank=True) # Field name made lowercase.
    activateddate = models.DateTimeField(null=True, sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Activated Date', db_column=u'ActivatedDate', blank=True) # Field name made lowercase.
    statuscode = models.CharField(max_length=40, verbose_name=u'Status Category', sf_read_only=models.READ_ONLY, db_column=u'StatusCode', choices=[(u'Draft', u'Draft'), (u'InApproval', u'In Approval Process'), (u'Activated', u'Activated'), (u'Terminated', u'Terminated'), (u'Expired', u'Expired')]) # Field name made lowercase.
    description = models.TextField(verbose_name=u'Description', db_column=u'Description', blank=True) # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    contractnumber = models.CharField(max_length=30, verbose_name=u'Contract Number', sf_read_only=models.READ_ONLY, db_column=u'ContractNumber') # Field name made lowercase.
    lastapproveddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Approved Date', db_column=u'LastApprovedDate', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    lastactivitydate = models.DateField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Activity', db_column=u'LastActivityDate', blank=True) # Field name made lowercase.
    lastvieweddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Viewed Date', db_column=u'LastViewedDate', blank=True) # Field name made lowercase.
    lastreferenceddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Referenced Date', db_column=u'LastReferencedDate', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Contract'
        verbose_name = 'Contract'
        verbose_name_plural = 'Contracts'
        # keyPrefix = '800'

class Contractcontactrole(models.Model):
    contractid = models.ForeignKey('Contract', db_column=u'ContractId') # Field name made lowercase.
    contactid = models.ForeignKey('Contact', db_column=u'ContactId') # Field name made lowercase.
    role = models.CharField(blank=True, max_length=40, verbose_name=u'Role', db_column=u'Role', choices=[(u'Business User', u'Business User'), (u'Decision Maker', u'Decision Maker'), (u'Economic Buyer', u'Economic Buyer'), (u'Economic Decision Maker', u'Economic Decision Maker'), (u'Evaluator', u'Evaluator'), (u'Executive Sponsor', u'Executive Sponsor'), (u'Influencer', u'Influencer'), (u'Technical Buyer', u'Technical Buyer'), (u'Other', u'Other')]) # Field name made lowercase.
    isprimary = models.BooleanField(verbose_name=u'Primary', db_column=u'IsPrimary') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'ContractContactRole'
        verbose_name = 'Contract Contact Role'
        verbose_name_plural = 'Contract Contact Role'
        # keyPrefix = '02a'

class Contractfeed(models.Model):
    parentid = models.ForeignKey('Contract', db_column=u'ParentId') # Field name made lowercase.
    type = models.CharField(db_column=u'Type', choices=[(u'TrackedChange', u'Tracked Change'), (u'UserStatus', u'User Status'), (u'TextPost', u'Text Post'), (u'AdvancedTextPost', u'Advanced Text Post'), (u'LinkPost', u'Link Post'), (u'ContentPost', u'Content Post'), (u'PollPost', u'Poll'), (u'RypplePost', u'Work.com Thanks'), (u'ProfileSkillPost', u'Profile Skill Post'), (u'DashboardComponentSnapshot', u'Dashboard Component Snapshot'), (u'ApprovalPost', u'Approval Post'), (u'CaseCommentPost', u'Case Comment Feed'), (u'ReplyPost', u'Reply Post'), (u'EmailMessageEvent', u'Email Message Feed'), (u'CallLogPost', u'Call Log Feed'), (u'ChangeStatusPost', u'Change Status Feed'), (u'AttachArticleEvent', u'Attached Article'), (u'MilestoneEvent', u'Milestone Event'), (u'ActivityEvent', u'Activity Change'), (u'ChatTranscriptPost', u'Chat Transcript Post'), (u'CollaborationGroupCreated', u'Collaboration Group Created'), (u'CollaborationGroupUnarchived', u'Collaboration Group Reactivated'), (u'SocialPost', u'Social Post'), (u'QuestionPost', u'Question Post'), (u'FacebookPost', u'Facebook Post'), (u'BasicTemplateFeedItem', u'Basic Template Post'), (u'CreateRecordEvent', u'Created Record'), (u'CanvasPost', u'Canvas'), (u'AnnouncementPost', u'a')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Feed Item Type') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    commentcount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Comment Count', db_column=u'CommentCount') # Field name made lowercase.
    likecount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Like Count', db_column=u'LikeCount') # Field name made lowercase.
    title = models.CharField(max_length=255, verbose_name=u'Title', sf_read_only=models.READ_ONLY, db_column=u'Title', blank=True) # Field name made lowercase.
    body = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Body', db_column=u'Body', blank=True) # Field name made lowercase.
    linkurl = models.URLField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Link Url', db_column=u'LinkUrl', blank=True) # Field name made lowercase.
    relatedrecordid = models.ForeignKey('Contentversion', null=True, db_column=u'RelatedRecordId', blank=True) # Field name made lowercase.
    contentdata = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Content Data', db_column=u'ContentData', blank=True) # Field name made lowercase.
    contentfilename = models.CharField(max_length=255, verbose_name=u'Content File Name', sf_read_only=models.READ_ONLY, db_column=u'ContentFileName', blank=True) # Field name made lowercase.
    contentdescription = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Content Description', db_column=u'ContentDescription', blank=True) # Field name made lowercase.
    contenttype = models.CharField(max_length=120, verbose_name=u'Content File Type', sf_read_only=models.READ_ONLY, db_column=u'ContentType', blank=True) # Field name made lowercase.
    contentsize = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Content Size', db_column=u'ContentSize', blank=True) # Field name made lowercase.
    insertedbyid = models.ForeignKey('User', null=True, db_column=u'InsertedById', blank=True) # Field name made lowercase.
    networkscope = models.CharField(db_column=u'NetworkScope', choices=[(u'AllNetworks', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Network Scope') # Field name made lowercase.
    visibility = models.CharField(db_column=u'Visibility', choices=[(u'AllUsers', None), (u'InternalUsers', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Visibility') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'ContractFeed'
        verbose_name = 'Contract Feed'
        verbose_name_plural = 'Contract Feed'
        # keyPrefix = 'None'

class Contracthistory(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    contractid = models.ForeignKey('Contract', db_column=u'ContractId') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    field = models.CharField(max_length=255, verbose_name=u'Changed Field', sf_read_only=models.READ_ONLY, db_column=u'Field', choices=[(u'Account', None), (u'ActivatedBy', None), (u'ActivatedDate', None), (u'BillingAddress', None), (u'BillingCity', None), (u'BillingCountry', None), (u'BillingLatitude', None), (u'BillingLongitude', None), (u'BillingPostalCode', None), (u'BillingState', None), (u'BillingStreet', None), (u'CompanySigned', None), (u'CompanySignedDate', None), (u'contractActivation', u'Contract Activated.'), (u'contractApproval', u'Contract Approved.'), (u'contractConversion', u'Contract Converted.'), (u'contractDraft', u'Contract Draft.'), (u'contractExpiration', u'Contract Expired.'), (u'ContractTerm', None), (u'contractTermination', u'Contract Terminated.'), (u'created', u'Created.'), (u'CustomerSigned', None), (u'CustomerSignedDate', None), (u'CustomerSignedTitle', None), (u'Description', None), (u'EndDate', None), (u'feedEvent', u'Feed event'), (u'Name', None), (u'Owner', None), (u'ownerAccepted', u'Owner (Accepted)'), (u'ownerAssignment', u'Owner (Assignment)'), (u'OwnerExpirationNotice', None), (u'locked', u'Record locked.'), (u'unlocked', u'Record unlocked.'), (u'ShippingAddress', None), (u'ShippingCity', None), (u'ShippingCountry', None), (u'ShippingLatitude', None), (u'ShippingLongitude', None), (u'ShippingPostalCode', None), (u'ShippingState', None), (u'ShippingStreet', None), (u'SpecialTerms', None), (u'StartDate', None), (u'Status', None)]) # Field name made lowercase.
    oldvalue = models.CharField(max_length=255, verbose_name=u'Old Value', sf_read_only=models.READ_ONLY, db_column=u'OldValue', blank=True) # Field name made lowercase.
    newvalue = models.CharField(max_length=255, verbose_name=u'New Value', sf_read_only=models.READ_ONLY, db_column=u'NewValue', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'ContractHistory'
        verbose_name = 'Contract History'
        verbose_name_plural = 'Contract History'
        # keyPrefix = 'None'

class Contractstatus(models.Model):
    masterlabel = models.CharField(max_length=255, verbose_name=u'Master Label', sf_read_only=models.READ_ONLY, db_column=u'MasterLabel', blank=True) # Field name made lowercase.
    sortorder = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Sort Order', db_column=u'SortOrder', blank=True) # Field name made lowercase.
    isdefault = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Is Default', db_column=u'IsDefault') # Field name made lowercase.
    statuscode = models.CharField(db_column=u'StatusCode', choices=[(u'Draft', u'Draft'), (u'InApproval', u'In Approval Process'), (u'Activated', u'Activated'), (u'Terminated', u'Terminated'), (u'Expired', u'Expired')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Status Code') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'ContractStatus'
        verbose_name = 'Contract Status Value'
        verbose_name_plural = 'Contract Status Value'
        # keyPrefix = 'None'

class Cronjobdetail(models.Model):
    name = models.CharField(max_length=255, verbose_name=u'Job Name', sf_read_only=models.READ_ONLY, db_column=u'Name') # Field name made lowercase.
    jobtype = models.CharField(db_column=u'JobType', choices=[(u'1', u'Data Export'), (u'3', u'Dashboard Refresh'), (u'4', u'Reporting Snapshot'), (u'7', u'Scheduled Apex'), (u'8', u'Report Run'), (u'9', u'Batch Job'), (u'A', u'Reporting Notification')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Type') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'CronJobDetail'
        verbose_name = 'Cron Job'
        verbose_name_plural = 'Cron Job'
        # keyPrefix = '08a'

class Crontrigger(models.Model):
    cronjobdetailid = models.ForeignKey('Cronjobdetail', null=True, db_column=u'CronJobDetailId', blank=True) # Field name made lowercase.
    nextfiretime = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Next Run Time', db_column=u'NextFireTime', blank=True) # Field name made lowercase.
    previousfiretime = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Previous Run Time', db_column=u'PreviousFireTime', blank=True) # Field name made lowercase.
    state = models.CharField(max_length=16, verbose_name=u'Job State', sf_read_only=models.READ_ONLY, db_column=u'State', blank=True) # Field name made lowercase.
    starttime = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Start Time', db_column=u'StartTime', blank=True) # Field name made lowercase.
    endtime = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'End Time', db_column=u'EndTime', blank=True) # Field name made lowercase.
    cronexpression = models.CharField(max_length=255, verbose_name=u'Cron Expression', sf_read_only=models.READ_ONLY, db_column=u'CronExpression', blank=True) # Field name made lowercase.
    timezonesidkey = models.CharField(db_column=u'TimeZoneSidKey', choices=[(u'Pacific/Kiritimati', u'(GMT+14:00) Line Islands Time (Pacific/Kiritimati)'), (u'Pacific/Chatham', u'(GMT+13:45) Chatham Daylight Time (Pacific/Chatham)'), (u'Pacific/Auckland', u'(GMT+13:00) New Zealand Daylight Time (Pacific/Auckland)'), (u'Pacific/Enderbury', u'(GMT+13:00) Phoenix Islands Time (Pacific/Enderbury)'), (u'Pacific/Fiji', u'(GMT+13:00) Fiji Summer Time (Pacific/Fiji)'), (u'Pacific/Tongatapu', u'(GMT+13:00) Tonga Time (Pacific/Tongatapu)'), (u'Asia/Kamchatka', u'(GMT+12:00) Magadan Time (Asia/Kamchatka)'), (u'Pacific/Norfolk', u'(GMT+11:30) Norfolk Islands Time (Pacific/Norfolk)'), (u'Australia/Lord_Howe', u'(GMT+11:00) Lord Howe Daylight Time (Australia/Lord_Howe)'), (u'Australia/Sydney', u'(GMT+11:00) Australian Eastern Daylight Time (Australia/Sydney)'), (u'Pacific/Guadalcanal', u'(GMT+11:00) Solomon Islands Time (Pacific/Guadalcanal)'), (u'Australia/Adelaide', u'(GMT+10:30) Australian Central Daylight Time (Australia/Adelaide)'), (u'Australia/Brisbane', u'(GMT+10:00) Australian Eastern Standard Time (Australia/Brisbane)'), (u'Australia/Darwin', u'(GMT+09:30) Australian Central Standard Time (Australia/Darwin)'), (u'Asia/Seoul', u'(GMT+09:00) Korean Standard Time (Asia/Seoul)'), (u'Asia/Tokyo', u'(GMT+09:00) Japan Standard Time (Asia/Tokyo)'), (u'Asia/Hong_Kong', u'(GMT+08:00) Hong Kong Time (Asia/Hong_Kong)'), (u'Asia/Kuala_Lumpur', u'(GMT+08:00) Malaysia Time (Asia/Kuala_Lumpur)'), (u'Asia/Manila', u'(GMT+08:00) Philippine Time (Asia/Manila)'), (u'Asia/Shanghai', u'(GMT+08:00) China Standard Time (Asia/Shanghai)'), (u'Asia/Singapore', u'(GMT+08:00) Singapore Standard Time (Asia/Singapore)'), (u'Asia/Taipei', u'(GMT+08:00) Taipei Standard Time (Asia/Taipei)'), (u'Australia/Perth', u'(GMT+08:00) Australian Western Standard Time (Australia/Perth)'), (u'Asia/Bangkok', u'(GMT+07:00) Indochina Time (Asia/Bangkok)'), (u'Asia/Ho_Chi_Minh', u'(GMT+07:00) Indochina Time (Asia/Ho_Chi_Minh)'), (u'Asia/Jakarta', u'(GMT+07:00) Western Indonesia Time (Asia/Jakarta)'), (u'Asia/Rangoon', u'(GMT+06:30) Myanmar Time (Asia/Rangoon)'), (u'Asia/Dhaka', u'(GMT+06:00) Bangladesh Time (Asia/Dhaka)'), (u'Asia/Yekaterinburg', u'(GMT+06:00) Yekaterinburg Time (Asia/Yekaterinburg)'), (u'Asia/Kathmandu', u'(GMT+05:45) Nepal Time (Asia/Kathmandu)'), (u'Asia/Colombo', u'(GMT+05:30) India Standard Time (Asia/Colombo)'), (u'Asia/Kolkata', u'(GMT+05:30) India Standard Time (Asia/Kolkata)'), (u'Asia/Baku', u'(GMT+05:00) Azerbaijan Summer Time (Asia/Baku)'), (u'Asia/Karachi', u'(GMT+05:00) Pakistan Time (Asia/Karachi)'), (u'Asia/Tashkent', u'(GMT+05:00) Uzbekistan Time (Asia/Tashkent)'), (u'Asia/Kabul', u'(GMT+04:30) Afghanistan Time (Asia/Kabul)'), (u'Asia/Dubai', u'(GMT+04:00) Gulf Standard Time (Asia/Dubai)'), (u'Asia/Tbilisi', u'(GMT+04:00) Georgia Time (Asia/Tbilisi)'), (u'Asia/Yerevan', u'(GMT+04:00) Armenia Time (Asia/Yerevan)'), (u'Europe/Moscow', u'(GMT+04:00) Moscow Standard Time (Europe/Moscow)'), (u'Asia/Tehran', u'(GMT+03:30) Iran Standard Time (Asia/Tehran)'), (u'Africa/Nairobi', u'(GMT+03:00) East Africa Time (Africa/Nairobi)'), (u'Asia/Baghdad', u'(GMT+03:00) Arabian Standard Time (Asia/Baghdad)'), (u'Asia/Beirut', u'(GMT+03:00) Eastern European Summer Time (Asia/Beirut)'), (u'Asia/Jerusalem', u'(GMT+03:00) Israel Daylight Time (Asia/Jerusalem)'), (u'Asia/Kuwait', u'(GMT+03:00) Arabian Standard Time (Asia/Kuwait)'), (u'Asia/Riyadh', u'(GMT+03:00) Arabian Standard Time (Asia/Riyadh)'), (u'Europe/Athens', u'(GMT+03:00) Eastern European Summer Time (Europe/Athens)'), (u'Europe/Bucharest', u'(GMT+03:00) Eastern European Summer Time (Europe/Bucharest)'), (u'Europe/Helsinki', u'(GMT+03:00) Eastern European Summer Time (Europe/Helsinki)'), (u'Europe/Istanbul', u'(GMT+03:00) Eastern European Summer Time (Europe/Istanbul)'), (u'Europe/Minsk', u'(GMT+03:00) Further-eastern European Time (Europe/Minsk)'), (u'Africa/Cairo', u'(GMT+02:00) Eastern European Time (Africa/Cairo)'), (u'Africa/Johannesburg', u'(GMT+02:00) South Africa Standard Time (Africa/Johannesburg)'), (u'Europe/Amsterdam', u'(GMT+02:00) Central European Summer Time (Europe/Amsterdam)'), (u'Europe/Berlin', u'(GMT+02:00) Central European Summer Time (Europe/Berlin)'), (u'Europe/Brussels', u'(GMT+02:00) Central European Summer Time (Europe/Brussels)'), (u'Europe/Paris', u'(GMT+02:00) Central European Summer Time (Europe/Paris)'), (u'Europe/Prague', u'(GMT+02:00) Central European Summer Time (Europe/Prague)'), (u'Europe/Rome', u'(GMT+02:00) Central European Summer Time (Europe/Rome)'), (u'Africa/Algiers', u'(GMT+01:00) Central European Time (Africa/Algiers)'), (u'Europe/Dublin', u'(GMT+01:00) Irish Summer Time (Europe/Dublin)'), (u'Europe/Lisbon', u'(GMT+01:00) Western European Summer Time (Europe/Lisbon)'), (u'Europe/London', u'(GMT+01:00) British Summer Time (Europe/London)'), (u'Africa/Casablanca', u'(GMT+00:00) Western European Time (Africa/Casablanca)'), (u'America/Scoresbysund', u'(GMT+00:00) East Greenland Summer Time (America/Scoresbysund)'), (u'Atlantic/Azores', u'(GMT+00:00) Azores Summer Time (Atlantic/Azores)'), (u'GMT', u'(GMT+00:00) Greenwich Mean Time (GMT)'), (u'Atlantic/Cape_Verde', u'(GMT-01:00) Cape Verde Time (Atlantic/Cape_Verde)'), (u'America/Sao_Paulo', u'(GMT-02:00) Brasilia Summer Time (America/Sao_Paulo)'), (u'Atlantic/South_Georgia', u'(GMT-02:00) South Georgia Time (Atlantic/South_Georgia)'), (u'America/St_Johns', u'(GMT-02:30) Newfoundland Daylight Time (America/St_Johns)'), (u'America/Argentina/Buenos_Aires', u'(GMT-03:00) Argentina Time (America/Argentina/Buenos_Aires)'), (u'America/Halifax', u'(GMT-03:00) Atlantic Daylight Time (America/Halifax)'), (u'America/Santiago', u'(GMT-03:00) Chile Summer Time (America/Santiago)'), (u'Atlantic/Bermuda', u'(GMT-03:00) Atlantic Daylight Time (Atlantic/Bermuda)'), (u'America/Indiana/Indianapolis', u'(GMT-04:00) Eastern Daylight Time (America/Indiana/Indianapolis)'), (u'America/New_York', u'(GMT-04:00) Eastern Daylight Time (America/New_York)'), (u'America/Puerto_Rico', u'(GMT-04:00) Atlantic Standard Time (America/Puerto_Rico)'), (u'America/Caracas', u'(GMT-04:30) Venezuela Time (America/Caracas)'), (u'America/Bogota', u'(GMT-05:00) Colombia Time (America/Bogota)'), (u'America/Chicago', u'(GMT-05:00) Central Daylight Time (America/Chicago)'), (u'America/Lima', u'(GMT-05:00) Peru Time (America/Lima)'), (u'America/Mexico_City', u'(GMT-05:00) Central Daylight Time (America/Mexico_City)'), (u'America/Panama', u'(GMT-05:00) Eastern Standard Time (America/Panama)'), (u'America/Denver', u'(GMT-06:00) Mountain Daylight Time (America/Denver)'), (u'America/El_Salvador', u'(GMT-06:00) Central Standard Time (America/El_Salvador)'), (u'America/Mazatlan', u'(GMT-06:00) Mountain Daylight Time (America/Mazatlan)'), (u'America/Los_Angeles', u'(GMT-07:00) Pacific Daylight Time (America/Los_Angeles)'), (u'America/Phoenix', u'(GMT-07:00) Mountain Standard Time (America/Phoenix)'), (u'America/Tijuana', u'(GMT-07:00) Pacific Daylight Time (America/Tijuana)'), (u'America/Anchorage', u'(GMT-08:00) Alaska Daylight Time (America/Anchorage)'), (u'Pacific/Pitcairn', u'(GMT-08:00) Pitcairn Time (Pacific/Pitcairn)'), (u'America/Adak', u'(GMT-09:00) Hawaii-Aleutian Standard Time (America/Adak)'), (u'Pacific/Gambier', u'(GMT-09:00) Gambier Time (Pacific/Gambier)'), (u'Pacific/Marquesas', u'(GMT-09:30) Marquesas Time (Pacific/Marquesas)'), (u'Pacific/Honolulu', u'(GMT-10:00) Hawaii-Aleutian Standard Time (Pacific/Honolulu)'), (u'Pacific/Niue', u'(GMT-11:00) Niue Time (Pacific/Niue)'), (u'Pacific/Pago_Pago', u'(GMT-11:00) Samoa Standard Time (Pacific/Pago_Pago)')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Java Time Zone Id') # Field name made lowercase.
    ownerid = models.ForeignKey('User', null=True, db_column=u'OwnerId', blank=True) # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    timestriggered = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Job Fired Count', db_column=u'TimesTriggered', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'CronTrigger'
        verbose_name = 'Scheduled Jobs'
        verbose_name_plural = 'Scheduled Jobs'
        # keyPrefix = '08e'

class Custombrand(models.Model):
    parentid = models.ForeignKey('Network', db_column=u'ParentId') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'CustomBrand'
        verbose_name = 'Custom Brand'
        verbose_name_plural = 'Custom Brand'
        # keyPrefix = '07W'

class Custombrandasset(models.Model):
    custombrandid = models.ForeignKey('Custombrand', db_column=u'CustomBrandId') # Field name made lowercase.
    assetcategory = models.CharField(max_length=40, verbose_name=u'Asset Category', db_column=u'AssetCategory', choices=[(u'MotifZeronaryColor', u'Zeronary motif color'), (u'MotifPrimaryColor', u'Primary motif color'), (u'MotifSecondaryColor', u'Secondary motif color'), (u'MotifTertiaryColor', u'Tertiary motif color'), (u'MotifQuaternaryColor', u'Quaternary motif color'), (u'MotifZeronaryComplementColor', u'Zeronary motif colors compelement color'), (u'MotifPrimaryComplementColor', u'Primary motif colors compelement color'), (u'MotifTertiaryComplementColor', u'Tertiary motif colors compelement color'), (u'MotifQuaternaryComplementColor', u'Quaternary motif colors complement color'), (u'PageHeader', u'Page Header'), (u'PageFooter', u'Page Footer'), (u'LoginFooterText', u'Footer text displayed on the login page'), (u'LoginLogoImageId', u'Logo image displayed on the login page'), (u'LargeLogoImageId', u'Large logo image'), (u'SmallLogoImageId', u'Small logo image')]) # Field name made lowercase.
    textasset = models.CharField(max_length=333, verbose_name=u'Text Asset', db_column=u'TextAsset', blank=True) # Field name made lowercase.
    foreignkeyassetid = models.ForeignKey('Document', null=True, db_column=u'ForeignKeyAssetId', blank=True) # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'CustomBrandAsset'
        verbose_name = 'Custom Brand Asset'
        verbose_name_plural = 'Custom Brand Asset'
        # keyPrefix = '07X'

class Customobjectuserlicensemetrics(models.Model):
    metricsdate = models.DateField(sf_read_only=models.READ_ONLY, verbose_name=u'Metrics Date', db_column=u'MetricsDate') # Field name made lowercase.
    userlicenseid = models.ForeignKey('Userlicense', db_column=u'UserLicenseId') # Field name made lowercase.
    customobjectid = models.CharField(max_length=40, verbose_name=u'Custom Object Id', sf_read_only=models.READ_ONLY, db_column=u'CustomObjectId', blank=True) # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    customobjecttype = models.CharField(db_column=u'CustomObjectType', choices=[(u'Enterprise', u'Enterprise'), (u'Light', u'Light')], max_length=255, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Custom Object Type') # Field name made lowercase.
    customobjectname = models.CharField(max_length=120, verbose_name=u'Custom Object Name', sf_read_only=models.READ_ONLY, db_column=u'CustomObjectName', blank=True) # Field name made lowercase.
    objectcount = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Count of Objects assigned', db_column=u'ObjectCount', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'CustomObjectUserLicenseMetrics'
        verbose_name = 'Custom Object Usage By User License Metric'
        verbose_name_plural = 'Custom Object Usage By User License Metrics'
        # keyPrefix = '3NA'

class Custompermission(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    developername = models.CharField(max_length=80, verbose_name=u'Name', sf_read_only=models.READ_ONLY, db_column=u'DeveloperName') # Field name made lowercase.
    language = models.CharField(max_length=40, verbose_name=u'Master Language', sf_read_only=models.READ_ONLY, db_column=u'Language', choices=[(u'en_US', u'English'), (u'de', u'German'), (u'es', u'Spanish'), (u'fr', u'French'), (u'it', u'Italian'), (u'ja', u'Japanese'), (u'sv', u'Swedish'), (u'ko', u'Korean'), (u'zh_TW', u'Chinese (Traditional)'), (u'zh_CN', u'Chinese (Simplified)'), (u'pt_BR', u'Portuguese (Brazilian)'), (u'nl_NL', u'Dutch'), (u'da', u'Danish'), (u'th', u'Thai'), (u'fi', u'Finnish'), (u'ru', u'Russian'), (u'es_MX', u'Spanish (Mexican)'), (u'no', u'Norwegian')]) # Field name made lowercase.
    masterlabel = models.CharField(max_length=80, verbose_name=u'Label', sf_read_only=models.READ_ONLY, db_column=u'MasterLabel') # Field name made lowercase.
    namespaceprefix = models.CharField(max_length=15, verbose_name=u'Namespace Prefix', sf_read_only=models.READ_ONLY, db_column=u'NamespacePrefix', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    description = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Description', db_column=u'Description', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'CustomPermission'
        verbose_name = 'Custom Permission'
        verbose_name_plural = 'Custom Permissions'
        # keyPrefix = '0CP'

class Dashboard(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    folderid = models.ForeignKey('Folder', db_column=u'FolderId') # Field name made lowercase.
    title = models.CharField(max_length=80, verbose_name=u'Title', sf_read_only=models.READ_ONLY, db_column=u'Title') # Field name made lowercase.
    developername = models.CharField(max_length=80, verbose_name=u'Dashboard Unique Name', sf_read_only=models.READ_ONLY, db_column=u'DeveloperName') # Field name made lowercase.
    namespaceprefix = models.CharField(max_length=15, verbose_name=u'Namespace Prefix', sf_read_only=models.READ_ONLY, db_column=u'NamespacePrefix', blank=True) # Field name made lowercase.
    description = models.CharField(max_length=255, verbose_name=u'Description', sf_read_only=models.READ_ONLY, db_column=u'Description', blank=True) # Field name made lowercase.
    leftsize = models.CharField(max_length=40, verbose_name=u'Left Size', sf_read_only=models.READ_ONLY, db_column=u'LeftSize', choices=[(u'Narrow', u'Narrow'), (u'Medium', u'Medium'), (u'Wide', u'Wide')]) # Field name made lowercase.
    middlesize = models.CharField(db_column=u'MiddleSize', choices=[(u'Narrow', u'Narrow'), (u'Medium', u'Medium'), (u'Wide', u'Wide')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Middle Size') # Field name made lowercase.
    rightsize = models.CharField(max_length=40, verbose_name=u'Right Size', sf_read_only=models.READ_ONLY, db_column=u'RightSize', choices=[(u'Narrow', u'Narrow'), (u'Medium', u'Medium'), (u'Wide', u'Wide')]) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    runninguserid = models.ForeignKey('User', db_column=u'RunningUserId') # Field name made lowercase.
    titlecolor = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Title Color', db_column=u'TitleColor') # Field name made lowercase.
    titlesize = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Title Size', db_column=u'TitleSize') # Field name made lowercase.
    textcolor = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Text Color', db_column=u'TextColor') # Field name made lowercase.
    backgroundstart = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Starting Color', db_column=u'BackgroundStart') # Field name made lowercase.
    backgroundend = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Ending Color', db_column=u'BackgroundEnd') # Field name made lowercase.
    backgrounddirection = models.CharField(max_length=40, verbose_name=u'Background Fade Direction', sf_read_only=models.READ_ONLY, db_column=u'BackgroundDirection', choices=[(u'TopToBottom', u'Top to Bottom'), (u'LeftToRight', u'Left to Right'), (u'Diagonal', u'Diagonal')]) # Field name made lowercase.
    type = models.CharField(max_length=40, verbose_name=u'Dashboard Running User', sf_read_only=models.READ_ONLY, db_column=u'Type', choices=[(u'SpecifiedUser', u'Run as specified user'), (u'LoggedInUser', u'Run as logged-in user'), (u'MyTeamUser', u'Let authorized users change running user')]) # Field name made lowercase.
    lastvieweddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Viewed Date', db_column=u'LastViewedDate', blank=True) # Field name made lowercase.
    lastreferenceddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Referenced Date', db_column=u'LastReferencedDate', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Dashboard'
        verbose_name = 'Dashboard'
        verbose_name_plural = 'Dashboards'
        # keyPrefix = '01Z'

class Dashboardcomponent(models.Model):
    name = models.CharField(max_length=80, verbose_name=u'Dashboard Component Name', sf_read_only=models.READ_ONLY, db_column=u'Name', blank=True) # Field name made lowercase.
    dashboardid = models.ForeignKey('Dashboard', db_column=u'DashboardId') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'DashboardComponent'
        verbose_name = 'Dashboard Component'
        verbose_name_plural = 'Dashboard Components'
        # keyPrefix = '01a'

class Dashboardcomponentfeed(models.Model):
    parentid = models.ForeignKey('Dashboardcomponent', db_column=u'ParentId') # Field name made lowercase.
    type = models.CharField(db_column=u'Type', choices=[(u'TrackedChange', u'Tracked Change'), (u'UserStatus', u'User Status'), (u'TextPost', u'Text Post'), (u'AdvancedTextPost', u'Advanced Text Post'), (u'LinkPost', u'Link Post'), (u'ContentPost', u'Content Post'), (u'PollPost', u'Poll'), (u'RypplePost', u'Work.com Thanks'), (u'ProfileSkillPost', u'Profile Skill Post'), (u'DashboardComponentSnapshot', u'Dashboard Component Snapshot'), (u'ApprovalPost', u'Approval Post'), (u'CaseCommentPost', u'Case Comment Feed'), (u'ReplyPost', u'Reply Post'), (u'EmailMessageEvent', u'Email Message Feed'), (u'CallLogPost', u'Call Log Feed'), (u'ChangeStatusPost', u'Change Status Feed'), (u'AttachArticleEvent', u'Attached Article'), (u'MilestoneEvent', u'Milestone Event'), (u'ActivityEvent', u'Activity Change'), (u'ChatTranscriptPost', u'Chat Transcript Post'), (u'CollaborationGroupCreated', u'Collaboration Group Created'), (u'CollaborationGroupUnarchived', u'Collaboration Group Reactivated'), (u'SocialPost', u'Social Post'), (u'QuestionPost', u'Question Post'), (u'FacebookPost', u'Facebook Post'), (u'BasicTemplateFeedItem', u'Basic Template Post'), (u'CreateRecordEvent', u'Created Record'), (u'CanvasPost', u'Canvas'), (u'AnnouncementPost', u'a')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Feed Item Type') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    commentcount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Comment Count', db_column=u'CommentCount') # Field name made lowercase.
    likecount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Like Count', db_column=u'LikeCount') # Field name made lowercase.
    title = models.CharField(max_length=255, verbose_name=u'Title', sf_read_only=models.READ_ONLY, db_column=u'Title', blank=True) # Field name made lowercase.
    body = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Body', db_column=u'Body', blank=True) # Field name made lowercase.
    linkurl = models.URLField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Link Url', db_column=u'LinkUrl', blank=True) # Field name made lowercase.
    relatedrecordid = models.ForeignKey('Contentversion', null=True, db_column=u'RelatedRecordId', blank=True) # Field name made lowercase.
    contentdata = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Content Data', db_column=u'ContentData', blank=True) # Field name made lowercase.
    contentfilename = models.CharField(max_length=255, verbose_name=u'Content File Name', sf_read_only=models.READ_ONLY, db_column=u'ContentFileName', blank=True) # Field name made lowercase.
    contentdescription = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Content Description', db_column=u'ContentDescription', blank=True) # Field name made lowercase.
    contenttype = models.CharField(max_length=120, verbose_name=u'Content File Type', sf_read_only=models.READ_ONLY, db_column=u'ContentType', blank=True) # Field name made lowercase.
    contentsize = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Content Size', db_column=u'ContentSize', blank=True) # Field name made lowercase.
    insertedbyid = models.ForeignKey('User', null=True, db_column=u'InsertedById', blank=True) # Field name made lowercase.
    networkscope = models.CharField(db_column=u'NetworkScope', choices=[(u'AllNetworks', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Network Scope') # Field name made lowercase.
    visibility = models.CharField(db_column=u'Visibility', choices=[(u'AllUsers', None), (u'InternalUsers', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Visibility') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'DashboardComponentFeed'
        verbose_name = 'Dashboard Component Feed'
        verbose_name_plural = 'Dashboard Component Feed'
        # keyPrefix = 'None'

class Dashboardfeed(models.Model):
    parentid = models.ForeignKey('Dashboard', db_column=u'ParentId') # Field name made lowercase.
    type = models.CharField(db_column=u'Type', choices=[(u'TrackedChange', u'Tracked Change'), (u'UserStatus', u'User Status'), (u'TextPost', u'Text Post'), (u'AdvancedTextPost', u'Advanced Text Post'), (u'LinkPost', u'Link Post'), (u'ContentPost', u'Content Post'), (u'PollPost', u'Poll'), (u'RypplePost', u'Work.com Thanks'), (u'ProfileSkillPost', u'Profile Skill Post'), (u'DashboardComponentSnapshot', u'Dashboard Component Snapshot'), (u'ApprovalPost', u'Approval Post'), (u'CaseCommentPost', u'Case Comment Feed'), (u'ReplyPost', u'Reply Post'), (u'EmailMessageEvent', u'Email Message Feed'), (u'CallLogPost', u'Call Log Feed'), (u'ChangeStatusPost', u'Change Status Feed'), (u'AttachArticleEvent', u'Attached Article'), (u'MilestoneEvent', u'Milestone Event'), (u'ActivityEvent', u'Activity Change'), (u'ChatTranscriptPost', u'Chat Transcript Post'), (u'CollaborationGroupCreated', u'Collaboration Group Created'), (u'CollaborationGroupUnarchived', u'Collaboration Group Reactivated'), (u'SocialPost', u'Social Post'), (u'QuestionPost', u'Question Post'), (u'FacebookPost', u'Facebook Post'), (u'BasicTemplateFeedItem', u'Basic Template Post'), (u'CreateRecordEvent', u'Created Record'), (u'CanvasPost', u'Canvas'), (u'AnnouncementPost', u'a')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Feed Item Type') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    commentcount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Comment Count', db_column=u'CommentCount') # Field name made lowercase.
    likecount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Like Count', db_column=u'LikeCount') # Field name made lowercase.
    title = models.CharField(max_length=255, verbose_name=u'Title', sf_read_only=models.READ_ONLY, db_column=u'Title', blank=True) # Field name made lowercase.
    body = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Body', db_column=u'Body', blank=True) # Field name made lowercase.
    linkurl = models.URLField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Link Url', db_column=u'LinkUrl', blank=True) # Field name made lowercase.
    relatedrecordid = models.ForeignKey('Contentversion', null=True, db_column=u'RelatedRecordId', blank=True) # Field name made lowercase.
    contentdata = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Content Data', db_column=u'ContentData', blank=True) # Field name made lowercase.
    contentfilename = models.CharField(max_length=255, verbose_name=u'Content File Name', sf_read_only=models.READ_ONLY, db_column=u'ContentFileName', blank=True) # Field name made lowercase.
    contentdescription = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Content Description', db_column=u'ContentDescription', blank=True) # Field name made lowercase.
    contenttype = models.CharField(max_length=120, verbose_name=u'Content File Type', sf_read_only=models.READ_ONLY, db_column=u'ContentType', blank=True) # Field name made lowercase.
    contentsize = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Content Size', db_column=u'ContentSize', blank=True) # Field name made lowercase.
    insertedbyid = models.ForeignKey('User', null=True, db_column=u'InsertedById', blank=True) # Field name made lowercase.
    networkscope = models.CharField(db_column=u'NetworkScope', choices=[(u'AllNetworks', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Network Scope') # Field name made lowercase.
    visibility = models.CharField(db_column=u'Visibility', choices=[(u'AllUsers', None), (u'InternalUsers', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Visibility') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'DashboardFeed'
        verbose_name = 'Dashboard Feed'
        verbose_name_plural = 'Dashboard Feed'
        # keyPrefix = 'None'

class DatamigrationitemC(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'Name', sf_read_only=models.READ_ONLY, db_column=u'Name') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    datamigration__c = models.ForeignKey('DatamigrationC', db_column=u'DataMigration__c') # Field name made lowercase.
    alt1__c = models.CharField(max_length=30, verbose_name=u'ALT1', db_column=u'ALT1__c', blank=True) # Field name made lowercase.
    alt2__c = models.CharField(max_length=30, verbose_name=u'ALT2', db_column=u'ALT2__c', blank=True) # Field name made lowercase.
    accountmigrationdetails__c = models.TextField(verbose_name=u'Account Migration Details', db_column=u'AccountMigrationDetails__c', blank=True) # Field name made lowercase.
    accountmigrationstatus__c = models.CharField(blank=True, max_length=255, verbose_name=u'Account Migration Status', db_column=u'AccountMigrationStatus__c', choices=[(u'New Account Created', u'New Account Created'), (u'Existing Account Found', u'Existing Account Found')]) # Field name made lowercase.
    account__c = models.ForeignKey('Account', null=True, db_column=u'Account__c', blank=True) # Field name made lowercase.
    address_1__c = models.CharField(max_length=80, verbose_name=u'Address_1', db_column=u'Address_1__c', blank=True) # Field name made lowercase.
    address_2__c = models.CharField(max_length=80, verbose_name=u'Address_2', db_column=u'Address_2__c', blank=True) # Field name made lowercase.
    birth_dt__c = models.CharField(max_length=20, verbose_name=u'Birth_Dt', db_column=u'Birth_Dt__c', blank=True) # Field name made lowercase.
    cert__c = models.CharField(max_length=20, verbose_name=u'Cert_#', db_column=u'Cert__c', blank=True) # Field name made lowercase.
    city__c = models.CharField(max_length=50, verbose_name=u'City', db_column=u'City__c', blank=True) # Field name made lowercase.
    client_id__c = models.CharField(max_length=10, verbose_name=u'Client_ID', db_column=u'Client_ID__c', blank=True) # Field name made lowercase.
    client_name__c = models.CharField(max_length=150, verbose_name=u'Client_Name', db_column=u'Client_Name__c', blank=True) # Field name made lowercase.
    county__c = models.CharField(max_length=50, verbose_name=u'County', db_column=u'County__c', blank=True) # Field name made lowercase.
    eff_dt__c = models.CharField(max_length=20, verbose_name=u'Eff_Dt', db_column=u'Eff_Dt__c', blank=True) # Field name made lowercase.
    email__c = models.CharField(max_length=50, verbose_name=u'Email', db_column=u'Email__c', blank=True) # Field name made lowercase.
    errordetails__c = models.TextField(verbose_name=u'Error Details', db_column=u'ErrorDetails__c', blank=True) # Field name made lowercase.
    first_name__c = models.CharField(max_length=100, verbose_name=u'First_Name', db_column=u'First_Name__c', blank=True) # Field name made lowercase.
    gender__c = models.CharField(max_length=5, verbose_name=u'Gender', db_column=u'Gender__c', blank=True) # Field name made lowercase.
    last_name__c = models.CharField(max_length=100, verbose_name=u'Last_Name', db_column=u'Last_Name__c', blank=True) # Field name made lowercase.
    mi__c = models.CharField(max_length=10, verbose_name=u'MI', db_column=u'MI__c', blank=True) # Field name made lowercase.
    migrationstatus__c = models.CharField(blank=True, max_length=255, verbose_name=u'Migration Status', db_column=u'MigrationStatus__c', choices=[(u'Not Started', u'Not Started'), (u'In Progress', u'In Progress'), (u'Completed - Success', u'Completed - Success'), (u'Completed - Error', u'Completed - Error')]) # Field name made lowercase.
    phone__c = models.CharField(max_length=20, verbose_name=u'Phone', db_column=u'Phone__c', blank=True) # Field name made lowercase.
    plan_id__c = models.CharField(max_length=20, verbose_name=u'Plan_ID', db_column=u'Plan_ID__c', blank=True) # Field name made lowercase.
    product_id__c = models.CharField(max_length=50, verbose_name=u'Product_ID', db_column=u'Product_ID__c', blank=True) # Field name made lowercase.
    race__c = models.CharField(max_length=20, verbose_name=u'Race', db_column=u'Race__c', blank=True) # Field name made lowercase.
    relation__c = models.CharField(max_length=20, verbose_name=u'Relation', db_column=u'Relation__c', blank=True) # Field name made lowercase.
    retro_mo_1__c = models.CharField(max_length=10, verbose_name=u'Retro Mo 1', db_column=u'Retro_Mo_1__c', blank=True) # Field name made lowercase.
    retro_mo_2__c = models.CharField(max_length=10, verbose_name=u'Retro Mo 2', db_column=u'Retro_Mo_2__c', blank=True) # Field name made lowercase.
    retro_mo_3__c = models.CharField(max_length=10, verbose_name=u'Retro Mo 3', db_column=u'Retro_Mo_3__c', blank=True) # Field name made lowercase.
    ssn__c = models.CharField(max_length=10, verbose_name=u'SSN', db_column=u'SSN__c', blank=True) # Field name made lowercase.
    st__c = models.CharField(max_length=2, verbose_name=u'ST', db_column=u'ST__c', blank=True) # Field name made lowercase.
    term_dt__c = models.CharField(max_length=20, verbose_name=u'Term_Dt', db_column=u'Term_Dt__c', blank=True) # Field name made lowercase.
    updated__c = models.CharField(max_length=20, verbose_name=u'Updated', db_column=u'Updated__c', blank=True) # Field name made lowercase.
    zip__c = models.CharField(max_length=10, verbose_name=u'ZIP', db_column=u'ZIP__c', blank=True) # Field name made lowercase.
    status__c = models.CharField(max_length=10, verbose_name=u'status', blank=True)
    familymigrationdetails__c = models.TextField(verbose_name=u'Family Migration Details', db_column=u'FamilyMigrationDetails__c', blank=True) # Field name made lowercase.
    family__c = models.ForeignKey('FamilyC', null=True, db_column=u'Family__c', blank=True) # Field name made lowercase.
    opportunitymigrationdetails__c = models.TextField(verbose_name=u'Opportunity Migration Details', db_column=u'OpportunityMigrationDetails__c', blank=True) # Field name made lowercase.
    opportunity__c = models.ForeignKey('Opportunity', null=True, db_column=u'Opportunity__c', blank=True) # Field name made lowercase.
    policymigrationdetails__c = models.TextField(verbose_name=u'Policy Migration Details', db_column=u'PolicyMigrationDetails__c', blank=True) # Field name made lowercase.
    policy__c = models.ForeignKey('PolicyC', null=True, db_column=u'Policy__c', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'DataMigrationItem__c'
        verbose_name = 'Data Migration Item'
        verbose_name_plural = 'Data Migration Items'
        # keyPrefix = 'a0Q'

class DatamigrationC(models.Model):
    ownerid = models.ForeignKey('Group', db_column=u'OwnerId') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'Name', sf_read_only=models.READ_ONLY, db_column=u'Name') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    lastvieweddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Viewed Date', db_column=u'LastViewedDate', blank=True) # Field name made lowercase.
    lastreferenceddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Referenced Date', db_column=u'LastReferencedDate', blank=True) # Field name made lowercase.
    migrationstatus__c = models.CharField(blank=True, max_length=255, verbose_name=u'Migration Status', db_column=u'MigrationStatus__c', choices=[(u'Not Started', u'Not Started'), (u'In Progress', u'In Progress'), (u'Completed - Success', u'Completed - Success'), (u'Completed - Error', u'Completed - Error')]) # Field name made lowercase.
    totalerrors__c = models.DecimalField(decimal_places=0, db_column=u'TotalErrors__c', sf_read_only=models.READ_ONLY, max_digits=18, blank=True, null=True, verbose_name=u'Total Errors') # Field name made lowercase.
    totalrecords__c = models.DecimalField(decimal_places=0, db_column=u'TotalRecords__c', sf_read_only=models.READ_ONLY, max_digits=18, blank=True, null=True, verbose_name=u'Total Records') # Field name made lowercase.
    totalsuccess__c = models.DecimalField(decimal_places=0, db_column=u'TotalSuccess__c', sf_read_only=models.READ_ONLY, max_digits=18, blank=True, null=True, verbose_name=u'Total Success') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'DataMigration__c'
        verbose_name = 'Data Migration'
        verbose_name_plural = 'Data Migration'
        # keyPrefix = 'a0R'

class Datacloudownedentity(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=255, verbose_name=u'Description', sf_read_only=models.READ_ONLY, db_column=u'Name') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    datadotcomkey = models.CharField(max_length=25, verbose_name=u'Data.com key', sf_read_only=models.READ_ONLY, db_column=u'DataDotComKey') # Field name made lowercase.
    datacloudentitytype = models.CharField(max_length=255, verbose_name=u'Data.com Object Type', sf_read_only=models.READ_ONLY, db_column=u'DatacloudEntityType', choices=[(u'0', u'Data.com Contact'), (u'1', u'Data.com Account'), (u'2', u'Datacloud D&B Company'), (u'4', u'Data.com Social Profile')]) # Field name made lowercase.
    userid = models.ForeignKey('User', db_column=u'UserId') # Field name made lowercase.
    purchaseusageid = models.ForeignKey('Datacloudpurchaseusage', null=True, db_column=u'PurchaseUsageId', blank=True) # Field name made lowercase.
    purchasetype = models.CharField(db_column=u'PurchaseType', choices=[(u'0', u'Added'), (u'1', u'Exported'), (u'2', u'API')], max_length=255, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Data.com Purchase Type') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'DatacloudOwnedEntity'
        verbose_name = 'Data.com Owned Entity'
        verbose_name_plural = 'Data.com Owned Entity'
        # keyPrefix = '09O'

class Datacloudpurchaseusage(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=255, verbose_name=u'Sequence ID', sf_read_only=models.READ_ONLY, db_column=u'Name') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    userid = models.ForeignKey('User', db_column=u'UserId') # Field name made lowercase.
    usertype = models.CharField(max_length=255, verbose_name=u'Data.com Usage Type', sf_read_only=models.READ_ONLY, db_column=u'UserType', choices=[(u'0', u'Data.com Monthly Usage'), (u'1', u'Data.com List Pool Usage')]) # Field name made lowercase.
    purchasetype = models.CharField(max_length=255, verbose_name=u'Data.com Purchase Type', sf_read_only=models.READ_ONLY, db_column=u'PurchaseType', choices=[(u'0', u'Added'), (u'1', u'Exported'), (u'2', u'API')]) # Field name made lowercase.
    datacloudentitytype = models.CharField(max_length=255, verbose_name=u'Data.com Object Type', sf_read_only=models.READ_ONLY, db_column=u'DatacloudEntityType', choices=[(u'0', u'Data.com Contact'), (u'1', u'Data.com Account'), (u'2', u'Datacloud D&B Company'), (u'4', u'Data.com Social Profile')]) # Field name made lowercase.
    usage = models.DecimalField(sf_read_only=models.READ_ONLY, verbose_name=u'Purchase Count', max_digits=18, db_column=u'Usage', decimal_places=0) # Field name made lowercase.
    description = models.CharField(max_length=255, verbose_name=u'Description', sf_read_only=models.READ_ONLY, db_column=u'Description', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'DatacloudPurchaseUsage'
        verbose_name = 'Data.com Usage'
        verbose_name_plural = 'Data.com Usage'
        # keyPrefix = '09F'

class Declinedeventrelation(models.Model):
    relationid = models.ForeignKey('Contact', null=True, db_column=u'RelationId', blank=True) # Field name made lowercase.
    eventid = models.ForeignKey('Event', null=True, db_column=u'EventId', blank=True) # Field name made lowercase.
    accountid = models.ForeignKey('Account', null=True, db_column=u'AccountId', blank=True) # Field name made lowercase.
    respondeddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Response Date', db_column=u'RespondedDate', blank=True) # Field name made lowercase.
    response = models.CharField(max_length=255, verbose_name=u'Response', sf_read_only=models.READ_ONLY, db_column=u'Response', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    type = models.CharField(max_length=50, verbose_name=u'Type', sf_read_only=models.READ_ONLY, db_column=u'Type', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'DeclinedEventRelation'
        verbose_name = 'Declined Event Relation'
        verbose_name_plural = 'Declined Event Relations'
        # keyPrefix = 'None'

class Document(models.Model):
    folderid = models.ForeignKey('Folder', db_column=u'FolderId') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=255, verbose_name=u'Document Name', db_column=u'Name') # Field name made lowercase.
    developername = models.CharField(max_length=80, verbose_name=u'Document Unique Name', db_column=u'DeveloperName') # Field name made lowercase.
    namespaceprefix = models.CharField(max_length=15, verbose_name=u'Namespace Prefix', sf_read_only=models.READ_ONLY, db_column=u'NamespacePrefix', blank=True) # Field name made lowercase.
    contenttype = models.CharField(max_length=120, verbose_name=u'MIME Type', db_column=u'ContentType', blank=True) # Field name made lowercase.
    type = models.CharField(max_length=40, verbose_name=u'File Extension', db_column=u'Type', blank=True) # Field name made lowercase.
    ispublic = models.BooleanField(verbose_name=u'Externally Available', db_column=u'IsPublic') # Field name made lowercase.
    bodylength = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Body Length', db_column=u'BodyLength') # Field name made lowercase.
    body = models.TextField(verbose_name=u'Body', db_column=u'Body', blank=True) # Field name made lowercase.
    url = models.CharField(max_length=255, verbose_name=u'Url', db_column=u'Url', blank=True) # Field name made lowercase.
    description = models.TextField(verbose_name=u'Description', db_column=u'Description', blank=True) # Field name made lowercase.
    keywords = models.CharField(max_length=255, verbose_name=u'Keywords', db_column=u'Keywords', blank=True) # Field name made lowercase.
    isinternaluseonly = models.BooleanField(verbose_name=u'Internal Use Only', db_column=u'IsInternalUseOnly') # Field name made lowercase.
    authorid = models.ForeignKey('User', db_column=u'AuthorId') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    isbodysearchable = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Document Content Searchable', db_column=u'IsBodySearchable') # Field name made lowercase.
    lastvieweddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Viewed Date', db_column=u'LastViewedDate', blank=True) # Field name made lowercase.
    lastreferenceddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Referenced Date', db_column=u'LastReferencedDate', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Document'
        verbose_name = 'Document'
        verbose_name_plural = 'Documents'
        # keyPrefix = '015'

class Documentattachmentmap(models.Model):
    parentid = models.ForeignKey('Emailtemplate', db_column=u'ParentId') # Field name made lowercase.
    documentid = models.ForeignKey('Document', db_column=u'DocumentId') # Field name made lowercase.
    documentsequence = models.IntegerField(verbose_name=u'Attachment Sequence', db_column=u'DocumentSequence') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'DocumentAttachmentMap'
        verbose_name = 'Document Entity Map'
        verbose_name_plural = 'Document Entity Map'
        # keyPrefix = '05X'

class Domain(models.Model):
    domaintype = models.CharField(max_length=40, verbose_name=u'Domain Type', sf_read_only=models.READ_ONLY, db_column=u'DomainType', choices=[(u'DNS', u'Domain Name System (DNS)'), (u'FacebookPage', u'Facebook Page')]) # Field name made lowercase.
    domain = models.CharField(max_length=765, verbose_name=u'Domain Name', sf_read_only=models.READ_ONLY, db_column=u'Domain') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Domain'
        verbose_name = 'Domain'
        verbose_name_plural = 'Domains'
        # keyPrefix = '0I4'

class Domainsite(models.Model):
    domainid = models.ForeignKey('Domain', db_column=u'DomainId') # Field name made lowercase.
    siteid = models.ForeignKey('Site', db_column=u'SiteId') # Field name made lowercase.
    pathprefix = models.CharField(max_length=255, verbose_name=u'Path', sf_read_only=models.READ_ONLY, db_column=u'PathPrefix') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'DomainSite'
        verbose_name = 'Custom URL'
        verbose_name_plural = 'Custom URLs'
        # keyPrefix = '0Jf'

class Emailservicesaddress(models.Model):
    isactive = models.BooleanField(verbose_name=u'Active', db_column=u'IsActive') # Field name made lowercase.
    localpart = models.CharField(max_length=64, verbose_name=u'Email address', db_column=u'LocalPart') # Field name made lowercase.
    emaildomainname = models.CharField(max_length=255, verbose_name=u'Email address domain', sf_read_only=models.READ_ONLY, db_column=u'EmailDomainName', blank=True) # Field name made lowercase.
    authorizedsenders = models.TextField(verbose_name=u'Accept Email From', db_column=u'AuthorizedSenders', blank=True) # Field name made lowercase.
    runasuserid = models.ForeignKey('User', db_column=u'RunAsUserId') # Field name made lowercase.
    functionid = models.ForeignKey('Emailservicesfunction', db_column=u'FunctionId') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'EmailServicesAddress'
        verbose_name = 'Email Services Address'
        verbose_name_plural = 'Email Services Address'
        # keyPrefix = '093'

class Emailservicesfunction(models.Model):
    isactive = models.BooleanField(verbose_name=u'Active', db_column=u'IsActive') # Field name made lowercase.
    functionname = models.CharField(max_length=64, verbose_name=u'Email Service Name', db_column=u'FunctionName') # Field name made lowercase.
    authorizedsenders = models.TextField(verbose_name=u'Accept Email From', db_column=u'AuthorizedSenders', blank=True) # Field name made lowercase.
    isauthenticationrequired = models.BooleanField(verbose_name=u'Advanced Email Security Settings', db_column=u'IsAuthenticationRequired') # Field name made lowercase.
    istlsrequired = models.BooleanField(verbose_name=u'TLS Required', db_column=u'IsTlsRequired') # Field name made lowercase.
    attachmentoption = models.CharField(max_length=40, verbose_name=u'Accept Attachments', db_column=u'AttachmentOption', choices=[(u'0', u'None'), (u'1', u'Text attachments only'), (u'2', u'Binary attachments only'), (u'3', u'All'), (u'4', u'Attachment names only, no content')]) # Field name made lowercase.
    apexclassid = models.ForeignKey('Apexclass', null=True, db_column=u'ApexClassId', blank=True) # Field name made lowercase.
    overlimitaction = models.CharField(blank=True, max_length=40, verbose_name=u'Over Email Rate Limit Action', db_column=u'OverLimitAction', choices=[(u'0', u'Use System Default'), (u'1', u'Bounce message'), (u'2', u'Discard message'), (u'3', u'Requeue message')]) # Field name made lowercase.
    functioninactiveaction = models.CharField(blank=True, max_length=40, verbose_name=u'Deactivated Email Service Action', db_column=u'FunctionInactiveAction', choices=[(u'0', u'Use System Default'), (u'1', u'Bounce message'), (u'2', u'Discard message'), (u'3', u'Requeue message')]) # Field name made lowercase.
    addressinactiveaction = models.CharField(blank=True, max_length=40, verbose_name=u'Deactivated Email Address Action', db_column=u'AddressInactiveAction', choices=[(u'0', u'Use System Default'), (u'1', u'Bounce message'), (u'2', u'Discard message'), (u'3', u'Requeue message')]) # Field name made lowercase.
    authenticationfailureaction = models.CharField(blank=True, max_length=40, verbose_name=u'Unauthenticated Sender Action', db_column=u'AuthenticationFailureAction', choices=[(u'0', u'Use System Default'), (u'1', u'Bounce message'), (u'2', u'Discard message'), (u'3', u'Requeue message')]) # Field name made lowercase.
    authorizationfailureaction = models.CharField(blank=True, max_length=40, verbose_name=u'Unauthorized Sender Action', db_column=u'AuthorizationFailureAction', choices=[(u'0', u'Use System Default'), (u'1', u'Bounce message'), (u'2', u'Discard message'), (u'3', u'Requeue message')]) # Field name made lowercase.
    iserrorroutingenabled = models.BooleanField(verbose_name=u'Enable Error Routing', db_column=u'IsErrorRoutingEnabled') # Field name made lowercase.
    errorroutingaddress = models.EmailField(null=True, verbose_name=u'Route Error Emails to This Email Address', db_column=u'ErrorRoutingAddress', blank=True) # Field name made lowercase.
    istextattachmentsasbinary = models.BooleanField(verbose_name=u'Convert Text Attachments to Binary Attachments', db_column=u'IsTextAttachmentsAsBinary') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'EmailServicesFunction'
        verbose_name = 'Email Service'
        verbose_name_plural = 'Email Services'
        # keyPrefix = '091'

class Emailstatus(models.Model):
    taskid = models.ForeignKey('Task', db_column=u'TaskId') # Field name made lowercase.
    whoid = models.ForeignKey('Contact', null=True, db_column=u'WhoId', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    timesopened = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'# Times Opened', db_column=u'TimesOpened') # Field name made lowercase.
    firstopendate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Date Opened', db_column=u'FirstOpenDate', blank=True) # Field name made lowercase.
    lastopendate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Opened', db_column=u'LastOpenDate', blank=True) # Field name made lowercase.
    emailtemplatename = models.CharField(max_length=80, verbose_name=u'Email Template Name', sf_read_only=models.READ_ONLY, db_column=u'EmailTemplateName', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'EmailStatus'
        verbose_name = 'Email Status'
        verbose_name_plural = 'Email Status'
        # keyPrefix = '018'

class Emailtemplate(models.Model):
    name = models.CharField(max_length=80, verbose_name=u'Email Template Name', db_column=u'Name') # Field name made lowercase.
    developername = models.CharField(max_length=80, verbose_name=u'Template Unique Name', db_column=u'DeveloperName') # Field name made lowercase.
    namespaceprefix = models.CharField(max_length=15, verbose_name=u'Namespace Prefix', sf_read_only=models.READ_ONLY, db_column=u'NamespacePrefix', blank=True) # Field name made lowercase.
    ownerid = models.ForeignKey('User', db_column=u'OwnerId') # Field name made lowercase.
    folderid = models.ForeignKey('Folder', db_column=u'FolderId') # Field name made lowercase.
    brandtemplateid = models.ForeignKey('Brandtemplate', null=True, db_column=u'BrandTemplateId', blank=True) # Field name made lowercase.
    templatestyle = models.CharField(max_length=40, verbose_name=u'Style', sf_read_only=models.NOT_UPDATEABLE, db_column=u'TemplateStyle', choices=[(u'none', u'No Email Layout'), (u'freeForm', u'Free Form Letter'), (u'formalLetter', u'Formal Letter'), (u'promotionRight', u'Promotion (Right)'), (u'promotionLeft', u'Promotion (Left)'), (u'newsletter', u'Newsletter'), (u'products', u'Products')]) # Field name made lowercase.
    isactive = models.BooleanField(verbose_name=u'Available For Use', db_column=u'IsActive') # Field name made lowercase.
    templatetype = models.CharField(max_length=40, verbose_name=u'Template Type', sf_read_only=models.NOT_UPDATEABLE, db_column=u'TemplateType', choices=[(u'text', u'Text'), (u'html', u'HTML'), (u'custom', u'Custom'), (u'visualforce', u'Visualforce')]) # Field name made lowercase.
    encoding = models.CharField(blank=True, max_length=40, verbose_name=u'Encoding', db_column=u'Encoding', choices=[(u'UTF-8', u'Unicode (UTF-8)'), (u'ISO-8859-1', u'General US & Western Europe (ISO-8859-1, ISO-LATIN-1)'), (u'Shift_JIS', u'Japanese (Shift-JIS)'), (u'ISO-2022-JP', u'Japanese (JIS)'), (u'EUC-JP', u'Japanese (EUC)'), (u'ks_c_5601-1987', u'Korean (ks_c_5601-1987)'), (u'Big5', u'Traditional Chinese (Big5)'), (u'GB2312', u'Simplified Chinese (GB2312)'), (u'Big5-HKSCS', u'Traditional Chinese Hong Kong (Big5-HKSCS)'), (u'x-SJIS_0213', u'Japanese (Shift-JIS_2004)')]) # Field name made lowercase.
    description = models.CharField(max_length=4000, verbose_name=u'Description', db_column=u'Description', blank=True) # Field name made lowercase.
    subject = models.CharField(max_length=255, verbose_name=u'Subject', db_column=u'Subject', blank=True) # Field name made lowercase.
    htmlvalue = models.TextField(verbose_name=u'HTML Value', db_column=u'HtmlValue', blank=True) # Field name made lowercase.
    body = models.TextField(verbose_name=u'Email Body', db_column=u'Body', blank=True) # Field name made lowercase.
    timesused = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Times Used', db_column=u'TimesUsed', blank=True) # Field name made lowercase.
    lastuseddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Used Date', db_column=u'LastUsedDate', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    apiversion = models.DecimalField(db_column=u'ApiVersion', decimal_places=1, max_digits=18, blank=True, null=True, verbose_name=u'API Version') # Field name made lowercase.
    markup = models.TextField(verbose_name=u'Markup', db_column=u'Markup', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'EmailTemplate'
        verbose_name = 'Email Template'
        verbose_name_plural = 'Email Templates'
        # keyPrefix = '00X'

class EmployerPaymentsC(models.Model):
    ownerid = models.ForeignKey('Group', db_column=u'OwnerId') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'Employer Payment Name', sf_read_only=models.READ_ONLY, db_column=u'Name') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    uhhapi_emppaymentid__c = models.DecimalField(db_column=u'uhhApi_empPaymentId__c', decimal_places=0, max_digits=18, blank=True, null=True, verbose_name=u'uhhApi_empPaymentId') # Field name made lowercase.
    uhh_employer_id__c = models.DecimalField(null=True, verbose_name=u'uhh_employer_id', max_digits=18, decimal_places=0, blank=True)
    uhh_paymentsid__c = models.DecimalField(db_column=u'uhh_paymentsId__c', decimal_places=0, max_digits=18, blank=True, null=True, verbose_name=u'uhh_paymentsId') # Field name made lowercase.
    uhh_update_at__c = models.DateTimeField(null=True, verbose_name=u'uhh_update_at', blank=True)
    imported_source_point__c = models.CharField(blank=True, max_length=255, verbose_name=u'Imported Source Point', db_column=u'Imported_Source_Point__c', choices=[(u'Dataloader', u'Dataloader'), (u'EDI', u'EDI'), (u'Web-Service', u'Web-Service')]) # Field name made lowercase.
    imported__c = models.CharField(blank=True, max_length=255, verbose_name=u'Imported', db_column=u'Imported__c', choices=[(u'Javalina', u'Javalina'), (u'Nevada Health Link', u'Nevada Health Link')]) # Field name made lowercase.
    isetlupdate__c = models.BooleanField(verbose_name=u'IsETLUpdate', db_column=u'IsETLUpdate__c') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Employer_Payments__c'
        verbose_name = 'Employer Payment'
        verbose_name_plural = 'Employer Payments'
        # keyPrefix = 'a0Y'

class Entitysubscription(models.Model):
    parentid = models.ForeignKey('Account', db_column=u'ParentId') # Field name made lowercase.
    subscriberid = models.ForeignKey('User', db_column=u'SubscriberId') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    networkid = models.ForeignKey('Network', null=True, db_column=u'NetworkId', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'EntitySubscription'
        verbose_name = 'Entity Subscription'
        verbose_name_plural = 'Entity Subscriptions'
        # keyPrefix = '0E8'

class Event(models.Model):
    whoid = models.ForeignKey('Contact', null=True, db_column=u'WhoId', blank=True) # Field name made lowercase.
    whatid = models.ForeignKey('Account', null=True, db_column=u'WhatId', blank=True) # Field name made lowercase.
    whocount = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Relation Count', db_column=u'WhoCount', blank=True) # Field name made lowercase.
    whatcount = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Related To Count', db_column=u'WhatCount', blank=True) # Field name made lowercase.
    subject = models.CharField(blank=True, max_length=255, verbose_name=u'Subject', db_column=u'Subject', choices=[(u'Call', u'Call'), (u'Email', u'Email'), (u'Meeting', u'Meeting'), (u'Send Letter/Quote', u'Send Letter/Quote'), (u'Other', u'Other')]) # Field name made lowercase.
    location = models.CharField(max_length=255, verbose_name=u'Location', db_column=u'Location', blank=True) # Field name made lowercase.
    activitydatetime = models.DateTimeField(null=True, verbose_name=u'Due Date Time', db_column=u'ActivityDateTime', blank=True) # Field name made lowercase.
    activitydate = models.DateField(null=True, verbose_name=u'Due Date Only', db_column=u'ActivityDate', blank=True) # Field name made lowercase.
    durationinminutes = models.IntegerField(null=True, verbose_name=u'Duration', db_column=u'DurationInMinutes', blank=True) # Field name made lowercase.
    startdatetime = models.DateTimeField(null=True, verbose_name=u'Start Date Time', db_column=u'StartDateTime', blank=True) # Field name made lowercase.
    enddatetime = models.DateTimeField(null=True, verbose_name=u'End Date Time', db_column=u'EndDateTime', blank=True) # Field name made lowercase.
    description = models.TextField(verbose_name=u'Description', db_column=u'Description', blank=True) # Field name made lowercase.
    accountid = models.ForeignKey('Account', null=True, db_column=u'AccountId', blank=True) # Field name made lowercase.
    ownerid = models.ForeignKey('User', db_column=u'OwnerId') # Field name made lowercase.
    type = models.CharField(blank=True, max_length=40, verbose_name=u'Type', db_column=u'Type', choices=[(u'Email', u'Email'), (u'Meeting', u'Meeting'), (u'Other', u'Other'), (u'Call', u'Call')]) # Field name made lowercase.
    isprivate = models.BooleanField(verbose_name=u'Private', db_column=u'IsPrivate') # Field name made lowercase.
    showas = models.CharField(blank=True, max_length=40, verbose_name=u'Show Time As', db_column=u'ShowAs', choices=[(u'Busy', u'Busy'), (u'OutOfOffice', u'Out of Office'), (u'Free', u'Free')]) # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    ischild = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Is Child', db_column=u'IsChild') # Field name made lowercase.
    isgroupevent = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Is Group Event', db_column=u'IsGroupEvent') # Field name made lowercase.
    groupeventtype = models.CharField(db_column=u'GroupEventType', choices=[(u'0', u'Non-group Event'), (u'1', u'Group Event'), (u'2', u'Proposed Event')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Group Event Type') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    isarchived = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Archived', db_column=u'IsArchived') # Field name made lowercase.
    recurrenceactivityid = models.ForeignKey('self', null=True, db_column=u'RecurrenceActivityId', blank=True) # Field name made lowercase.
    isrecurrence = models.BooleanField(sf_read_only=models.NOT_UPDATEABLE, verbose_name=u'Create Recurring Series of Events', db_column=u'IsRecurrence') # Field name made lowercase.
    recurrencestartdatetime = models.DateTimeField(null=True, verbose_name=u'Start Date', db_column=u'RecurrenceStartDateTime', blank=True) # Field name made lowercase.
    recurrenceenddateonly = models.DateField(null=True, verbose_name=u'End Date', db_column=u'RecurrenceEndDateOnly', blank=True) # Field name made lowercase.
    recurrencetimezonesidkey = models.CharField(blank=True, max_length=40, verbose_name=u'Recurrence Time Zone', db_column=u'RecurrenceTimeZoneSidKey', choices=[(u'Pacific/Kiritimati', u'(GMT+14:00) Line Islands Time (Pacific/Kiritimati)'), (u'Pacific/Chatham', u'(GMT+13:45) Chatham Daylight Time (Pacific/Chatham)'), (u'Pacific/Auckland', u'(GMT+13:00) New Zealand Daylight Time (Pacific/Auckland)'), (u'Pacific/Enderbury', u'(GMT+13:00) Phoenix Islands Time (Pacific/Enderbury)'), (u'Pacific/Fiji', u'(GMT+13:00) Fiji Summer Time (Pacific/Fiji)'), (u'Pacific/Tongatapu', u'(GMT+13:00) Tonga Time (Pacific/Tongatapu)'), (u'Asia/Kamchatka', u'(GMT+12:00) Magadan Time (Asia/Kamchatka)'), (u'Pacific/Norfolk', u'(GMT+11:30) Norfolk Islands Time (Pacific/Norfolk)'), (u'Australia/Lord_Howe', u'(GMT+11:00) Lord Howe Daylight Time (Australia/Lord_Howe)'), (u'Australia/Sydney', u'(GMT+11:00) Australian Eastern Daylight Time (Australia/Sydney)'), (u'Pacific/Guadalcanal', u'(GMT+11:00) Solomon Islands Time (Pacific/Guadalcanal)'), (u'Australia/Adelaide', u'(GMT+10:30) Australian Central Daylight Time (Australia/Adelaide)'), (u'Australia/Brisbane', u'(GMT+10:00) Australian Eastern Standard Time (Australia/Brisbane)'), (u'Australia/Darwin', u'(GMT+09:30) Australian Central Standard Time (Australia/Darwin)'), (u'Asia/Seoul', u'(GMT+09:00) Korean Standard Time (Asia/Seoul)'), (u'Asia/Tokyo', u'(GMT+09:00) Japan Standard Time (Asia/Tokyo)'), (u'Asia/Hong_Kong', u'(GMT+08:00) Hong Kong Time (Asia/Hong_Kong)'), (u'Asia/Kuala_Lumpur', u'(GMT+08:00) Malaysia Time (Asia/Kuala_Lumpur)'), (u'Asia/Manila', u'(GMT+08:00) Philippine Time (Asia/Manila)'), (u'Asia/Shanghai', u'(GMT+08:00) China Standard Time (Asia/Shanghai)'), (u'Asia/Singapore', u'(GMT+08:00) Singapore Standard Time (Asia/Singapore)'), (u'Asia/Taipei', u'(GMT+08:00) Taipei Standard Time (Asia/Taipei)'), (u'Australia/Perth', u'(GMT+08:00) Australian Western Standard Time (Australia/Perth)'), (u'Asia/Bangkok', u'(GMT+07:00) Indochina Time (Asia/Bangkok)'), (u'Asia/Ho_Chi_Minh', u'(GMT+07:00) Indochina Time (Asia/Ho_Chi_Minh)'), (u'Asia/Jakarta', u'(GMT+07:00) Western Indonesia Time (Asia/Jakarta)'), (u'Asia/Rangoon', u'(GMT+06:30) Myanmar Time (Asia/Rangoon)'), (u'Asia/Dhaka', u'(GMT+06:00) Bangladesh Time (Asia/Dhaka)'), (u'Asia/Yekaterinburg', u'(GMT+06:00) Yekaterinburg Time (Asia/Yekaterinburg)'), (u'Asia/Kathmandu', u'(GMT+05:45) Nepal Time (Asia/Kathmandu)'), (u'Asia/Colombo', u'(GMT+05:30) India Standard Time (Asia/Colombo)'), (u'Asia/Kolkata', u'(GMT+05:30) India Standard Time (Asia/Kolkata)'), (u'Asia/Baku', u'(GMT+05:00) Azerbaijan Summer Time (Asia/Baku)'), (u'Asia/Karachi', u'(GMT+05:00) Pakistan Time (Asia/Karachi)'), (u'Asia/Tashkent', u'(GMT+05:00) Uzbekistan Time (Asia/Tashkent)'), (u'Asia/Kabul', u'(GMT+04:30) Afghanistan Time (Asia/Kabul)'), (u'Asia/Dubai', u'(GMT+04:00) Gulf Standard Time (Asia/Dubai)'), (u'Asia/Tbilisi', u'(GMT+04:00) Georgia Time (Asia/Tbilisi)'), (u'Asia/Yerevan', u'(GMT+04:00) Armenia Time (Asia/Yerevan)'), (u'Europe/Moscow', u'(GMT+04:00) Moscow Standard Time (Europe/Moscow)'), (u'Asia/Tehran', u'(GMT+03:30) Iran Standard Time (Asia/Tehran)'), (u'Africa/Nairobi', u'(GMT+03:00) East Africa Time (Africa/Nairobi)'), (u'Asia/Baghdad', u'(GMT+03:00) Arabian Standard Time (Asia/Baghdad)'), (u'Asia/Beirut', u'(GMT+03:00) Eastern European Summer Time (Asia/Beirut)'), (u'Asia/Jerusalem', u'(GMT+03:00) Israel Daylight Time (Asia/Jerusalem)'), (u'Asia/Kuwait', u'(GMT+03:00) Arabian Standard Time (Asia/Kuwait)'), (u'Asia/Riyadh', u'(GMT+03:00) Arabian Standard Time (Asia/Riyadh)'), (u'Europe/Athens', u'(GMT+03:00) Eastern European Summer Time (Europe/Athens)'), (u'Europe/Bucharest', u'(GMT+03:00) Eastern European Summer Time (Europe/Bucharest)'), (u'Europe/Helsinki', u'(GMT+03:00) Eastern European Summer Time (Europe/Helsinki)'), (u'Europe/Istanbul', u'(GMT+03:00) Eastern European Summer Time (Europe/Istanbul)'), (u'Europe/Minsk', u'(GMT+03:00) Further-eastern European Time (Europe/Minsk)'), (u'Africa/Cairo', u'(GMT+02:00) Eastern European Time (Africa/Cairo)'), (u'Africa/Johannesburg', u'(GMT+02:00) South Africa Standard Time (Africa/Johannesburg)'), (u'Europe/Amsterdam', u'(GMT+02:00) Central European Summer Time (Europe/Amsterdam)'), (u'Europe/Berlin', u'(GMT+02:00) Central European Summer Time (Europe/Berlin)'), (u'Europe/Brussels', u'(GMT+02:00) Central European Summer Time (Europe/Brussels)'), (u'Europe/Paris', u'(GMT+02:00) Central European Summer Time (Europe/Paris)'), (u'Europe/Prague', u'(GMT+02:00) Central European Summer Time (Europe/Prague)'), (u'Europe/Rome', u'(GMT+02:00) Central European Summer Time (Europe/Rome)'), (u'Africa/Algiers', u'(GMT+01:00) Central European Time (Africa/Algiers)'), (u'Europe/Dublin', u'(GMT+01:00) Irish Summer Time (Europe/Dublin)'), (u'Europe/Lisbon', u'(GMT+01:00) Western European Summer Time (Europe/Lisbon)'), (u'Europe/London', u'(GMT+01:00) British Summer Time (Europe/London)'), (u'Africa/Casablanca', u'(GMT+00:00) Western European Time (Africa/Casablanca)'), (u'America/Scoresbysund', u'(GMT+00:00) East Greenland Summer Time (America/Scoresbysund)'), (u'Atlantic/Azores', u'(GMT+00:00) Azores Summer Time (Atlantic/Azores)'), (u'GMT', u'(GMT+00:00) Greenwich Mean Time (GMT)'), (u'Atlantic/Cape_Verde', u'(GMT-01:00) Cape Verde Time (Atlantic/Cape_Verde)'), (u'America/Sao_Paulo', u'(GMT-02:00) Brasilia Summer Time (America/Sao_Paulo)'), (u'Atlantic/South_Georgia', u'(GMT-02:00) South Georgia Time (Atlantic/South_Georgia)'), (u'America/St_Johns', u'(GMT-02:30) Newfoundland Daylight Time (America/St_Johns)'), (u'America/Argentina/Buenos_Aires', u'(GMT-03:00) Argentina Time (America/Argentina/Buenos_Aires)'), (u'America/Halifax', u'(GMT-03:00) Atlantic Daylight Time (America/Halifax)'), (u'America/Santiago', u'(GMT-03:00) Chile Summer Time (America/Santiago)'), (u'Atlantic/Bermuda', u'(GMT-03:00) Atlantic Daylight Time (Atlantic/Bermuda)'), (u'America/Indiana/Indianapolis', u'(GMT-04:00) Eastern Daylight Time (America/Indiana/Indianapolis)'), (u'America/New_York', u'(GMT-04:00) Eastern Daylight Time (America/New_York)'), (u'America/Puerto_Rico', u'(GMT-04:00) Atlantic Standard Time (America/Puerto_Rico)'), (u'America/Caracas', u'(GMT-04:30) Venezuela Time (America/Caracas)'), (u'America/Bogota', u'(GMT-05:00) Colombia Time (America/Bogota)'), (u'America/Chicago', u'(GMT-05:00) Central Daylight Time (America/Chicago)'), (u'America/Lima', u'(GMT-05:00) Peru Time (America/Lima)'), (u'America/Mexico_City', u'(GMT-05:00) Central Daylight Time (America/Mexico_City)'), (u'America/Panama', u'(GMT-05:00) Eastern Standard Time (America/Panama)'), (u'America/Denver', u'(GMT-06:00) Mountain Daylight Time (America/Denver)'), (u'America/El_Salvador', u'(GMT-06:00) Central Standard Time (America/El_Salvador)'), (u'America/Mazatlan', u'(GMT-06:00) Mountain Daylight Time (America/Mazatlan)'), (u'America/Los_Angeles', u'(GMT-07:00) Pacific Daylight Time (America/Los_Angeles)'), (u'America/Phoenix', u'(GMT-07:00) Mountain Standard Time (America/Phoenix)'), (u'America/Tijuana', u'(GMT-07:00) Pacific Daylight Time (America/Tijuana)'), (u'America/Anchorage', u'(GMT-08:00) Alaska Daylight Time (America/Anchorage)'), (u'Pacific/Pitcairn', u'(GMT-08:00) Pitcairn Time (Pacific/Pitcairn)'), (u'America/Adak', u'(GMT-09:00) Hawaii-Aleutian Standard Time (America/Adak)'), (u'Pacific/Gambier', u'(GMT-09:00) Gambier Time (Pacific/Gambier)'), (u'Pacific/Marquesas', u'(GMT-09:30) Marquesas Time (Pacific/Marquesas)'), (u'Pacific/Honolulu', u'(GMT-10:00) Hawaii-Aleutian Standard Time (Pacific/Honolulu)'), (u'Pacific/Niue', u'(GMT-11:00) Niue Time (Pacific/Niue)'), (u'Pacific/Pago_Pago', u'(GMT-11:00) Samoa Standard Time (Pacific/Pago_Pago)')]) # Field name made lowercase.
    recurrencetype = models.CharField(blank=True, max_length=40, verbose_name=u'Recurrence Type', db_column=u'RecurrenceType', choices=[(u'RecursDaily', u'Recurs Daily'), (u'RecursEveryWeekday', u'Recurs Every Weekday'), (u'RecursMonthly', u'Recurs Monthly'), (u'RecursMonthlyNth', u'Recurs Monthy Nth'), (u'RecursWeekly', u'Recurs Weekly'), (u'RecursYearly', u'Recurs Yearly'), (u'RecursYearlyNth', u'Recurs Yearly Nth')]) # Field name made lowercase.
    recurrenceinterval = models.IntegerField(null=True, verbose_name=u'Recurrence Interval', db_column=u'RecurrenceInterval', blank=True) # Field name made lowercase.
    recurrencedayofweekmask = models.IntegerField(null=True, verbose_name=u'Recurrence Day of Week Mask', db_column=u'RecurrenceDayOfWeekMask', blank=True) # Field name made lowercase.
    recurrencedayofmonth = models.IntegerField(null=True, verbose_name=u'Recurrence Day of Month', db_column=u'RecurrenceDayOfMonth', blank=True) # Field name made lowercase.
    recurrenceinstance = models.CharField(blank=True, max_length=40, verbose_name=u'Recurrence Instance', db_column=u'RecurrenceInstance', choices=[(u'First', u'1st'), (u'Second', u'2nd'), (u'Third', u'3rd'), (u'Fourth', u'4th'), (u'Last', u'last')]) # Field name made lowercase.
    recurrencemonthofyear = models.CharField(blank=True, max_length=40, verbose_name=u'Recurrence Month of Year', db_column=u'RecurrenceMonthOfYear', choices=[(u'January', u'January'), (u'February', u'February'), (u'March', u'March'), (u'April', u'April'), (u'May', u'May'), (u'June', u'June'), (u'July', u'July'), (u'August', u'August'), (u'September', u'September'), (u'October', u'October'), (u'November', u'November'), (u'December', u'December')]) # Field name made lowercase.
    reminderdatetime = models.DateTimeField(null=True, verbose_name=u'Reminder Date/Time', db_column=u'ReminderDateTime', blank=True) # Field name made lowercase.
    isreminderset = models.BooleanField(verbose_name=u'Reminder Set', db_column=u'IsReminderSet') # Field name made lowercase.
    x8x8_log__c = models.TextField(help_text=u'Log from 8x8. Field populated with call data.', verbose_name=u'8x8 Log', db_column=u'X8x8_Log__c', blank=True) # Field name made lowercase.
    call_answered_time__c = models.CharField(help_text=u'Time the call was answered by an agent.', max_length=50, verbose_name=u'Call Answered Time', db_column=u'Call_Answered_Time__c', blank=True) # Field name made lowercase.
    call_hangup_time__c = models.TextField(help_text=u'Time the call ended with the agent.', verbose_name=u'Call Hangup Time', db_column=u'Call_Hangup_Time__c', blank=True) # Field name made lowercase.
    call_notes__c = models.TextField(help_text=u'Notes regarding the outcome of the call.', verbose_name=u'Call Notes', db_column=u'Call_Notes__c', blank=True) # Field name made lowercase.
    channel_name__c = models.CharField(help_text=u'Name of the inbound or outbound channel or number dialed by customer.', max_length=100, verbose_name=u'Channel Name', db_column=u'Channel_Name__c', blank=True) # Field name made lowercase.
    queue_name__c = models.CharField(help_text=u'Queue that the inbound or outbound channel directed the caller to.', max_length=100, verbose_name=u'Queue Name', db_column=u'Queue_Name__c', blank=True) # Field name made lowercase.
    original_object_id__c = models.CharField(max_length=18, verbose_name=u'Original Object ID', db_column=u'Original_Object_ID__c', blank=True) # Field name made lowercase.
    transactionid__c = models.CharField(max_length=200, verbose_name=u'Transaction ID', blank=True)
    action__c = models.CharField(blank=True, max_length=255, verbose_name=u'Action', db_column=u'Action__c', choices=[(u'Called: No Contact', u'Called: No Contact'), (u'Contacted: Did not Quote', u'Contacted: Did not Quote'), (u'Contacted: Quoted but did not Sell', u'Contacted: Quoted but did not Sell'), (u'Do Not Call', u'Do Not Call'), (u'Medicaid Eligible', u'Medicaid Eligible'), (u'General Comment', u'General Comment'), (u'Not Interested', u'Not Interested'), (u'Application Completed', u'Application Completed'), (u'Application Incomplete', u'Application Incomplete'), (u'Called: Bad Phone #', u'Called: Bad Phone #'), (u'Contacted: Customer not ready to move forward', u'Contacted: Customer not ready to move forward'), (u'Lead generated through testing process', u'Lead generated through testing process'), (u'Prefers to Work Alone', u'Prefers to Work Alone'), (u'Has Coverage: Not looking to enroll at this time', u'Has Coverage: Not looking to enroll at this time'), (u'Pending HIXID from NHL', u'Pending HIXID from NHL')]) # Field name made lowercase.
    migrated__c = models.BooleanField(help_text=u'Was this record migrated from old tenant?', verbose_name=u'Migrated', db_column=u'Migrated__c') # Field name made lowercase.
    original_owner_name__c = models.CharField(max_length=150, verbose_name=u'Original Owner Name', db_column=u'Original_Owner_Name__c', blank=True) # Field name made lowercase.
    auto_generated__c = models.BooleanField(verbose_name=u'Auto Generated', db_column=u'Auto_Generated__c') # Field name made lowercase.
    current_carrier__c = models.CharField(db_column=u'Current_Carrier__c', choices=[(u'United', u'United'), (u'Sierra', u'Sierra'), (u'HPN', u'HPN'), (u'Coventry', u'Coventry'), (u'St Mary\u2019s', u'St Mary\u2019s'), (u'Aetna', u'Aetna'), (u'Assurant', u'Assurant')], max_length=255, blank=True, help_text=u'Use if action is Has Coverage: Not looking to enroll at this time.', verbose_name=u'Current Carrier') # Field name made lowercase.
    activity_type__c = models.CharField(db_column=u'Activity_Type__c', choices=[(u'Call', u'Call'), (u'Email', u'Email'), (u'Mail', u'Mail'), (u'On-Site', u'On-Site'), (u'SMS', u'SMS'), (u'Case Note', u'Case Note'), (u'Event / Grievance', u'Event / Grievance')], max_length=255, blank=True, help_text=u'Indicated the activity type used to interact with the member.', verbose_name=u'Activity Type') # Field name made lowercase.
    date_interest_expressed__c = models.DateField(help_text=u'Date that interest was expressed by a provider for engaging with NHC.', null=True, verbose_name=u'Date Interest Expressed', db_column=u'Date_Interest_Expressed__c', blank=True) # Field name made lowercase.
    program_contact_type__c = models.CharField(blank=True, max_length=255, verbose_name=u'Program Contact Type', db_column=u'Program_Contact_Type__c', choices=[(u'Asthma Program Initial Telephone Contact', u'Asthma Program Initial Telephone Contact'), (u'Asthma Program Follow-Up Telephone Contact', u'Asthma Program Follow-Up Telephone Contact'), (u'Diabetes Program Initial Telephone Contact', u'Diabetes Program Initial Telephone Contact'), (u'Diabetes Program Follow-Up Telephone Contact', u'Diabetes Program Follow-Up Telephone Contact')]) # Field name made lowercase.
    review_and_update_demographic_info__c = models.BooleanField(help_text=u'During the conversation did you review and update demographic information with the member?', verbose_name=u'Review and update demographic info', db_column=u'Review_and_update_demographic_info__c') # Field name made lowercase.
    review_and_update_practitioner_info__c = models.BooleanField(help_text=u'During the conversation was a review and update practitioner information performed?', verbose_name=u'Review and update practitioner info', db_column=u'Review_and_update_practitioner_info__c') # Field name made lowercase.
    asthma_affecting_work_school_home_etc__c = models.CharField(db_column=u'Asthma_affecting_work_school_home_etc__c', choices=[(u'1', u'1'), (u'2', u'2'), (u'3', u'3'), (u'4', u'4'), (u'5', u'5')], max_length=255, blank=True, help_text=u'In the past 4 weeks, how much of the time did your asthma keep you from getting as much done at work, school or home? The integer represents a five-point Likert Scale from \u201call of the time\u201d to \u201cnone of the time.\u201d', verbose_name=u'Asthma affecting work, school, home, etc') # Field name made lowercase.
    how_often__c = models.CharField(db_column=u'How_often__c', choices=[(u'1', u'1'), (u'2', u'2'), (u'3', u'3'), (u'4', u'4'), (u'5', u'5')], max_length=255, blank=True, help_text=u'During the past 4 weeks, how often has the member had shortness of breath?\r\nThe integer represents a five-point Likert Scale from \u201cmore than once a day\u201d to \u201cnot at all.\u201d', verbose_name=u'How often had shortness of breath?') # Field name made lowercase.
    asthma_symptoms_wake_you__c = models.CharField(db_column=u'Asthma_symptoms_wake_you__c', choices=[(u'1', u'1'), (u'2', u'2'), (u'3', u'3'), (u'4', u'4'), (u'5', u'5')], max_length=255, blank=True, help_text=u'During the past 4 weeks, how often did your asthma symptoms (wheezing, coughing, short-of-breath, chest tightness, or pain) wake you up at night or earlier than usual in the morning? Five-point Likert Scale from \u201c4 or more nights a week\u201d to \u201cnot at all"', verbose_name=u'Asthma symptoms wake you?') # Field name made lowercase.
    how_often_used_rescue_inhaler_or_meds__c = models.CharField(db_column=u'How_often_used_rescue_inhaler_or_meds__c', choices=[(u'1', u'1'), (u'2', u'2'), (u'3', u'3'), (u'4', u'4'), (u'5', u'5')], max_length=255, blank=True, help_text=u'During the past 4 weeks, how often have you used your rescue inhaler or nebulizer medication (such as albuterol)?\r\nThe integer represents a five-point Likert Scale from \u201c3 or more times per day\u201d to \u201cnot at all.\u201d', verbose_name=u'How often used rescue inhaler or meds?') # Field name made lowercase.
    rate_for_asthma_control_in_past_4_weeks__c = models.CharField(db_column=u'Rate_for_asthma_control_in_past_4_weeks__c', choices=[(u'1', u'1'), (u'2', u'2'), (u'3', u'3'), (u'4', u'4'), (u'5', u'5')], max_length=255, blank=True, help_text=u'How would you rate your asthma control during the past 4 weeks?\r\nThe integer represents a five-point Likert Scale from \u201cnot controlled at all\u201d to \u201ccompletely controlled.\u201d', verbose_name=u'Rate for asthma control in past 4 weeks?') # Field name made lowercase.
    iscloned__c = models.BooleanField(verbose_name=u'isCloned', db_column=u'isCloned__c') # Field name made lowercase.
    isvipaccount__c = models.BooleanField(verbose_name=u'isVIPAccount', db_column=u'isVIPAccount__c') # Field name made lowercase.
    cloned_from__c = models.CharField(max_length=20, verbose_name=u'Cloned From', db_column=u'Cloned_From__c', blank=True) # Field name made lowercase.
    clonecomments__c = models.CharField(max_length=50, verbose_name=u'cloneComments', db_column=u'cloneComments__c', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Event'
        verbose_name = 'Event'
        verbose_name_plural = 'Events'
        # keyPrefix = '00U'

class Eventfeed(models.Model):
    parentid = models.ForeignKey('Event', db_column=u'ParentId') # Field name made lowercase.
    type = models.CharField(db_column=u'Type', choices=[(u'TrackedChange', u'Tracked Change'), (u'UserStatus', u'User Status'), (u'TextPost', u'Text Post'), (u'AdvancedTextPost', u'Advanced Text Post'), (u'LinkPost', u'Link Post'), (u'ContentPost', u'Content Post'), (u'PollPost', u'Poll'), (u'RypplePost', u'Work.com Thanks'), (u'ProfileSkillPost', u'Profile Skill Post'), (u'DashboardComponentSnapshot', u'Dashboard Component Snapshot'), (u'ApprovalPost', u'Approval Post'), (u'CaseCommentPost', u'Case Comment Feed'), (u'ReplyPost', u'Reply Post'), (u'EmailMessageEvent', u'Email Message Feed'), (u'CallLogPost', u'Call Log Feed'), (u'ChangeStatusPost', u'Change Status Feed'), (u'AttachArticleEvent', u'Attached Article'), (u'MilestoneEvent', u'Milestone Event'), (u'ActivityEvent', u'Activity Change'), (u'ChatTranscriptPost', u'Chat Transcript Post'), (u'CollaborationGroupCreated', u'Collaboration Group Created'), (u'CollaborationGroupUnarchived', u'Collaboration Group Reactivated'), (u'SocialPost', u'Social Post'), (u'QuestionPost', u'Question Post'), (u'FacebookPost', u'Facebook Post'), (u'BasicTemplateFeedItem', u'Basic Template Post'), (u'CreateRecordEvent', u'Created Record'), (u'CanvasPost', u'Canvas'), (u'AnnouncementPost', u'a')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Feed Item Type') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    commentcount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Comment Count', db_column=u'CommentCount') # Field name made lowercase.
    likecount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Like Count', db_column=u'LikeCount') # Field name made lowercase.
    title = models.CharField(max_length=255, verbose_name=u'Title', sf_read_only=models.READ_ONLY, db_column=u'Title', blank=True) # Field name made lowercase.
    body = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Body', db_column=u'Body', blank=True) # Field name made lowercase.
    linkurl = models.URLField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Link Url', db_column=u'LinkUrl', blank=True) # Field name made lowercase.
    relatedrecordid = models.ForeignKey('Contentversion', null=True, db_column=u'RelatedRecordId', blank=True) # Field name made lowercase.
    contentdata = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Content Data', db_column=u'ContentData', blank=True) # Field name made lowercase.
    contentfilename = models.CharField(max_length=255, verbose_name=u'Content File Name', sf_read_only=models.READ_ONLY, db_column=u'ContentFileName', blank=True) # Field name made lowercase.
    contentdescription = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Content Description', db_column=u'ContentDescription', blank=True) # Field name made lowercase.
    contenttype = models.CharField(max_length=120, verbose_name=u'Content File Type', sf_read_only=models.READ_ONLY, db_column=u'ContentType', blank=True) # Field name made lowercase.
    contentsize = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Content Size', db_column=u'ContentSize', blank=True) # Field name made lowercase.
    insertedbyid = models.ForeignKey('User', null=True, db_column=u'InsertedById', blank=True) # Field name made lowercase.
    networkscope = models.CharField(db_column=u'NetworkScope', choices=[(u'AllNetworks', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Network Scope') # Field name made lowercase.
    visibility = models.CharField(db_column=u'Visibility', choices=[(u'AllUsers', None), (u'InternalUsers', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Visibility') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'EventFeed'
        verbose_name = 'Event Feed'
        verbose_name_plural = 'Event Feed'
        # keyPrefix = 'None'

class Eventrelation(models.Model):
    relationid = models.ForeignKey('Account', db_column=u'RelationId') # Field name made lowercase.
    eventid = models.ForeignKey('Event', db_column=u'EventId') # Field name made lowercase.
    iswhat = models.BooleanField(sf_read_only=models.NOT_UPDATEABLE, verbose_name=u'Is What', db_column=u'IsWhat') # Field name made lowercase.
    isparent = models.BooleanField(verbose_name=u'Is Parent', db_column=u'IsParent') # Field name made lowercase.
    isinvitee = models.BooleanField(verbose_name=u'Is Invitee', db_column=u'IsInvitee') # Field name made lowercase.
    accountid = models.ForeignKey('Account', null=True, db_column=u'AccountId', blank=True) # Field name made lowercase.
    status = models.CharField(blank=True, max_length=40, verbose_name=u'Status', db_column=u'Status', choices=[(u'New', u'New'), (u'Declined', u'Declined'), (u'Accepted', u'Accepted'), (u'Uninvited', u'Uninvited'), (u'Maybe', u'Maybe')]) # Field name made lowercase.
    respondeddate = models.DateTimeField(null=True, verbose_name=u'Response Date', db_column=u'RespondedDate', blank=True) # Field name made lowercase.
    response = models.CharField(max_length=255, verbose_name=u'Response', db_column=u'Response', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'EventRelation'
        verbose_name = 'Event Relation'
        verbose_name_plural = 'Event Relations'
        # keyPrefix = '0RE'

class Eventwhorelation(models.Model):
    relationid = models.ForeignKey('Contact', null=True, db_column=u'RelationId', blank=True) # Field name made lowercase.
    eventid = models.ForeignKey('Event', null=True, db_column=u'EventId', blank=True) # Field name made lowercase.
    accountid = models.ForeignKey('Account', null=True, db_column=u'AccountId', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    type = models.CharField(max_length=50, verbose_name=u'Type', sf_read_only=models.READ_ONLY, db_column=u'Type', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'EventWhoRelation'
        verbose_name = 'Event Who Relation'
        verbose_name_plural = 'Event Who Relations'
        # keyPrefix = 'None'

class Externaldatasource(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    developername = models.CharField(max_length=80, verbose_name=u'Name', sf_read_only=models.READ_ONLY, db_column=u'DeveloperName') # Field name made lowercase.
    language = models.CharField(max_length=40, verbose_name=u'Master Language', sf_read_only=models.READ_ONLY, db_column=u'Language', choices=[(u'en_US', u'English'), (u'de', u'German'), (u'es', u'Spanish'), (u'fr', u'French'), (u'it', u'Italian'), (u'ja', u'Japanese'), (u'sv', u'Swedish'), (u'ko', u'Korean'), (u'zh_TW', u'Chinese (Traditional)'), (u'zh_CN', u'Chinese (Simplified)'), (u'pt_BR', u'Portuguese (Brazilian)'), (u'nl_NL', u'Dutch'), (u'da', u'Danish'), (u'th', u'Thai'), (u'fi', u'Finnish'), (u'ru', u'Russian'), (u'es_MX', u'Spanish (Mexican)'), (u'no', u'Norwegian')]) # Field name made lowercase.
    masterlabel = models.CharField(max_length=80, verbose_name=u'External Data Source', sf_read_only=models.READ_ONLY, db_column=u'MasterLabel') # Field name made lowercase.
    namespaceprefix = models.CharField(max_length=15, verbose_name=u'Namespace Prefix', sf_read_only=models.READ_ONLY, db_column=u'NamespacePrefix', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    type = models.CharField(max_length=255, verbose_name=u'Class ID', sf_read_only=models.READ_ONLY, db_column=u'Type', choices=[(u'Datacloud', None), (u'SimpleURL', None)]) # Field name made lowercase.
    endpoint = models.TextField(help_text=u'A URL starting with \u201chttp://\u201d or \u201chttps://\u201d', sf_read_only=models.READ_ONLY, verbose_name=u'Server URL', db_column=u'Endpoint', blank=True) # Field name made lowercase.
    repository = models.CharField(max_length=255, verbose_name=u'Default External Repository', sf_read_only=models.READ_ONLY, db_column=u'Repository', blank=True) # Field name made lowercase.
    principaltype = models.CharField(max_length=255, db_column=u'PrincipalType', help_text=u'Used to track users accessing the external server. Anonymous implies a user identity is not specified for external server access. Named Principal uses one user identity for all users to access the external server.', sf_read_only=models.READ_ONLY, verbose_name=u'Identity Type', choices=[(u'Anonymous', u'Anonymous'), (u'PerUser', u'Per User'), (u'NamedUser', u'Named Principal')]) # Field name made lowercase.
    apikey = models.CharField(db_column=u'ApiKey', max_length=128, blank=True, help_text=u'The API Key is a string required by the external data service to identify the users of their applications. Please read the documentation for the data source type for information about how to obtain the key.', sf_read_only=models.READ_ONLY, verbose_name=u'API Key') # Field name made lowercase.
    largeiconid = models.ForeignKey('Staticresource', null=True, db_column=u'LargeIconId', blank=True) # Field name made lowercase.
    smalliconid = models.ForeignKey('Staticresource', null=True, db_column=u'SmallIconId', blank=True) # Field name made lowercase.
    customconfiguration = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Custom Configuration', db_column=u'CustomConfiguration', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'ExternalDataSource'
        verbose_name = 'External Data Source'
        verbose_name_plural = 'External Data Sources'
        # keyPrefix = '0XC'

class Externaldatauserauth(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    externaldatasourceid = models.ForeignKey('Externaldatasource', db_column=u'ExternalDataSourceId') # Field name made lowercase.
    userid = models.ForeignKey('User', null=True, db_column=u'UserId', blank=True) # Field name made lowercase.
    protocol = models.CharField(db_column=u'Protocol', choices=[(u'NoAuthentication', u'No Authentication'), (u'Oauth', u'Oauth'), (u'Password', u'Password Authentication')], max_length=255, blank=True, help_text=u'Specify how Salesforce should authenticate to the external server. Password Authentication indicates that a username and password are required to authenticate. No Authentication indicates that no credentials are required.', verbose_name=u'Authentication Protocol') # Field name made lowercase.
    username = models.CharField(max_length=255, verbose_name=u'Username', db_column=u'Username', blank=True) # Field name made lowercase.
    password = models.CharField(max_length=175, verbose_name=u'Password', db_column=u'Password', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'ExternalDataUserAuth'
        verbose_name = 'External Data User Authentication'
        verbose_name_plural = 'External Data User Authentications'
        # keyPrefix = '0XU'

class FamilyHistory(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    parentid = models.ForeignKey('FamilyC', db_column=u'ParentId') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    field = models.CharField(max_length=255, verbose_name=u'Changed Field', sf_read_only=models.READ_ONLY, db_column=u'Field', choices=[(u'Account__c', None), (u'Birthdate__c', None), (u'cloneComments__c', None), (u'Cloned_From__c', None), (u'created', u'Created.'), (u'Exchange_Member_ID__c', None), (u'feedEvent', u'Feed event'), (u'Gender__c', None), (u'isCloned__c', None), (u'isVIPAccount__c', None), (u'Lead__c', None), (u'Migrated__c', None), (u'Name', None), (u'Name__c', None), (u'Original_Object_ID__c', None), (u'Owner', None), (u'ownerAccepted', u'Owner (Accepted)'), (u'ownerAssignment', u'Owner (Assignment)'), (u'Policy_Member__c', None), (u'locked', u'Record locked.'), (u'unlocked', u'Record unlocked.'), (u'Relationship__c', None), (u'Tobacco__c', None)]) # Field name made lowercase.
    oldvalue = models.CharField(max_length=255, verbose_name=u'Old Value', sf_read_only=models.READ_ONLY, db_column=u'OldValue', blank=True) # Field name made lowercase.
    newvalue = models.CharField(max_length=255, verbose_name=u'New Value', sf_read_only=models.READ_ONLY, db_column=u'NewValue', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Family__History'
        verbose_name = 'History: Family'
        verbose_name_plural = 'History: Family'
        # keyPrefix = 'None'

class FamilyC(models.Model):
    ownerid = models.ForeignKey('Group', db_column=u'OwnerId') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'Family Name', db_column=u'Name', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    lastactivitydate = models.DateField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Activity Date', db_column=u'LastActivityDate', blank=True) # Field name made lowercase.
    lead__c = models.ForeignKey('Lead', null=True, db_column=u'Lead__c', blank=True) # Field name made lowercase.
    account__c = models.ForeignKey('Account', null=True, db_column=u'Account__c', blank=True) # Field name made lowercase.
    birthdate__c = models.DateField(help_text=u'Birthdate of family member.', null=True, verbose_name=u'Birthdate', db_column=u'Birthdate__c', blank=True) # Field name made lowercase.
    gender__c = models.CharField(db_column=u'Gender__c', choices=[(u'Female', u'Female'), (u'Male', u'Male'), (u'None', u'None')], max_length=255, blank=True, help_text=u'Gender of family member.', verbose_name=u'Gender') # Field name made lowercase.
    policy_member__c = models.BooleanField(help_text=u'Check to indicate family member is associated with lead or account policy.', verbose_name=u'Policy Member', db_column=u'Policy_Member__c') # Field name made lowercase.
    relationship__c = models.CharField(db_column=u'Relationship__c', choices=[(u'Child', u'Child'), (u'Other', u'Other'), (u'Parent', u'Parent'), (u'Spouse', u'Spouse')], max_length=255, blank=True, help_text=u'Relationship to primary.', verbose_name=u'Relationship to Primary') # Field name made lowercase.
    exchange_member_id__c = models.CharField(help_text=u'Exchange member ID is the unique ID issued per member. It is referenced as Alternate Id 1 in Javelina.', max_length=60, verbose_name=u'Exchange Member ID', db_column=u'Exchange_Member_ID__c', blank=True) # Field name made lowercase.
    tobacco__c = models.BooleanField(help_text=u'Check to indicate family member is a tobacco user.', verbose_name=u'Tobacco', db_column=u'Tobacco__c') # Field name made lowercase.
    name__c = models.CharField(help_text=u'Name of family member.', max_length=50, verbose_name=u'Name', db_column=u'Name__c', blank=True) # Field name made lowercase.
    age__c = models.DecimalField(decimal_places=0, db_column=u'Age__c', sf_read_only=models.READ_ONLY, max_digits=18, blank=True, null=True, verbose_name=u'Age') # Field name made lowercase.
    specific_relationship__c = models.CharField(max_length=1300, verbose_name=u'Specific Relationship', sf_read_only=models.READ_ONLY, db_column=u'Specific_Relationship__c', blank=True) # Field name made lowercase.
    original_object_id__c = models.CharField(max_length=18, verbose_name=u'Original Object ID', db_column=u'Original_Object_ID__c', blank=True) # Field name made lowercase.
    migrated__c = models.BooleanField(help_text=u'Was this record migrated from old tenant?', verbose_name=u'Migrated', db_column=u'Migrated__c') # Field name made lowercase.
    securitylockdisplay__c = models.CharField(max_length=1300, verbose_name=u'Security Lock Display', sf_read_only=models.READ_ONLY, db_column=u'SecurityLockDisplay__c', blank=True) # Field name made lowercase.
    iscloned__c = models.BooleanField(verbose_name=u'isCloned', db_column=u'isCloned__c') # Field name made lowercase.
    cloned_from__c = models.ForeignKey('self', null=True, db_column=u'Cloned_From__c', blank=True) # Field name made lowercase.
    isvipaccount__c = models.BooleanField(verbose_name=u'isVIPAccount', db_column=u'isVIPAccount__c') # Field name made lowercase.
    clonecomments__c = models.CharField(max_length=50, verbose_name=u'cloneComments', db_column=u'cloneComments__c', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Family__c'
        verbose_name = 'Family'
        verbose_name_plural = 'Families'
        # keyPrefix = 'a07'

class Feedcomment(models.Model):
    feeditemid = models.ForeignKey('Accountfeed', db_column=u'FeedItemId') # Field name made lowercase.
    parentid = models.ForeignKey('Account', null=True, db_column=u'ParentId', blank=True) # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.NOT_UPDATEABLE, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    commentbody = models.TextField(sf_read_only=models.NOT_UPDATEABLE, verbose_name=u'Comment Body', db_column=u'CommentBody') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    insertedbyid = models.ForeignKey('User', db_column=u'InsertedById') # Field name made lowercase.
    commenttype = models.CharField(db_column=u'CommentType', choices=[(u'TextComment', None), (u'ContentComment', None)], max_length=40, blank=True, sf_read_only=models.NOT_UPDATEABLE, verbose_name=u'Comment Type') # Field name made lowercase.
    relatedrecordid = models.ForeignKey('Contentversion', null=True, db_column=u'RelatedRecordId', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'FeedComment'
        verbose_name = 'Feed Comment'
        verbose_name_plural = 'Feed Comments'
        # keyPrefix = '0D7'

class Feeditem(models.Model):
    parentid = models.ForeignKey('Account', db_column=u'ParentId') # Field name made lowercase.
    type = models.CharField(db_column=u'Type', choices=[(u'TrackedChange', u'Tracked Change'), (u'UserStatus', u'User Status'), (u'TextPost', u'Text Post'), (u'AdvancedTextPost', u'Advanced Text Post'), (u'LinkPost', u'Link Post'), (u'ContentPost', u'Content Post'), (u'PollPost', u'Poll'), (u'RypplePost', u'Work.com Thanks'), (u'ProfileSkillPost', u'Profile Skill Post'), (u'DashboardComponentSnapshot', u'Dashboard Component Snapshot'), (u'ApprovalPost', u'Approval Post'), (u'CaseCommentPost', u'Case Comment Feed'), (u'ReplyPost', u'Reply Post'), (u'EmailMessageEvent', u'Email Message Feed'), (u'CallLogPost', u'Call Log Feed'), (u'ChangeStatusPost', u'Change Status Feed'), (u'AttachArticleEvent', u'Attached Article'), (u'MilestoneEvent', u'Milestone Event'), (u'ActivityEvent', u'Activity Change'), (u'ChatTranscriptPost', u'Chat Transcript Post'), (u'CollaborationGroupCreated', u'Collaboration Group Created'), (u'CollaborationGroupUnarchived', u'Collaboration Group Reactivated'), (u'SocialPost', u'Social Post'), (u'QuestionPost', u'Question Post'), (u'FacebookPost', u'Facebook Post'), (u'BasicTemplateFeedItem', u'Basic Template Post'), (u'CreateRecordEvent', u'Created Record'), (u'CanvasPost', u'Canvas'), (u'AnnouncementPost', u'a')], max_length=40, blank=True, sf_read_only=models.NOT_UPDATEABLE, verbose_name=u'Feed Item Type') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.NOT_UPDATEABLE, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    commentcount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Comment Count', db_column=u'CommentCount') # Field name made lowercase.
    likecount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Like Count', db_column=u'LikeCount') # Field name made lowercase.
    title = models.CharField(max_length=255, verbose_name=u'Title', sf_read_only=models.NOT_UPDATEABLE, db_column=u'Title', blank=True) # Field name made lowercase.
    body = models.TextField(sf_read_only=models.NOT_UPDATEABLE, verbose_name=u'Body', db_column=u'Body', blank=True) # Field name made lowercase.
    linkurl = models.URLField(null=True, sf_read_only=models.NOT_UPDATEABLE, verbose_name=u'Link Url', db_column=u'LinkUrl', blank=True) # Field name made lowercase.
    relatedrecordid = models.ForeignKey('Contentversion', null=True, db_column=u'RelatedRecordId', blank=True) # Field name made lowercase.
    contentdata = models.TextField(sf_read_only=models.NOT_UPDATEABLE, verbose_name=u'Content Data', db_column=u'ContentData', blank=True) # Field name made lowercase.
    contentfilename = models.CharField(max_length=255, verbose_name=u'Content File Name', sf_read_only=models.NOT_UPDATEABLE, db_column=u'ContentFileName', blank=True) # Field name made lowercase.
    contentdescription = models.TextField(sf_read_only=models.NOT_UPDATEABLE, verbose_name=u'Content Description', db_column=u'ContentDescription', blank=True) # Field name made lowercase.
    contenttype = models.CharField(max_length=120, verbose_name=u'Content File Type', sf_read_only=models.READ_ONLY, db_column=u'ContentType', blank=True) # Field name made lowercase.
    contentsize = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Content Size', db_column=u'ContentSize', blank=True) # Field name made lowercase.
    insertedbyid = models.ForeignKey('User', db_column=u'InsertedById') # Field name made lowercase.
    networkscope = models.CharField(db_column=u'NetworkScope', choices=[(u'AllNetworks', None)], max_length=40, blank=True, sf_read_only=models.NOT_UPDATEABLE, verbose_name=u'Network Scope') # Field name made lowercase.
    visibility = models.CharField(db_column=u'Visibility', choices=[(u'AllUsers', None), (u'InternalUsers', None)], max_length=40, blank=True, sf_read_only=models.NOT_UPDATEABLE, verbose_name=u'Visibility') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'FeedItem'
        verbose_name = 'Feed Item'
        verbose_name_plural = 'Feed Items'
        # keyPrefix = '0D5'

class Feedlike(models.Model):
    feeditemid = models.ForeignKey('Accountfeed', null=True, db_column=u'FeedItemId', blank=True) # Field name made lowercase.
    feedentityid = models.ForeignKey('Accountfeed', null=True, db_column=u'FeedEntityId', blank=True) # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.NOT_UPDATEABLE, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    insertedbyid = models.ForeignKey('User', db_column=u'InsertedById') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'FeedLike'
        verbose_name = 'Feed Like'
        verbose_name_plural = 'Feed Likes'
        # keyPrefix = '0I0'

class Feedpollchoice(models.Model):
    feeditemid = models.ForeignKey('Accountfeed', db_column=u'FeedItemId') # Field name made lowercase.
    position = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Position', db_column=u'Position') # Field name made lowercase.
    choicebody = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'ChoiceBody', db_column=u'ChoiceBody') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'FeedPollChoice'
        verbose_name = 'Feed Poll Choice'
        verbose_name_plural = 'Feed Poll Choices'
        # keyPrefix = '09A'

class Feedpollvote(models.Model):
    feeditemid = models.ForeignKey('Accountfeed', db_column=u'FeedItemId') # Field name made lowercase.
    choiceid = models.ForeignKey('Feedpollchoice', db_column=u'ChoiceId') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'FeedPollVote'
        verbose_name = 'Feed Poll Vote'
        verbose_name_plural = 'Feed Poll Votes'
        # keyPrefix = '09B'

class Feedtrackedchange(models.Model):
    feeditemid = models.ForeignKey('Accountfeed', db_column=u'FeedItemId') # Field name made lowercase.
    fieldname = models.CharField(max_length=120, verbose_name=u'Field', sf_read_only=models.READ_ONLY, db_column=u'FieldName') # Field name made lowercase.
    oldvalue = models.CharField(max_length=255, verbose_name=u'Old Value', sf_read_only=models.READ_ONLY, db_column=u'OldValue', blank=True) # Field name made lowercase.
    newvalue = models.CharField(max_length=255, verbose_name=u'New Value', sf_read_only=models.READ_ONLY, db_column=u'NewValue', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'FeedTrackedChange'
        verbose_name = 'Feed Tracked Change'
        verbose_name_plural = 'Feed Tracked Changes'
        # keyPrefix = '0D6'

class Fieldpermissions(models.Model):
    parentid = models.ForeignKey('Permissionset', db_column=u'ParentId') # Field name made lowercase.
    sobjecttype = models.CharField(max_length=40, verbose_name=u'Sobject Type Name', sf_read_only=models.NOT_UPDATEABLE, db_column=u'SobjectType', choices=[(u'Account', None), (u'Asset', None), (u'Campaign', None), (u'CampaignMember', None), (u'Case', None), (u'Contact', None), (u'Contract', None), (u'Event', None), (u'Lead', None), (u'Opportunity', None), (u'OpportunityLineItem', None), (u'Pricebook2', None), (u'PricebookEntry', None), (u'Product2', None), (u'Quote', None), (u'QuoteLineItem', None), (u'Solution', None), (u'Task', None), (u'User', None), (u'WorkCoaching', None), (u'WorkFeedback', None), (u'WorkFeedbackQuestion', None), (u'WorkFeedbackQuestionSet', None), (u'WorkFeedbackRequest', None), (u'WorkGoal', None), (u'WorkGoalCollaborator', None), (u'WorkGoalLink', None), (u'WorkPerformanceCycle', None)]) # Field name made lowercase.
    field = models.CharField(max_length=40, verbose_name=u'Field Name', sf_read_only=models.NOT_UPDATEABLE, db_column=u'Field', choices=[(u'Account.AccountNumber', None), (u'Account.AccountSource', None), (u'Account.Active_Since__c', None), (u'Account.Age_of_Spouse_Domestic_Partner__c', None), (u'Account.Age_of_the_first_adult__c', None), (u'Account.Alternate_Email__c', None), (u'Account.Alternate_ID_1__c', None), (u'Account.Alternate_ID_2__c', None), (u'Account.AnnualRevenue', None), (u'Account.Application_Completed_Notes__c', None), (u'Account.Assisting_Agent__c', None), (u'Account.Associated_Brokerage__c', None), (u'Account.Associated_Premium__c', None), (u'Account.Benefits_Specialist__c', None), (u'Account.BillingAddress', None), (u'Account.Broker_Information__c', None), (u'Account.Brokerage_Rating__c', None), (u'Account.Cert__c', None), (u'Account.Child_Only_Application__c', None), (u'Account.cloneComments__c', None), (u'Account.Contact_Quick_Notes__c', None), (u'Account.Converted_with_Notes__c', None), (u'Account.County__c', None), (u'Account.Coverage_Level__c', None), (u'Account.Current_Coverage__c', None), (u'Account.Currently_a_Student__c', None), (u'Account.Customer_Status__c', None), (u'Account.Date_Business_Started__c', None), (u'Account.dependent_contribution__c', None), (u'Account.dependent_contribution_type__c', None), (u'Account.Description', None), (u'Account.Disease_Managment_Request_Status__c', None), (u'Account.DunsNumber', None), (u'Account.Duplication_Score__c', None), (u'Account.Eligibility_Date__c', None), (u'Account.Employer_Subscriber__c', None), (u'Account.Employment_Status__c', None), (u'Account.Enrollment_Specialists__c', None), (u'Account.Estimated_Annual_Income__c', None), (u'Account.Exchange_Details__c', None), (u'Account.Exchange_Sponsor_ID__c', None), (u'Account.ExternalID__c', None), (u'Account.Facility_Status__c', None), (u'Account.Fax', None), (u'Account.FederationID__c', None), (u'Account.Gender__c', None), (u'Account.Group_Lead__c', None), (u'Account.Handicapped__c', None), (u'Account.id_in_Connectria__c', None), (u'Account.IM_Identifier__c', None), (u'Account.Imported__c', None), (u'Account.Imported_Source_Point__c', None), (u'Account.Industry', None), (u'Account.Initial_Contact_Date__c', None), (u'Account.Initial_Contact_Method__c', None), (u'Account.IsETLUpdate__c', None), (u'Account.isVIPAccount__c', None), (u'Account.Jigsaw', None), (u'Account.Languages_Spoken__c', None), (u'Account.Legal_Entity__c', None), (u'Account.Marital_Status__c', None), (u'Account.MedicalCardRequestStatus__c', None), (u'Account.Member_ID__c', None), (u'Account.Member_of_Group__c', None), (u'Account.Middle_Name__c', None), (u'Account.Migrated__c', None), (u'Account.Monthly_Premium__c', None), (u'Account.NaicsCode', None), (u'Account.NaicsDesc', None), (u'Account.Neighboorhood_Network_Tiers__c', None), (u'Account.Networks_Associated_With__c', None), (u'Account.Nevada_Health_COOP_Agent__c', None), (u'Account.No_of_Members_and_Managers__c', None), (u'Account.Number_of_Children_age_21_25__c', None), (u'Account.Number_of_Children_Under_Age_21__c', None), (u'Account.Number_of_Dependents__c', None), (u'Account.Number_of_People_in_Household__c', None), (u'Account.NumberOfEmployees', None), (u'Account.On_Exchange_App_Completed_By__c', None), (u'Account.Original_Account__c', None), (u'Account.Original_Created_Date__c', None), (u'Account.Original_Einstein__c', None), (u'Account.Original_Group_Member_Value__c', None), (u'Account.Original_Last_Modified_By__c', None), (u'Account.Original_Last_Modified_Date__c', None), (u'Account.Original_Last_Modified_Name__c', None), (u'Account.Original_Object_ID__c', None), (u'Account.Original_Owner_ID__c', None), (u'Account.Original_Owner_Name__c', None), (u'Account.OriginalCertAlt1Account__c', None), (u'Account.Originial_Assisting_Agent__c', None), (u'Account.OwnedBy_User__c', None), (u'Account.Ownership', None), (u'Account.Parent', None), (u'Account.Pending_Broker_Information__c', None), (u'Account.Phone', None), (u'Account.plans__c', None), (u'Account.Preferred_Language__c', None), (u'Account.Prequalified_By__c', None), (u'Account.primary_contribution__c', None), (u'Account.primary_contribution_type__c', None), (u'Account.Primary_DOB__c', None), (u'Account.Rating', None), (u'Account.ShippingAddress', None), (u'Account.Sic', None), (u'Account.SicDesc', None), (u'Account.Site', None), (u'Account.Sponsor_First_Name__c', None), (u'Account.Sponsor_Last_Name__c', None), (u'Account.Star_Network_Tiers__c', None), (u'Account.Status_Reason__c', None), (u'Account.Subscriber_Sponser__c', None), (u'Account.Subsidy_Eligible__c', None), (u'Account.Suffix__c', None), (u'Account.Tax_ID_Group_NPI__c', None), (u'Account.TickerSymbol', None), (u'Account.Tobacco_User__c', None), (u'Account.Tradestyle', None), (u'Account.Type', None), (u'Account.uhh_personsEmployerId__c', None), (u'Account.uhh_personsParentId__c', None), (u'Account.uhh_update_at__c', None), (u'Account.uhhApi_associatedPlanCode__c', None), (u'Account.uhhApi_Broker_id__c', None), (u'Account.uhhApi_Employers_id__c', None), (u'Account.uhhApi_Person_id__c', None), (u'Account.Website', None), (u'Account.Years_in_Business__c', None), (u'Account.YearStarted', None), (u'Accumulators__c.Allowable_Expenses_Not_Paid__c', None), (u'Accumulators__c.Amount_Not_Covered__c', None), (u'Accumulators__c.Cob_Credits__c', None), (u'Accumulators__c.Covered_Expenses__c', None), (u'Accumulators__c.In_Network_benefits_paid__c', None), (u'Accumulators__c.In_Network_Deductible__c', None), (u'Accumulators__c.In_Network_Deductible_carryover__c', None), (u'Accumulators__c.In_Network_out_of_area_carry_over__c', None), (u'Accumulators__c.In_Network_out_of_pocket__c', None), (u'Accumulators__c.Number_of_copayments__c', None), (u'Accumulators__c.Out_of_Area_benefits_paid__c', None), (u'Accumulators__c.Out_of_Area_Deductible__c', None), (u'Accumulators__c.Out_of_Area_Deductible_carryover__c', None), (u'Accumulators__c.Out_of_Area_out_of_pocket__c', None), (u'Accumulators__c.Out_of_Area_Out_of_Pocket_carry_over__c', None), (u'Accumulators__c.Penalty_Amount__c', None), (u'Accumulators__c.Penalty_benefits_paid__c', None), (u'Accumulators__c.Penalty_Deductible__c', None), (u'Accumulators__c.Penalty_Deductible_carryover__c', None), (u'Accumulators__c.Penalty_out_of_pocket__c', None), (u'Accumulators__c.Penalty_out_of_pocket_carry_over__c', None), (u'Accumulators__c.Total_Charges__c', None), (u'Accumulators__c.Total_Copayment_Amount__c', None), (u'Accumulators__c.Type__c', None), (u'Accumulators__c.UhhApi_AccumulatorID__c', None), (u'Accumulators__c.uhhApi_PersonID__c', None), (u'Accumulators__c.uhhApi_updatedAt__c', None), (u'Accumulators__c.Year_to_Date_Benefits_Paid__c', None), (u'AdditionalUserData__c.UserId__c', None), (u'Appeal__c.Appeal_Category__c', None), (u'Appeal__c.Associated_Account__c', None), (u'Appeal__c.cloneComments__c', None), (u'Appeal__c.ClonedFrom__c', None), (u'Appeal__c.Fax_Response_Email__c', None), (u'Appeal__c.isCloned__c', None), (u'Appeal__c.isVIPAccount__c', None), (u'Appeal__c.Non_Appeal_Reason__c', None), (u'Appeal__c.Status__c', None), (u'Appeal__c.Submitted_Via__c', None), (u'Appeal__c.Type_of_Request__c', None), (u'Asset.Account', None), (u'Asset.Contact', None), (u'Asset.Description', None), (u'Asset.InstallDate', None), (u'Asset.IsCompetitorProduct', None), (u'Asset.Price', None), (u'Asset.Product2', None), (u'Asset.ProductCode', None), (u'Asset.ProductDescription', None), (u'Asset.ProductFamily', None), (u'Asset.PurchaseDate', None), (u'Asset.Quantity', None), (u'Asset.SerialNumber', None), (u'Asset.Status', None), (u'Asset.UsageEndDate', None), (u'Authorized_Representative__c.Account__c', None), (u'Authorized_Representative__c.Authorized_to_View__c', None), (u'Authorized_Representative__c.cloneComments__c', None), (u'Authorized_Representative__c.Cloned_From__c', None), (u'Authorized_Representative__c.End_Time__c', None), (u'Authorized_Representative__c.isCloned__c', None), (u'Authorized_Representative__c.isVIPAccount__c', None), (u'Authorized_Representative__c.Lead__c', None), (u'Authorized_Representative__c.Method_of_Contact__c', None), (u'Authorized_Representative__c.Passphrase__c', None), (u'Authorized_Representative__c.Start_Time__c', None), (u'AutoPayOptions__c.AccountType__c', None), (u'AutoPayOptions__c.BAN__c', None), (u'AutoPayOptions__c.BankName__c', None), (u'AutoPayOptions__c.CC__c', None), (u'AutoPayOptions__c.CC_expiry_month__c', None), (u'AutoPayOptions__c.CC_expiry_year__c', None), (u'AutoPayOptions__c.ccHolder__c', None), (u'AutoPayOptions__c.cvv__c', None), (u'AutoPayOptions__c.enabled__c', None), (u'AutoPayOptions__c.Paytype__c', None), (u'AutoPayOptions__c.RoutingNumber__c', None), (u'AutoPayOptions__c.uid__c', None), (u'Campaign.ActualCost', None), (u'Campaign.AmountAllOpportunities', None), (u'Campaign.AmountWonOpportunities', None), (u'Campaign.BudgetedCost', None), (u'Campaign.Description', None), (u'Campaign.EndDate', None), (u'Campaign.ExpectedResponse', None), (u'Campaign.ExpectedRevenue', None), (u'Campaign.HierarchyActualCost', None), (u'Campaign.HierarchyAmountAllOpportunities', None), (u'Campaign.HierarchyAmountWonOpportunities', None), (u'Campaign.HierarchyBudgetedCost', None), (u'Campaign.HierarchyExpectedRevenue', None), (u'Campaign.HierarchyNumberOfContacts', None), (u'Campaign.HierarchyNumberOfConvertedLeads', None), (u'Campaign.HierarchyNumberOfLeads', None), (u'Campaign.HierarchyNumberOfOpportunities', None), (u'Campaign.HierarchyNumberOfResponses', None), (u'Campaign.HierarchyNumberOfWonOpportunities', None), (u'Campaign.HierarchyNumberSent', None), (u'Campaign.IsActive', None), (u'Campaign.NumberOfContacts', None), (u'Campaign.NumberOfConvertedLeads', None), (u'Campaign.NumberOfLeads', None), (u'Campaign.NumberOfOpportunities', None), (u'Campaign.NumberOfResponses', None), (u'Campaign.NumberOfWonOpportunities', None), (u'Campaign.NumberSent', None), (u'Campaign.Parent', None), (u'Campaign.StartDate', None), (u'Campaign.Status', None), (u'Campaign.Type', None), (u'Carrier__c.Notes__c', None), (u'Carrier__c.Policies_In_Force__c', None), (u'Carrier__c.Primary_contact_number__c', None), (u'Carrier__c.Total_Policy_Premium__c', None), (u'Carrier__c.Total_Policy_Premium_In_Force__c', None), (u'Case.Account', None), (u'Case.Assess_areas_that_could_impact_treatment__c', None), (u'Case.Assess_for_any_areas_where_member__c', None), (u'Case.Assess_for_the_presence_of_GERD__c', None), (u'Case.Asset', None), (u'Case.Assist_member_with_treatment_if_needed__c', None), (u'Case.Asthma_affecting_work_school_home_etc__c', None), (u'Case.Asthma_symptoms_wake_you__c', None), (u'Case.BusinessHours', None), (u'Case.cloneComments__c', None), (u'Case.Cloned_From__c', None), (u'Case.ClosedDate', None), (u'Case.Contact', None), (u'Case.Contact_Type__c', None), (u'Case.Daily_foot_checks__c', None), (u'Case.Date_of_RN_assessment__c', None), (u'Case.Dental_visit_in_past_six_months__c', None), (u'Case.Description', None), (u'Case.Developing_and_updating_a_schedule__c', None), (u'Case.Discussion_of_areas_previously_found__c', None), (u'Case.Discussion_of_health_behaviors__c', None), (u'Case.Disease_Management_Program_Association__c', None), (u'Case.Eye_exam_in_past_year__c', None), (u'Case.Feeling_bad_about_yourself_or_that_you_a__c', None), (u'Case.Feeling_down_depressed_or_hopeless__c', None), (u'Case.Feeling_tired_or_having_little_energy__c', None), (u'Case.HbA1C__c', None), (u'Case.Hospitalizations_ER_visits_past_6_months__c', None), (u'Case.How_difficult_have_these_problems_been__c', None), (u'Case.How_often_had_shortness_of_breath__c', None), (u'Case.How_often_used_rescue_inhaler_or_meds__c', None), (u'Case.Identify_barriers_for_adherence__c', None), (u'Case.Information_to_be_sent_to_a_caregiver__c', None), (u'Case.isCloned__c', None), (u'Case.IsClosedOnCreate', None), (u'Case.IsEscalated', None), (u'Case.isVIPAccount__c', None), (u'Case.Keeping_a_log_of_glucose_results__c', None), (u'Case.Knowing_the_results_of_peak_flow__c', None), (u'Case.Little_interest_or_pleasure_in_activity__c', None), (u'Case.Log_of_medications__c', None), (u'Case.Materials_for_working_with_providers__c', None), (u'Case.Noticable_change_in_behavior__c', None), (u'Case.Origin', None), (u'Case.Parent', None), (u'Case.PHQ_9_Score__c', None), (u'Case.Poor_appetite_or_overeating__c', None), (u'Case.Presence_of_anxiety_and_assistance__c', None), (u'Case.Presence_of_cardiovascular_disease__c', None), (u'Case.Priority', None), (u'Case.Provided_materials_as_necessary__c', None), (u'Case.Rate_for_asthma_control_in_past_4_weeks__c', None), (u'Case.Reason', None), (u'Case.Related_Department__c', None), (u'Case.Results_of_HbA1c_test_and_BP_monitoring__c', None), (u'Case.Review_and_update_demographic_info__c', None), (u'Case.Review_and_update_practitioner_info__c', None), (u'Case.RN_Assessment__c', None), (u'Case.Schedule_of_tests_and_practitioner_visit__c', None), (u'Case.Subject', None), (u'Case.SuppliedCompany', None), (u'Case.SuppliedEmail', None), (u'Case.SuppliedName', None), (u'Case.SuppliedPhone', None), (u'Case.Thoughts_of_death_or_hurthing_themselves__c', None), (u'Case.Trouble_concentrating_on_things__c', None), (u'Case.Trouble_related_to_sleeping__c', None), (u'Case.Type', None), (u'Case.Type_of_Event_Grievance__c', None), (u'Case.Typical_fasting_blood_glucose__c', None), (u'Case.Verbalize_effectiveness_of_treatments__c', None), (u'Claim__c.Adjustment__c', None), (u'Claim__c.admission_date__c', None), (u'Claim__c.Allowed_Amount__c', None), (u'Claim__c.Check_Number__c', None), (u'Claim__c.cloneComments__c', None), (u'Claim__c.Cloned_From__c', None), (u'Claim__c.COB_adjustment__c', None), (u'Claim__c.Coinsurance__c', None), (u'Claim__c.Copay__c', None), (u'Claim__c.Covered_Charges__c', None), (u'Claim__c.CPT_Codes__c', None), (u'Claim__c.Deductible__c', None), (u'Claim__c.Denial_Reason__c', None), (u'Claim__c.DenialCode__c', None), (u'Claim__c.Description__c', None), (u'Claim__c.Disallowed_Amount__c', None), (u'Claim__c.discharge_date__c', None), (u'Claim__c.Facility__c', None), (u'Claim__c.Facility_Full_Address__c', None), (u'Claim__c.Group_NPI__c', None), (u'Claim__c.ICD_9_Code__c', None), (u'Claim__c.icd10_codes__c', None), (u'Claim__c.id_in_Connectria__c', None), (u'Claim__c.Imported__c', None), (u'Claim__c.Imported_Source_Point__c', None), (u'Claim__c.In_Network__c', None), (u'Claim__c.Incurred_Date__c', None), (u'Claim__c.isCloned__c', None), (u'Claim__c.IsETLUpdate__c', None), (u'Claim__c.isVIPAccount__c', None), (u'Claim__c.Last_Modified_Date_Javelina__c', None), (u'Claim__c.Original_Created_Date__c', None), (u'Claim__c.Oucr__c', None), (u'Claim__c.Out_of_Pocket__c', None), (u'Claim__c.Paid__c', None), (u'Claim__c.patient_paid__c', None), (u'Claim__c.Patient_Responsibility__c', None), (u'Claim__c.Payment_Date__c', None), (u'Claim__c.Prior_Authorization_Information__c', None), (u'Claim__c.Provider__c', None), (u'Claim__c.Provider_Discount__c', None), (u'Claim__c.Provider_First_Name__c', None), (u'Claim__c.Provider_Last_Name__c', None), (u'Claim__c.Provider_NPI__c', None), (u'Claim__c.provider_office_name__c', None), (u'Claim__c.Provider_Paid__c', None), (u'Claim__c.provider_taxonomy_code__c', None), (u'Claim__c.recieved_date__c', None), (u'Claim__c.RedCard_Login__c', None), (u'Claim__c.Repriced_Amount__c', None), (u'Claim__c.service_type__c', None), (u'Claim__c.Status__c', None), (u'Claim__c.Total_Charge__c', None), (u'Claim__c.uhh_parent_id__c', None), (u'Claim__c.uhh_patient_first_name__c', None), (u'Claim__c.uhh_patient_id__c', None), (u'Claim__c.uhh_patient_last_name__c', None), (u'Claim__c.uhh_patient_relationship__c', None), (u'Claim__c.uhh_type__c', None), (u'Claim__c.uhh_update_at__c', None), (u'Claim__c.uhhApi_ClaimsId__c', None), (u'Claim__c.uhhApi_Status__c', None), (u'Contact.Account', None), (u'Contact.Affiliate_ID__c', None), (u'Contact.Annual_Mileage__c', None), (u'Contact.AssistantName', None), (u'Contact.AssistantPhone', None), (u'Contact.Associated_Plan__c', None), (u'Contact.At_This_Address_Since__c', None), (u'Contact.auth_code__c', None), (u'Contact.benefit_status__c', None), (u'Contact.BillingAddress__c', None), (u'Contact.Birthdate', None), (u'Contact.BMI__c', None), (u'Contact.broker_number__c', None), (u'Contact.Broker_Status__c', None), (u'Contact.Car_Make__c', None), (u'Contact.Car_Model__c', None), (u'Contact.Car_Year__c', None), (u'Contact.Cell_Carrier__c', None), (u'Contact.ConOwnedBy_User__c', None), (u'Contact.Conversion_Comments__c', None), (u'Contact.Current_Mileage__c', None), (u'Contact.Currently_a_Student__c', None), (u'Contact.Date_of_Birth__c', None), (u'Contact.Date_of_Hire__c', None), (u'Contact.Deduplication_Comments__c', None), (u'Contact.Department', None), (u'Contact.Description', None), (u'Contact.DoNotCall', None), (u'Contact.Driver_s_License_Number__c', None), (u'Contact.Driver_s_License_State__c', None), (u'Contact.Education__c', None), (u'Contact.eligible_effective_date__c', None), (u'Contact.Eligible_end_date__c', None), (u'Contact.Email', None), (u'Contact.Email_to_Text_Address__c', None), (u'Contact.Facility_City__c', None), (u'Contact.Facility_Name__c', None), (u'Contact.Facility_Postal_Code__c', None), (u'Contact.Facility_State__c', None), (u'Contact.Facility_Street_Address__c', None), (u'Contact.Fax', None), (u'Contact.Gender__c', None), (u'Contact.Handicapped__c', None), (u'Contact.HasOptedOutOfEmail', None), (u'Contact.HasOptedOutOfFax', None), (u'Contact.Height_ft__c', None), (u'Contact.height_in__c', None), (u'Contact.HomePhone', None), (u'Contact.Jigsaw', None), (u'Contact.LeadSource', None), (u'Contact.MailingAddress', None), (u'Contact.Marital_Status__c', None), (u'Contact.Medical_Conditions__c', None), (u'Contact.medications__c', None), (u'Contact.MemberId__c', None), (u'Contact.Migrated__c', None), (u'Contact.mkto_si__HideDate__c', None), (u'Contact.mkto_si__Last_Interesting_Moment__c', None), (u'Contact.mkto_si__Last_Interesting_Moment_Date__c', None), (u'Contact.mkto_si__Last_Interesting_Moment_Desc__c', None), (u'Contact.mkto_si__Last_Interesting_Moment_Source__c', None), (u'Contact.mkto_si__Last_Interesting_Moment_Type__c', None), (u'Contact.mkto_si__Priority__c', None), (u'Contact.mkto_si__Relative_Score__c', None), (u'Contact.mkto_si__Relative_Score_Value__c', None), (u'Contact.mkto_si__Sales_Insight__c', None), (u'Contact.mkto_si__Urgency__c', None), (u'Contact.mkto_si__Urgency_Value__c', None), (u'Contact.mkto_si__View_in_Marketo__c', None), (u'Contact.mkto2__Acquisition_Date__c', None), (u'Contact.mkto2__Acquisition_Program__c', None), (u'Contact.mkto2__Acquisition_Program_Id__c', None), (u'Contact.mkto2__Inferred_City__c', None), (u'Contact.mkto2__Inferred_Company__c', None), (u'Contact.mkto2__Inferred_Country__c', None), (u'Contact.mkto2__Inferred_Metropolitan_Area__c', None), (u'Contact.mkto2__Inferred_Phone_Area_Code__c', None), (u'Contact.mkto2__Inferred_Postal_Code__c', None), (u'Contact.mkto2__Inferred_State_Region__c', None), (u'Contact.mkto2__Lead_Score__c', None), (u'Contact.mkto2__Original_Referrer__c', None), (u'Contact.mkto2__Original_Search_Engine__c', None), (u'Contact.mkto2__Original_Search_Phrase__c', None), (u'Contact.mkto2__Original_Source_Info__c', None), (u'Contact.mkto2__Original_Source_Type__c', None), (u'Contact.MobilePhone', None), (u'Contact.Networks_Associated_With__c', None), (u'Contact.Not_Included_on_Policy_Because__c', None), (u'Contact.Number_of_Children__c', None), (u'Contact.Occupation__c', None), (u'Contact.Original_Object_ID__c', None), (u'Contact.OtherAddress', None), (u'Contact.OtherPhone', None), (u'Contact.Owns_Residence__c', None), (u'Contact.pcp__c', None), (u'Contact.person_notes__c', None), (u'Contact.Phone', None), (u'Contact.Policy_Member__c', None), (u'Contact.Preferred_Method_of_Contact__c', None), (u'Contact.Property_Type__c', None), (u'Contact.Provider_Degree__c', None), (u'Contact.Provider_Group_NPI__c', None), (u'Contact.Provider_NPI__c', None), (u'Contact.Provider_Specialty_Code__c', None), (u'Contact.Provider_Specialty_Name__c', None), (u'Contact.Provider_Status__c', None), (u'Contact.Registered_State__c', None), (u'Contact.relationship__c', None), (u'Contact.ReportsTo', None), (u'Contact.Residence_City__c', None), (u'Contact.Residence_Country__c', None), (u'Contact.Residence_State__c', None), (u'Contact.Residence_Street__c', None), (u'Contact.Residence_Zip_Postal_Code__c', None), (u'Contact.Spouse__c', None), (u'Contact.Spouse_Date_of_Birth__c', None), (u'Contact.Spouse_Gender__c', None), (u'Contact.ssn__c', None), (u'Contact.Title', None), (u'Contact.Tobacco_Products__c', None), (u'Contact.Tobacco_User__c', None), (u'Contact.VIN__c', None), (u'Contact.weight_lb__c', None), (u'Contract.ActivatedBy', None), (u'Contract.ActivatedDate', None), (u'Contract.BillingAddress', None), (u'Contract.CompanySigned', None), (u'Contract.CompanySignedDate', None), (u'Contract.ContractTerm', None), (u'Contract.CustomerSigned', None), (u'Contract.CustomerSignedDate', None), (u'Contract.CustomerSignedTitle', None), (u'Contract.Description', None), (u'Contract.EndDate', None), (u'Contract.Name', None), (u'Contract.OwnerExpirationNotice', None), (u'Contract.ShippingAddress', None), (u'Contract.SpecialTerms', None), (u'Contract.StartDate', None), (u'DataMigration__c.MigrationStatus__c', None), (u'DataMigration__c.TotalErrors__c', None), (u'DataMigration__c.TotalRecords__c', None), (u'DataMigration__c.TotalSuccess__c', None), (u'DataMigrationItem__c.Account__c', None), (u'DataMigrationItem__c.AccountMigrationDetails__c', None), (u'DataMigrationItem__c.AccountMigrationStatus__c', None), (u'DataMigrationItem__c.Address_1__c', None), (u'DataMigrationItem__c.Address_2__c', None), (u'DataMigrationItem__c.ALT1__c', None), (u'DataMigrationItem__c.ALT2__c', None), (u'DataMigrationItem__c.Birth_Dt__c', None), (u'DataMigrationItem__c.Cert__c', None), (u'DataMigrationItem__c.City__c', None), (u'DataMigrationItem__c.Client_ID__c', None), (u'DataMigrationItem__c.Client_Name__c', None), (u'DataMigrationItem__c.County__c', None), (u'DataMigrationItem__c.Eff_Dt__c', None), (u'DataMigrationItem__c.Email__c', None), (u'DataMigrationItem__c.ErrorDetails__c', None), (u'DataMigrationItem__c.Family__c', None), (u'DataMigrationItem__c.FamilyMigrationDetails__c', None), (u'DataMigrationItem__c.First_Name__c', None), (u'DataMigrationItem__c.Gender__c', None), (u'DataMigrationItem__c.Last_Name__c', None), (u'DataMigrationItem__c.MI__c', None), (u'DataMigrationItem__c.MigrationStatus__c', None), (u'DataMigrationItem__c.Opportunity__c', None), (u'DataMigrationItem__c.OpportunityMigrationDetails__c', None), (u'DataMigrationItem__c.Phone__c', None), (u'DataMigrationItem__c.Plan_ID__c', None), (u'DataMigrationItem__c.Policy__c', None), (u'DataMigrationItem__c.PolicyMigrationDetails__c', None), (u'DataMigrationItem__c.Product_ID__c', None), (u'DataMigrationItem__c.Race__c', None), (u'DataMigrationItem__c.Relation__c', None), (u'DataMigrationItem__c.Retro_Mo_1__c', None), (u'DataMigrationItem__c.Retro_Mo_2__c', None), (u'DataMigrationItem__c.Retro_Mo_3__c', None), (u'DataMigrationItem__c.SSN__c', None), (u'DataMigrationItem__c.ST__c', None), (u'DataMigrationItem__c.status__c', None), (u'DataMigrationItem__c.Term_Dt__c', None), (u'DataMigrationItem__c.Updated__c', None), (u'DataMigrationItem__c.ZIP__c', None), (u'Employer_Payments__c.Imported__c', None), (u'Employer_Payments__c.Imported_Source_Point__c', None), (u'Employer_Payments__c.IsETLUpdate__c', None), (u'Employer_Payments__c.uhh_employer_id__c', None), (u'Employer_Payments__c.uhh_paymentsId__c', None), (u'Employer_Payments__c.uhh_update_at__c', None), (u'Employer_Payments__c.uhhApi_empPaymentId__c', None), (u'Event.Action__c', None), (u'Event.Activity_Type__c', None), (u'Event.Asthma_affecting_work_school_home_etc__c', None), (u'Event.Asthma_symptoms_wake_you__c', None), (u'Event.Auto_Generated__c', None), (u'Event.Call_Answered_Time__c', None), (u'Event.Call_Hangup_Time__c', None), (u'Event.Call_Notes__c', None), (u'Event.Channel_Name__c', None), (u'Event.cloneComments__c', None), (u'Event.Cloned_From__c', None), (u'Event.Current_Carrier__c', None), (u'Event.Date_Interest_Expressed__c', None), (u'Event.Description', None), (u'Event.How_often__c', None), (u'Event.How_often_used_rescue_inhaler_or_meds__c', None), (u'Event.IsAllDayEvent', None), (u'Event.isCloned__c', None), (u'Event.isVIPAccount__c', None), (u'Event.IsVisibleInSelfService', None), (u'Event.Location', None), (u'Event.Migrated__c', None), (u'Event.Original_Object_ID__c', None), (u'Event.Original_Owner_Name__c', None), (u'Event.Program_Contact_Type__c', None), (u'Event.Queue_Name__c', None), (u'Event.Rate_for_asthma_control_in_past_4_weeks__c', None), (u'Event.Review_and_update_demographic_info__c', None), (u'Event.Review_and_update_practitioner_info__c', None), (u'Event.transactionid__c', None), (u'Event.Type', None), (u'Event.What', None), (u'Event.Who', None), (u'Event.X8x8_Log__c', None), (u'Family__c.Account__c', None), (u'Family__c.Age__c', None), (u'Family__c.Birthdate__c', None), (u'Family__c.cloneComments__c', None), (u'Family__c.Cloned_From__c', None), (u'Family__c.Exchange_Member_ID__c', None), (u'Family__c.Gender__c', None), (u'Family__c.isCloned__c', None), (u'Family__c.isVIPAccount__c', None), (u'Family__c.Lead__c', None), (u'Family__c.Migrated__c', None), (u'Family__c.Name__c', None), (u'Family__c.Original_Object_ID__c', None), (u'Family__c.Policy_Member__c', None), (u'Family__c.Relationship__c', None), (u'Family__c.SecurityLockDisplay__c', None), (u'Family__c.Specific_Relationship__c', None), (u'Family__c.Tobacco__c', None), (u'FollowUp__c.Description__c', None), (u'FollowUp__c.MediaType__c', None), (u'Group_Member__c.Date_of_Birth__c', None), (u'Group_Member__c.Email__c', None), (u'Group_Member__c.Gender__c', None), (u'Group_Member__c.Group_Lead__c', None), (u'Group_Member__c.Hire_Date__c', None), (u'Group_Member__c.Member_Zip_Postal_Code__c', None), (u'Group_Member__c.Tobacco__c', None), (u'Group_Member_Dependent__c.Date_of_Birth__c', None), (u'Group_Member_Dependent__c.Dependent_Last_Name__c', None), (u'Group_Member_Dependent__c.Gender__c', None), (u'Group_Member_Dependent__c.Relationship_To_Primary__c', None), (u'Group_Member_Dependent__c.Tobacco__c', None), (u'IM_834_IN__c.GSHDRS01GS02APPSENDRCD__c', None), (u'IM_834_IN__c.GSHDRS01GS03APPRECVRCD__c', None), (u'IM_834_IN__c.GSHDRS01GS04DT__c', None), (u'IM_834_IN__c.GSHDRS01GS05TM__c', None), (u'IM_834_IN__c.GSHDRS01GS06GCN__c', None), (u'IM_834_IN__c.GSHDRS01GS08VERSIDCD__c', None), (u'IM_834_IN__c.GSHDRS03GE01TSCT__c', None), (u'IM_834_IN__c.GSHDRS03GE02GCN__c', None), (u'IM_834_IN__c.L1000AS01N102PLANSPONSRNM__c', None), (u'IM_834_IN__c.L1000AS01N104SPONSRIDOVLCDASGNDDESTNTNOR__c', None), (u'IM_834_IN__c.L1000AS01N104SPONSRIDOVLFEDTAXIDNR__c', None), (u'IM_834_IN__c.L1000BS01N102INSRNM__c', None), (u'IM_834_IN__c.L1000BS01N104INSRIDCDOVLFEDTAXIDNR__c', None), (u'IM_834_IN__c.L1000CBOS01N102BROKRNM__c', None), (u'IM_834_IN__c.L1000CBOS01N104TPABROKRIDCDOVLCDASGNDDES__c', None), (u'IM_834_IN__c.L1000CTVS01N102BROKRNM__c', None), (u'IM_834_IN__c.L1000CTVS01N104TPABROKRIDCDOVLCDASGNDDES__c', None), (u'IM_834_IN__c.L1100CS01ACT01TPABROKRACNTNR__c', None), (u'IM_834_IN__c.L2000S01INS01MEMIND__c', None), (u'IM_834_IN__c.L2000S01INS02INDVDLRELCD__c', None), (u'IM_834_IN__c.L2000S01INS03MAINTNCTYPECD__c', None), (u'IM_834_IN__c.L2000S01INS04MAINTNCRSNCD__c', None), (u'IM_834_IN__c.L2000S01INS05BENFTSTATSCD__c', None), (u'IM_834_IN__c.L2000S01INS08EMPLYMNTSTATSCD__c', None), (u'IM_834_IN__c.L2000S02REF02SUBIDOVLSUBNR__c', None), (u'IM_834_IN__c.L2000S04REF02I02SUPPIDOVLCROSREFNR__c', None), (u'IM_834_IN__c.L2000S04REF02SUPPIDOVLCLIENTREPRTNGCATGR__c', None), (u'IM_834_IN__c.L2000S05DTP03STATSNFOEFFDTOVLELIGBEGND8__c', None), (u'IM_834_IN__c.L2100AILS01NM103MEMLNAMEOVLPERSN__c', None), (u'IM_834_IN__c.L2100AILS01NM104MEMFNAME__c', None), (u'IM_834_IN__c.L2100AILS01NM105MEMMNAME__c', None), (u'IM_834_IN__c.L2100AILS01NM106NMPREFX__c', None), (u'IM_834_IN__c.L2100AILS01NM107NMSUFX__c', None), (u'IM_834_IN__c.L2100AILS01NM109MEMIDOVLSSN__c', None), (u'IM_834_IN__c.L2100AILS02PER04COMMNROVLBEPRNR__c', None), (u'IM_834_IN__c.L2100AILS02PER04COMMNROVLEMAIL__c', None), (u'IM_834_IN__c.L2100AILS02PER04COMMNROVLTELPHN__c', None), (u'IM_834_IN__c.L2100AILS02PER06COMMNROVLEMAIL__c', None), (u'IM_834_IN__c.L2100AILS02PER06I02COMMNROVLALTRNTTELPHN__c', None), (u'IM_834_IN__c.L2100AILS03N301ADRSLIN__c', None), (u'IM_834_IN__c.L2100AILS03N302ADRSLIN__c', None), (u'IM_834_IN__c.L2100AILS04N401CITYNM__c', None), (u'IM_834_IN__c.L2100AILS04N402STATCD__c', None), (u'IM_834_IN__c.L2100AILS04N403MEMPOSTLZONZIPCD__c', None), (u'IM_834_IN__c.L2100AILS04N406LOCIDOVLCOUNTYPRSH__c', None), (u'IM_834_IN__c.L2100AILS05DMG02BIRTHDTOVLDTCCYYMMDD__c', None), (u'IM_834_IN__c.L2100AILS05DMG03GENDRCD__c', None), (u'IM_834_IN__c.L2100AILS05DMG04MARTLSTATSCD__c', None), (u'IM_834_IN__c.L2100AILS05DMG0503RACETHNCTYCDOVLCLASFCT__c', None), (u'IM_834_IN__c.L2100AILS09HLH01RELTDCD__c', None), (u'IM_834_IN__c.L2100AILS10LUI02LANGCDOVLIS639LANGCD__c', None), (u'IM_834_IN__c.L2100CS02N301ADRSLIN__c', None), (u'IM_834_IN__c.L2100CS02N302ADRSLIN__c', None), (u'IM_834_IN__c.L2100CS03N401MEMMAILCITYNM__c', None), (u'IM_834_IN__c.L2100CS03N402MEMMAILSTATCD__c', None), (u'IM_834_IN__c.L2100CS03N403POSTLZONZIPCD__c', None), (u'IM_834_IN__c.L2300S01HD01MAINTNCTYPECD__c', None), (u'IM_834_IN__c.L2300S01HD03INSLINCD__c', None), (u'IM_834_IN__c.L2300S02DTP03COVGPERDOVLBENFTBEGND8__c', None), (u'IM_834_IN__c.L2300S04REF02I02MEMGRPPOLCYNROVLCLASCONT__c', None), (u'IM_834_IN__c.L2300S04REF02MEMGRPPOLCYNROVLGRPPOLCYNR__c', None), (u'IM_834_IN__c.L2700S01LS01LPIDCD__c', None), (u'IM_834_IN__c.L2700S03LE01IDCD__c', None), (u'IM_834_IN__c.L2710S01LX01ASGNDNR__c', None), (u'IM_834_IN__c.L2750S01N102MEMREPRTNGCATGRYNM__c', None), (u'IM_834_IN__c.L2750S02REF02MEMREPRTNGCATGRYREFIDOVLACN__c', None), (u'IM_834_IN__c.L2750S02REF02MEMREPRTNGCATGRYREFIDOVLCLI__c', None), (u'IM_834_IN__c.L2750S02REF02MEMREPRTNGCATGRYREFIDOVLPMT__c', None), (u'IM_834_IN__c.L2750S03DTP03MEMREPRTNGCATGRYEFFDTOVLEFF__c', None), (u'IM_834_IN__c.OEISAS01ISA02AUTHNFOOVLNOAUTHNFO__c', None), (u'IM_834_IN__c.OEISAS01ISA04SECNFOOVLNOSECNFO__c', None), (u'IM_834_IN__c.OEISAS01ISA06SENDRIDOVLMUTLYDEFNDID__c', None), (u'IM_834_IN__c.OEISAS01ISA08RECVRIDOVLMUTLYDEFNDID__c', None), (u'IM_834_IN__c.OEISAS01ISA09DT__c', None), (u'IM_834_IN__c.OEISAS01ISA10TM__c', None), (u'IM_834_IN__c.OEISAS01ISA11REPTNSEPRTR__c', None), (u'IM_834_IN__c.OEISAS01ISA12VERSNNR__c', None), (u'IM_834_IN__c.OEISAS01ISA13ICN__c', None), (u'IM_834_IN__c.OEISAS01ISA14ACKREQ__c', None), (u'IM_834_IN__c.OEISAS01ISA15USGIND__c', None), (u'IM_834_IN__c.OEISAS01ISA16SUBELESEP__c', None), (u'IM_834_IN__c.OEISAS03IEA01GSCT__c', None), (u'IM_834_IN__c.OEISAS03IEA02ICN__c', None), (u'IM_834_IN__c.stageddependenttotal__c', None), (u'IM_834_IN__c.stagedemployeetotal__c', None), (u'IM_834_IN__c.stagedgroupcontrolnumber__c', None), (u'IM_834_IN__c.stagedissuerassignedsubscriberid__c', None), (u'IM_834_IN__c.stagedlastpremiumpaiddate__c', None), (u'IM_834_IN__c.stagedpremiumpaidtodate__c', None), (u'IM_834_IN__c.stagedtotal__c', None), (u'IM_834_IN__c.stagedtransactioncontrolnumber__c', None), (u'IM_834_IN__c.STHDRS01ST02CONTRLNR__c', None), (u'IM_834_IN__c.STHDRS01ST03IMPLMNTNCONVNTNREFNC__c', None), (u'IM_834_IN__c.STHDRS02BGN01TSPURPSCD__c', None), (u'IM_834_IN__c.STHDRS02BGN02TSREFNR__c', None), (u'IM_834_IN__c.STHDRS02BGN03TSCREATNDT__c', None), (u'IM_834_IN__c.STHDRS02BGN04TSCREATNTIM__c', None), (u'IM_834_IN__c.STHDRS02BGN05TIMZONCD__c', None), (u'IM_834_IN__c.STHDRS02BGN08ACTNCD__c', None), (u'IM_834_IN__c.STHDRS04DTP03DTTMPERDOVLMAINTNCEFFD8__c', None), (u'IM_834_IN__c.STHDRS05QTY02I02RECRDTOTLSOVLDEPNDNTTOTL__c', None), (u'IM_834_IN__c.STHDRS05QTY02RECRDTOTLSOVLTOTL__c', None), (u'IM_834_IN__c.STHDRS10SE01SEGCT__c', None), (u'IM_834_IN__c.STHDRS10SE02TCN__c', None), (u'Lead.Address', None), (u'Lead.Address__c', None), (u'Lead.Age_of_Spouse_Domestic_Partner__c', None), (u'Lead.Age_of_the_first_adult__c', None), (u'Lead.Annual_Mileage__c', None), (u'Lead.AnnualRevenue', None), (u'Lead.Application_Completed_Notes__c', None), (u'Lead.Assisting_Agent__c', None), (u'Lead.At_This_Address_Since__c', None), (u'Lead.Auto_Archived__c', None), (u'Lead.Auto_Archived_Date__c', None), (u'Lead.Benefits_Specialist__c', None), (u'Lead.Broker_Information__c', None), (u'Lead.Car_Make__c', None), (u'Lead.Car_Model__c', None), (u'Lead.Car_Year__c', None), (u'Lead.CompanyDunsNumber', None), (u'Lead.Converted_Account_Id__c', None), (u'Lead.Converted_Contact_Id__c', None), (u'Lead.Converted_Opportunity_Id__c', None), (u'Lead.County__c', None), (u'Lead.Coverage_Amount__c', None), (u'Lead.Coverage_Interests__c', None), (u'Lead.Coverage_Start_Date_Preferred__c', None), (u'Lead.Current_Annual_Premium__c', None), (u'Lead.Current_Carrier_s__c', None), (u'Lead.Current_Coverage__c', None), (u'Lead.Current_Mileage__c', None), (u'Lead.Customer_Status__c', None), (u'Lead.Date_Business_Started__c', None), (u'Lead.Date_of_Birth__c', None), (u'Lead.Description', None), (u'Lead.DoNotCall', None), (u'Lead.Driver_s_License_Number__c', None), (u'Lead.Driver_s_License_State__c', None), (u'Lead.Education__c', None), (u'Lead.Email', None), (u'Lead.Employeed__c', None), (u'Lead.Enrollment_Specialists__c', None), (u'Lead.Estimated_Personal_Income_Annual__c', None), (u'Lead.Eve_Phone__c', None), (u'Lead.ExternalID__c', None), (u'Lead.Fax', None), (u'Lead.FederationID__c', None), (u'Lead.Follow_Up_Status__c', None), (u'Lead.Gender__c', None), (u'Lead.Group_Lead__c', None), (u'Lead.HasOptedOutOfEmail', None), (u'Lead.HasOptedOutOfFax', None), (u'Lead.Height__c', None), (u'Lead.Industry', None), (u'Lead.Initial_Contact__c', None), (u'Lead.Initial_Contact_Date__c', None), (u'Lead.IsAssignedToQueue__c', None), (u'Lead.IsDefaultLeadOwner__c', None), (u'Lead.Jigsaw', None), (u'Lead.Last_Action__c', None), (u'Lead.Last_Activity__c', None), (u'Lead.LastTransferDate', None), (u'Lead.Lead_Type__c', None), (u'Lead.LeadScore__c', None), (u'Lead.LeadSource', None), (u'Lead.Legal_Entity__c', None), (u'Lead.Marital_Status__c', None), (u'Lead.Medications__c', None), (u'Lead.MemberId__c', None), (u'Lead.Migrated__c', None), (u'Lead.mkto_si__HideDate__c', None), (u'Lead.mkto_si__Last_Interesting_Moment__c', None), (u'Lead.mkto_si__Last_Interesting_Moment_Date__c', None), (u'Lead.mkto_si__Last_Interesting_Moment_Desc__c', None), (u'Lead.mkto_si__Last_Interesting_Moment_Source__c', None), (u'Lead.mkto_si__Last_Interesting_Moment_Type__c', None), (u'Lead.mkto_si__MSIContactId__c', None), (u'Lead.mkto_si__Priority__c', None), (u'Lead.mkto_si__Relative_Score__c', None), (u'Lead.mkto_si__Relative_Score_Value__c', None), (u'Lead.mkto_si__Urgency__c', None), (u'Lead.mkto_si__Urgency_Value__c', None), (u'Lead.mkto_si__View_in_Marketo__c', None), (u'Lead.mkto2__Acquisition_Date__c', None), (u'Lead.mkto2__Acquisition_Program__c', None), (u'Lead.mkto2__Acquisition_Program_Id__c', None), (u'Lead.mkto2__Inferred_City__c', None), (u'Lead.mkto2__Inferred_Company__c', None), (u'Lead.mkto2__Inferred_Country__c', None), (u'Lead.mkto2__Inferred_Metropolitan_Area__c', None), (u'Lead.mkto2__Inferred_Phone_Area_Code__c', None), (u'Lead.mkto2__Inferred_Postal_Code__c', None), (u'Lead.mkto2__Inferred_State_Region__c', None), (u'Lead.mkto2__Lead_Score__c', None), (u'Lead.mkto2__Original_Referrer__c', None), (u'Lead.mkto2__Original_Search_Engine__c', None), (u'Lead.mkto2__Original_Search_Phrase__c', None), (u'Lead.mkto2__Original_Source_Info__c', None), (u'Lead.mkto2__Original_Source_Type__c', None), (u'Lead.MobilePhone', None), (u'Lead.Network_Info__c', None), (u'Lead.NHL_Password__c', None), (u'Lead.NHL_Username__c', None), (u'Lead.No_of_Members_and_Managers__c', None), (u'Lead.Number_of_Children_age_21_25__c', None), (u'Lead.Number_of_Children_Under_Age_21__c', None), (u'Lead.Number_of_People_in_Household__c', None), (u'Lead.NumberOfEmployees', None), (u'Lead.Occupation__c', None), (u'Lead.On_Exchange_App_Completed_By__c', None), (u'Lead.Original_Created_Date__c', None), (u'Lead.Original_Einstein__c', None), (u'Lead.Original_Last_Modified_By__c', None), (u'Lead.Original_Last_Modified_Date__c', None), (u'Lead.Original_Last_Modified_Name__c', None), (u'Lead.Original_Object_ID__c', None), (u'Lead.Original_Owner_ID__c', None), (u'Lead.Original_Owner_Name__c', None), (u'Lead.Owns_Residence__c', None), (u'Lead.Pending_Broker_Information__c', None), (u'Lead.Pending_Follow_Up_Date__c', None), (u'Lead.Phone', None), (u'Lead.Policy_Expiration_Date__c', None), (u'Lead.Pre_existing_Conditions__c', None), (u'Lead.Preferred_Language__c', None), (u'Lead.Preferred_Method_of_Contact__c', None), (u'Lead.Prequalified_By__c', None), (u'Lead.Prequalified_By_Text__c', None), (u'Lead.Previously_Insured__c', None), (u'Lead.Primary_DOB__c', None), (u'Lead.Prior_Carrier__c', None), (u'Lead.Property_Type__c', None), (u'Lead.Quick_Notes__c', None), (u'Lead.Rating', None), (u'Lead.Registered_State__c', None), (u'Lead.Residence_City__c', None), (u'Lead.Residence_Country__c', None), (u'Lead.Residence_State__c', None), (u'Lead.Residence_Street__c', None), (u'Lead.Residence_Zip_Postal_Code__c', None), (u'Lead.Specific_Source__c', None), (u'Lead.Spouse__c', None), (u'Lead.Sub_account_of__c', None), (u'Lead.Subscriber__c', None), (u'Lead.SubscriberHIXID__c', None), (u'Lead.Subsidy_Eligible__c', None), (u'Lead.Title', None), (u'Lead.Tobacco_User__c', None), (u'Lead.Updated_via_Task_Action__c', None), (u'Lead.VIN__c', None), (u'Lead.Website', None), (u'Lead.Weight__c', None), (u'Lead.Years_in_Business__c', None), (u'legacyAccountsDedupResults__c.childJobID__c', None), (u'legacyAccountsDedupResults__c.JobID__c', None), (u'legacyAccountsDedupResults__c.NumETLAccounts__c', None), (u'legacyAccountsDedupResults__c.NumMatchingLegacyAccounts__c', None), (u'Medical_Management__c.Alert_Notification__c', None), (u'Medical_Management__c.Case_Management__c', None), (u'Medical_Management__c.cloneComments__c', None), (u'Medical_Management__c.Cloned_From__c', None), (u'Medical_Management__c.Disease_Management__c', None), (u'Medical_Management__c.Diseased__c', None), (u'Medical_Management__c.Eligibility_Confirmed__c', None), (u'Medical_Management__c.End_of_Hospitalization__c', None), (u'Medical_Management__c.End_of_Ongoing_Treatment__c', None), (u'Medical_Management__c.Family_Member__c', None), (u'Medical_Management__c.Hospital__c', None), (u'Medical_Management__c.Hospitalization__c', None), (u'Medical_Management__c.Hospitalization_Diagnostic_Code__c', None), (u'Medical_Management__c.isCloned__c', None), (u'Medical_Management__c.isVIPAccount__c', None), (u'Medical_Management__c.Main_Diagnosis_for_Treatment__c', None), (u'Medical_Management__c.Medication_Trigger_Email__c', None), (u'Medical_Management__c.Medication_Trigger_Reason__c', None), (u'Medical_Management__c.Number_of_Medications__c', None), (u'Medical_Management__c.Ongoing_Diagnostic_Code__c', None), (u'Medical_Management__c.Ongoing_Treatment__c', None), (u'Medical_Management__c.Outpatient_Diagnostic_Code__c', None), (u'Medical_Management__c.Reason_for_Hospitalization__c', None), (u'Medical_Management__c.Receiving_Outpatient_Therapy__c', None), (u'Medical_Management__c.Referred_Out_To__c', None), (u'Medical_Management__c.Resolution_of_Treatment__c', None), (u'Medical_Management__c.Send_Campaign_Emails__c', None), (u'Medical_Management__c.Start_of_Hospitalization__c', None), (u'Medical_Management__c.Start_of_Ongoing_Treatment__c', None), (u'Medical_Management__c.Treatment_Facility__c', None), (u'Medical_Management__c.Type_of_Outpatient_Treatment__c', None), (u'Medication__c.Account__c', None), (u'Medication__c.cloneComments__c', None), (u'Medication__c.Cloned_From__c', None), (u'Medication__c.Family_Member__c', None), (u'Medication__c.isCloned__c', None), (u'Medication__c.isVIPAccount__c', None), (u'Medication__c.Late_Filling_Prescription__c', None), (u'Medication__c.Medication_Status__c', None), (u'Medication__c.Prescription_Actually_Filled_On__c', None), (u'Medication__c.Prescription_Filled_On_Time__c', None), (u'Medication__c.Prescription_Last_Filled__c', None), (u'Medication__c.Prescription_Next_Fill__c', None), (u'Medication__c.Use_of_Medication__c', None), (u'mkto_si__Best_Bets_View__c.mkto_si__IncludeDefaultColumns__c', None), (u'mkto_si__Best_Bets_View__c.mkto_si__MaxPages__c', None), (u'mkto_si__Best_Bets_View__c.mkto_si__MaxRows__c', None), (u'mkto_si__Best_Bets_View__c.mkto_si__Object__c', None), (u'mkto_si__Best_Bets_View__c.mkto_si__OwnerFilter__c', None), (u'mkto_si__Best_Bets_View__c.mkto_si__ShowRecordsWithNegativeScores__c', None), (u'mkto_si__Best_Bets_View_Detail__c.mkto_si__FieldLabel__c', None), (u'mkto_si__Best_Bets_View_Detail__c.mkto_si__FieldName__c', None), (u'mkto_si__Best_Bets_View_Detail__c.mkto_si__FieldNumber__c', None), (u'mkto_si__Best_Bets_View_Detail__c.mkto_si__FieldType__c', None), (u'mkto_si__Best_Bets_View_Detail__c.mkto_si__LookupValue__c', None), (u'mkto_si__Best_Bets_View_Detail__c.mkto_si__Operator__c', None), (u'mkto_si__Best_Bets_View_Detail__c.mkto_si__ShowField__c', None), (u'mkto_si__Best_Bets_View_Detail__c.mkto_si__Value__c', None), (u'mkto_si__BestBetsCache__c.mkto_si__AccountLink__c', None), (u'mkto_si__BestBetsCache__c.mkto_si__AccountLinkName__c', None), (u'mkto_si__BestBetsCache__c.mkto_si__BestBetsView__c', None), (u'mkto_si__BestBetsCache__c.mkto_si__ContactId__c', None), (u'mkto_si__BestBetsCache__c.mkto_si__ContactLink__c', None), (u'mkto_si__BestBetsCache__c.mkto_si__ContactName__c', None), (u'mkto_si__BestBetsCache__c.mkto_si__Id__c', None), (u'mkto_si__BestBetsCache__c.mkto_si__LeadScore__c', None), (u'mkto_si__BestBetsCache__c.mkto_si__LIMDate__c', None), (u'mkto_si__BestBetsCache__c.mkto_si__LIMDesc__c', None), (u'mkto_si__BestBetsCache__c.mkto_si__LIMType__c', None), (u'mkto_si__BestBetsCache__c.mkto_si__Priority__c', None), (u'mkto_si__BestBetsCache__c.mkto_si__RelativeScore__c', None), (u'mkto_si__BestBetsCache__c.mkto_si__RowNum__c', None), (u'mkto_si__BestBetsCache__c.mkto_si__SObjectType__c', None), (u'mkto_si__BestBetsCache__c.mkto_si__Status__c', None), (u'mkto_si__BestBetsCache__c.mkto_si__TotalCount__c', None), (u'mkto_si__BestBetsCache__c.mkto_si__Urgency__c', None), (u'mkto_si__EmailActivityCache__c.mkto_si__AccountLink__c', None), (u'mkto_si__EmailActivityCache__c.mkto_si__AccountLinkName__c', None), (u'mkto_si__EmailActivityCache__c.mkto_si__ActivityDT__c', None), (u'mkto_si__EmailActivityCache__c.mkto_si__Campaign__c', None), (u'mkto_si__EmailActivityCache__c.mkto_si__ClickCount__c', None), (u'mkto_si__EmailActivityCache__c.mkto_si__ContactLink__c', None), (u'mkto_si__EmailActivityCache__c.mkto_si__ContactLinkName__c', None), (u'mkto_si__EmailActivityCache__c.mkto_si__Id__c', None), (u'mkto_si__EmailActivityCache__c.mkto_si__MessageId__c', None), (u'mkto_si__EmailActivityCache__c.mkto_si__MessageThreadIndex__c', None), (u'mkto_si__EmailActivityCache__c.mkto_si__MessageType__c', None), (u'mkto_si__EmailActivityCache__c.mkto_si__OpenCount__c', None), (u'mkto_si__EmailActivityCache__c.mkto_si__RowNum__c', None), (u'mkto_si__EmailActivityCache__c.mkto_si__Status__c', None), (u'mkto_si__EmailActivityCache__c.mkto_si__Subject__c', None), (u'mkto_si__EmailActivityCache__c.mkto_si__ThreadNumber__c', None), (u'mkto_si__EmailActivityCache__c.mkto_si__ThreadSubject__c', None), (u'mkto_si__EmailActivityCache__c.mkto_si__TotalCount__c', None), (u'mkto_si__Get_Method_Argus__c.mkto_si__ArguValue__c', None), (u'mkto_si__GroupedWebActivityCache__c.mkto_si__AccountLink__c', None), (u'mkto_si__GroupedWebActivityCache__c.mkto_si__AccountLinkName__c', None), (u'mkto_si__GroupedWebActivityCache__c.mkto_si__City__c', None), (u'mkto_si__GroupedWebActivityCache__c.mkto_si__ContactLink__c', None), (u'mkto_si__GroupedWebActivityCache__c.mkto_si__ContactLinkName__c', None), (u'mkto_si__GroupedWebActivityCache__c.mkto_si__Country__c', None), (u'mkto_si__GroupedWebActivityCache__c.mkto_si__Id__c', None), (u'mkto_si__GroupedWebActivityCache__c.mkto_si__IsAnonymous__c', None), (u'mkto_si__GroupedWebActivityCache__c.mkto_si__LastVisitDT__c', None), (u'mkto_si__GroupedWebActivityCache__c.mkto_si__PageViews__c', None), (u'mkto_si__GroupedWebActivityCache__c.mkto_si__RowNum__c', None), (u'mkto_si__GroupedWebActivityCache__c.mkto_si__SearchLink__c', None), (u'mkto_si__GroupedWebActivityCache__c.mkto_si__SearchLinkName__c', None), (u'mkto_si__GroupedWebActivityCache__c.mkto_si__State__c', None), (u'mkto_si__GroupedWebActivityCache__c.mkto_si__TotalCount__c', None), (u'mkto_si__GroupedWebActivityCache__c.mkto_si__WPageLink__c', None), (u'mkto_si__GroupedWebActivityCache__c.mkto_si__WPageLinkName__c', None), (u'mkto_si__InterestingMomentsCache__c.mkto_si__AccountLink__c', None), (u'mkto_si__InterestingMomentsCache__c.mkto_si__AccountLinkName__c', None), (u'mkto_si__InterestingMomentsCache__c.mkto_si__ActivityDT__c', None), (u'mkto_si__InterestingMomentsCache__c.mkto_si__Campaign__c', None), (u'mkto_si__InterestingMomentsCache__c.mkto_si__ContactLink__c', None), (u'mkto_si__InterestingMomentsCache__c.mkto_si__ContactLinkName__c', None), (u'mkto_si__InterestingMomentsCache__c.mkto_si__Id__c', None), (u'mkto_si__InterestingMomentsCache__c.mkto_si__MomentNote__c', None), (u'mkto_si__InterestingMomentsCache__c.mkto_si__MomentType__c', None), (u'mkto_si__InterestingMomentsCache__c.mkto_si__RowNum__c', None), (u'mkto_si__InterestingMomentsCache__c.mkto_si__TotalCount__c', None), (u'mkto_si__Marketo_Sales_Insight_Config__c.mkto_si__Enable_Marketo_API__c', None), (u'mkto_si__Marketo_Sales_Insight_Config__c.mkto_si__Enable_RSS__c', None), (u'mkto_si__Marketo_Sales_Insight_Config__c.mkto_si__Test_Configuration__c', None), (u'mkto_si__ScoringCache__c.mkto_si__AccountLink__c', None), (u'mkto_si__ScoringCache__c.mkto_si__AccountLinkName__c', None), (u'mkto_si__ScoringCache__c.mkto_si__ActivityDT__c', None), (u'mkto_si__ScoringCache__c.mkto_si__Campaign__c', None), (u'mkto_si__ScoringCache__c.mkto_si__ContactLink__c', None), (u'mkto_si__ScoringCache__c.mkto_si__ContactLinkName__c', None), (u'mkto_si__ScoringCache__c.mkto_si__Id__c', None), (u'mkto_si__ScoringCache__c.mkto_si__NewValue__c', None), (u'mkto_si__ScoringCache__c.mkto_si__OldValue__c', None), (u'mkto_si__ScoringCache__c.mkto_si__Reason__c', None), (u'mkto_si__ScoringCache__c.mkto_si__RowNum__c', None), (u'mkto_si__ScoringCache__c.mkto_si__ScoreName__c', None), (u'mkto_si__ScoringCache__c.mkto_si__TotalCount__c', None), (u'mkto_si__Value__c.mkto_si__Boolean__c', None), (u'mkto_si__Value__c.mkto_si__Currency__c', None), (u'mkto_si__Value__c.mkto_si__Date__c', None), (u'mkto_si__Value__c.mkto_si__DateTime__c', None), (u'mkto_si__Value__c.mkto_si__Double__c', None), (u'mkto_si__Value__c.mkto_si__Email__c', None), (u'mkto_si__Value__c.mkto_si__Percent__c', None), (u'mkto_si__Value__c.mkto_si__Phone__c', None), (u'mkto_si__Value__c.mkto_si__String__c', None), (u'mkto_si__Value__c.mkto_si__TextArea__c', None), (u'mkto_si__Value__c.mkto_si__Url__c', None), (u'mkto_si__Value__c.mkto_si__ValueType__c', None), (u'mkto_si__WebActivityCache__c.mkto_si__Account__c', None), (u'mkto_si__WebActivityCache__c.mkto_si__AccountLink__c', None), (u'mkto_si__WebActivityCache__c.mkto_si__AccountLinkName__c', None), (u'mkto_si__WebActivityCache__c.mkto_si__ActivityDT__c', None), (u'mkto_si__WebActivityCache__c.mkto_si__Contact__c', None), (u'mkto_si__WebActivityCache__c.mkto_si__ContactLink__c', None), (u'mkto_si__WebActivityCache__c.mkto_si__ContactLinkName__c', None), (u'mkto_si__WebActivityCache__c.mkto_si__Id__c', None), (u'mkto_si__WebActivityCache__c.mkto_si__Lead__c', None), (u'mkto_si__WebActivityCache__c.mkto_si__Opportunity__c', None), (u'mkto_si__WebActivityCache__c.mkto_si__RowNum__c', None), (u'mkto_si__WebActivityCache__c.mkto_si__SActivityDT__c', None), (u'mkto_si__WebActivityCache__c.mkto_si__SearchLink__c', None), (u'mkto_si__WebActivityCache__c.mkto_si__SearchLinkName__c', None), (u'mkto_si__WebActivityCache__c.mkto_si__TotalCount__c', None), (u'mkto_si__WebActivityCache__c.mkto_si__WPageLink__c', None), (u'mkto_si__WebActivityCache__c.mkto_si__WPageLinkName__c', None), (u'Opportunity.Account', None), (u'Opportunity.Active_Date__c', None), (u'Opportunity.Agency_Commission__c', None), (u'Opportunity.Amount', None), (u'Opportunity.Application_Completed_Date__c', None), (u'Opportunity.Application_Started__c', None), (u'Opportunity.Application_UUID__c', None), (u'Opportunity.Campaign', None), (u'Opportunity.Carrier__c', None), (u'Opportunity.Child_Only_Application__c', None), (u'Opportunity.cloneComments__c', None), (u'Opportunity.Cloned_From__c', None), (u'Opportunity.Co_Insurance__c', None), (u'Opportunity.Commission_Type_Agency__c', None), (u'Opportunity.Commission_Type_Producer__c', None), (u'Opportunity.Commission_Value_Agency__c', None), (u'Opportunity.Commission_Value_Producer__c', None), (u'Opportunity.Contract', None), (u'Opportunity.Coverage_Amount__c', None), (u'Opportunity.Coverage_Interests__c', None), (u'Opportunity.Current_Carrier_s__c', None), (u'Opportunity.Current_Policy__c', None), (u'Opportunity.Current_Policy_Expiration_Date__c', None), (u'Opportunity.Deductible_Family__c', None), (u'Opportunity.Deductible_Member__c', None), (u'Opportunity.Depth__c', None), (u'Opportunity.Description', None), (u'Opportunity.Effective_Date_of_New_Policy__c', None), (u'Opportunity.Exchange_Details__c', None), (u'Opportunity.ExpectedRevenue', None), (u'Opportunity.Expiration_Date_of_New_Policy__c', None), (u'Opportunity.isCloned__c', None), (u'Opportunity.IsPrivate', None), (u'Opportunity.isVIPAccount__c', None), (u'Opportunity.Lead_Type__c', None), (u'Opportunity.LeadSource', None), (u'Opportunity.Line_of_Business__c', None), (u'Opportunity.Max_Out_of_Pocket_Family__c', None), (u'Opportunity.Max_Out_of_Pocket_Member__c', None), (u'Opportunity.Migrated__c', None), (u'Opportunity.mkto_si__MarketoAnalyzer__c', None), (u'Opportunity.Monthly_Premium__c', None), (u'Opportunity.Network__c', None), (u'Opportunity.NextStep', None), (u'Opportunity.of_Members__c', None), (u'Opportunity.Office_Visit__c', None), (u'Opportunity.Optional_Benefits__c', None), (u'Opportunity.Original_Carrier_ID__c', None), (u'Opportunity.Original_Last_Modified_By__c', None), (u'Opportunity.Original_Last_Modified_Date__c', None), (u'Opportunity.Original_Lead__c', None), (u'Opportunity.Original_Object_ID__c', None), (u'Opportunity.Original_Owner_ID__c', None), (u'Opportunity.Out_of_Force_Date__c', None), (u'Opportunity.Page_Name__c', None), (u'Opportunity.Payment_Mode__c', None), (u'Opportunity.Plan_ID_Look_Up__c', None), (u'Opportunity.Plan_Name__c', None), (u'Opportunity.Plan_Notes__c', None), (u'Opportunity.Plan_Selected__c', None), (u'Opportunity.Plan_Selected_Hybrid__c', None), (u'Opportunity.Plan_Type__c', None), (u'Opportunity.Policy_Holder__c', None), (u'Opportunity.Probability', None), (u'Opportunity.Producer__c', None), (u'Opportunity.Producer_Commission__c', None), (u'Opportunity.Product_ID_Lookup__c', None), (u'Opportunity.Reason_Lost__c', None), (u'Opportunity.Rx_Coverage__c', None), (u'Opportunity.Selected_Carrier__c', None), (u'Opportunity.Subsidy_Amount__c', None), (u'Opportunity.Target_Annualized_Premium__c', None), (u'Opportunity.Total_Policy_Premium__c', None), (u'Opportunity.TotalOpportunityQuantity', None), (u'Opportunity.Type', None), (u'Opportunity.Underwriting_Status__c', None), (u'OpportunityLineItem.Description', None), (u'OpportunityLineItem.Discount', None), (u'OpportunityLineItem.ListPrice', None), (u'OpportunityLineItem.ProductCode', None), (u'OpportunityLineItem.ServiceDate', None), (u'OpportunityLineItem.Subtotal', None), (u'OpportunityLineItem.TotalPrice', None), (u'Payment_History__c.Account_Name__c', None), (u'Payment_History__c.Account_Number__c', None), (u'Payment_History__c.AuthorizeNetTransactionId__c', None), (u'Payment_History__c.authResponse__c', None), (u'Payment_History__c.Bank_Account_Type__c', None), (u'Payment_History__c.Bank_Name__c', None), (u'Payment_History__c.Bank_Routing_Number__c', None), (u'Payment_History__c.Check_Number__c', None), (u'Payment_History__c.cloneComments__c', None), (u'Payment_History__c.Cloned_From__c', None), (u'Payment_History__c.Comments__c', None), (u'Payment_History__c.Final_Payment__c', None), (u'Payment_History__c.id_in_Connectria__c', None), (u'Payment_History__c.Imported__c', None), (u'Payment_History__c.Imported_Source_Point__c', None), (u'Payment_History__c.isCloned__c', None), (u'Payment_History__c.IsETLUpdate__c', None), (u'Payment_History__c.isVIPAccount__c', None), (u'Payment_History__c.Last_4_Digits_of_Credit_Card__c', None), (u'Payment_History__c.Payment_Action__c', None), (u'Payment_History__c.Payment_Amount__c', None), (u'Payment_History__c.Payment_Made_On__c', None), (u'Payment_History__c.Payment_Specification__c', None), (u'Payment_History__c.Payment_Type__c', None), (u'Payment_History__c.Plans__c', None), (u'Payment_History__c.uhh_update_at__c', None), (u'Payment_History__c.uhhApi_PaymentId__c', None), (u'Payment_History__c.uid__c', None), (u'Person_Payment__c.Imported__c', None), (u'Person_Payment__c.Imported_Source_Point__c', None), (u'Person_Payment__c.IsETLUpdate__c', None), (u'Person_Payment__c.uhh_update_at__c', None), (u'Person_Payment__c.uhhApi_paymentsId__c', None), (u'Person_Payment__c.uhhApi_perPaymentId__c', None), (u'Person_Payment__c.uhhApi_personId__c', None), (u'Policy__c.Active_Date__c', None), (u'Policy__c.Agency_Commission__c', None), (u'Policy__c.Application_Completed_Date__c', None), (u'Policy__c.Application_Started__c', None), (u'Policy__c.Billing_Type__c', None), (u'Policy__c.Carrier_Policy_ID__c', None), (u'Policy__c.cloneComments__c', None), (u'Policy__c.Cloned_From__c', None), (u'Policy__c.Co_Insurance__c', None), (u'Policy__c.Commission_Paydate__c', None), (u'Policy__c.Deductible_Family__c', None), (u'Policy__c.Deductible_Member__c', None), (u'Policy__c.Description__c', None), (u'Policy__c.Effective_Date__c', None), (u'Policy__c.Exchange_Details__c', None), (u'Policy__c.Expiration_Date__c', None), (u'Policy__c.First_Written__c', None), (u'Policy__c.Insured_Entity_Legal_Name__c', None), (u'Policy__c.isCloned__c', None), (u'Policy__c.isVIPAccount__c', None), (u'Policy__c.Limit__c', None), (u'Policy__c.Max_OOP__c', None), (u'Policy__c.Max_Out_of_Pocket_Family__c', None), (u'Policy__c.Max_Out_of_Pocket_Member__c', None), (u'Policy__c.Migrated__c', None), (u'Policy__c.Monthly_Premium__c', None), (u'Policy__c.of_Members__c', None), (u'Policy__c.Office_Visit__c', None), (u'Policy__c.Original_Created_Date__c', None), (u'Policy__c.Original_Object_ID__c', None), (u'Policy__c.Out_of_Force_Date__c', None), (u'Policy__c.Payment_Policy__c', None), (u'Policy__c.Plan_Selected__c', None), (u'Policy__c.Plan_Type__c', None), (u'Policy__c.Policy_Held_with_Other_Agency__c', None), (u'Policy__c.Policy_Holder__c', None), (u'Policy__c.Policy_Holder_Name__c', None), (u'Policy__c.Policy_Type__c', None), (u'Policy__c.Premium__c', None), (u'Policy__c.Prior_Policy__c', None), (u'Policy__c.Producer__c', None), (u'Policy__c.Producer_Commission__c', None), (u'Policy__c.Related_Opportunity__c', None), (u'Policy__c.Renewed__c', None), (u'Policy__c.Rx_Coverage__c', None), (u'Policy__c.Status__c', None), (u'Policy__c.Subsidy_Amount__c', None), (u'Policy__c.Total_Policy_Premium__c', None), (u'Product2.Benefit_Package__c', None), (u'Product2.Benefit_Plan_Name__c', None), (u'Product2.Benefit_Type__c', None), (u'Product2.Co_Insurance__c', None), (u'Product2.Cost_Share__c', None), (u'Product2.Deductible__c', None), (u'Product2.Deductible_Family__c', None), (u'Product2.Description', None), (u'Product2.EOC_Document_ID__c', None), (u'Product2.Exchange_Details__c', None), (u'Product2.Family', None), (u'Product2.Formulary_ID__c', None), (u'Product2.Full_ID__c', None), (u'Product2.Max_Out_of_Pocket_Family__c', None), (u'Product2.Max_Out_Of_Pocket_Member__c', None), (u'Product2.Milliman_Benefit_Design__c', None), (u'Product2.Office_Visit__c', None), (u'Product2.Plan_Details__c', None), (u'Product2.Plan_ID__c', None), (u'Product2.Plan_Type__c', None), (u'Product2.Product_ID__c', None), (u'Product2.ProductCode', None), (u'Product2.Rx_Coverage__c', None), (u'Product2.Schedule_Document_ID__c', None), (u'Product2.Service_Area_ID__c', None), (u'Product2.Tier_1_Network_ID__c', None), (u'Product2.Tier_2_Network_ID__c', None), (u'Quote.Account', None), (u'Quote.AdditionalAddress', None), (u'Quote.AdditionalName', None), (u'Quote.BillingAddress', None), (u'Quote.BillingName', None), (u'Quote.Contact', None), (u'Quote.Contract', None), (u'Quote.Description', None), (u'Quote.Discount', None), (u'Quote.Email', None), (u'Quote.ExpirationDate', None), (u'Quote.Fax', None), (u'Quote.GrandTotal', None), (u'Quote.Original_Lead__c', None), (u'Quote.Phone', None), (u'Quote.QuoteToAddress', None), (u'Quote.QuoteToName', None), (u'Quote.ShippingAddress', None), (u'Quote.ShippingHandling', None), (u'Quote.ShippingName', None), (u'Quote.Status', None), (u'Quote.Subtotal', None), (u'Quote.Tax', None), (u'Quote.TotalPrice', None), (u'QuoteLineItem.Description', None), (u'QuoteLineItem.Discount', None), (u'QuoteLineItem.ListPrice', None), (u'QuoteLineItem.ProductCode', None), (u'QuoteLineItem.ServiceDate', None), (u'QuoteLineItem.Subtotal', None), (u'QuoteLineItem.TotalPrice', None), (u'Record_Audit__c.AccessReasonDetail__c', None), (u'Record_Audit__c.AccessReasonType__c', None), (u'Record_Audit__c.AccessType__c', None), (u'Record_Audit__c.Account__c', None), (u'Record_Audit__c.AuthorizedRepresentative__c', None), (u'Record_Audit__c.Lead__c', None), (u'Record_Audit__c.ParentRecordId__c', None), (u'Record_Audit__c.ParentRecordName__c', None), (u'Record_Audit__c.User__c', None), (u'Solution.IsPublished', None), (u'Solution.IsPublishedInPublicKb', None), (u'Solution.SolutionNote', None), (u'Survey__c.Approved__c', None), (u'Survey__c.Closing_Message__c', None), (u'Survey__c.End_Date__c', None), (u'Survey__c.FirstHeader__c', None), (u'Survey__c.HalfwayText__c', None), (u'Survey__c.Language__c', None), (u'Survey__c.Published__c', None), (u'Survey__c.SecondHeader__c', None), (u'Survey__c.Start_Date__c', None), (u'Survey__c.Start_Message__c', None), (u'Survey__c.Title__c', None), (u'Survey_Choices__c.Choice_Description__c', None), (u'Survey_Choices__c.Choice_Label__c', None), (u'Survey_Choices__c.Choice_Number__c', None), (u'Survey_Choices__c.Choice_Value__c', None), (u'Survey_Choices__c.Survey_Question__c', None), (u'Survey_Members__c.Current_Step__c', None), (u'Survey_Members__c.Member__c', None), (u'Survey_Members__c.Opened_Date__c', None), (u'Survey_Members__c.Skipped_Questions__c', None), (u'Survey_Members__c.Status__c', None), (u'Survey_Members__c.Submitted_Date__c', None), (u'Survey_Members__c.Survey__c', None), (u'Survey_Members__c.SurveyAndMemberId__c', None), (u'Survey_Response__c.Answer_Boolean__c', None), (u'Survey_Response__c.Answer_Choice_Ids__c', None), (u'Survey_Response__c.Answer_Numeric__c', None), (u'Survey_Response__c.Answer_Text__c', None), (u'Survey_Response__c.BMI__c', None), (u'Survey_Response__c.frequencyPeriod__c', None), (u'Survey_Response__c.GenderPreference__c', None), (u'Survey_Response__c.heightFT__c', None), (u'Survey_Response__c.heightIN__c', None), (u'Survey_Response__c.Spoken_Language__c', None), (u'Survey_Response__c.Survey_Member__c', None), (u'Survey_Response__c.Survey_Question__c', None), (u'Survey_Response__c.WeightILBS__c', None), (u'Survey_Response__c.zipcode__c', None), (u'SurveyQuestions__c.Active__c', None), (u'SurveyQuestions__c.Answer_Required__c', None), (u'SurveyQuestions__c.Applicable_Gender__c', None), (u'SurveyQuestions__c.Bottom_Graphic_File_Name__c', None), (u'SurveyQuestions__c.Category__c', None), (u'SurveyQuestions__c.Maximum_Age__c', None), (u'SurveyQuestions__c.Minimum_Age__c', None), (u'SurveyQuestions__c.Parent_Question__c', None), (u'SurveyQuestions__c.Question_Description__c', None), (u'SurveyQuestions__c.Question_Number__c', None), (u'SurveyQuestions__c.Question_Type__c', None), (u'SurveyQuestions__c.Secondline__c', None), (u'SurveyQuestions__c.showSubquestions__c', None), (u'SurveyQuestions__c.SideGraphicFileName__c', None), (u'SurveyQuestions__c.SideGraphicTitle__c', None), (u'SurveyQuestions__c.SubquestionLinkText__c', None), (u'SurveyQuestions__c.Survey__c', None), (u'Task.Action__c', None), (u'Task.Activity_Type__c', None), (u'Task.ActivityDate', None), (u'Task.Asthma_affecting_work_school_home_etc__c', None), (u'Task.Asthma_symptoms_wake_you__c', None), (u'Task.Auto_Generated__c', None), (u'Task.Call_Answered_Time__c', None), (u'Task.Call_Hangup_Time__c', None), (u'Task.Call_Notes__c', None), (u'Task.Channel_Name__c', None), (u'Task.cloneComments__c', None), (u'Task.Cloned_From__c', None), (u'Task.Current_Carrier__c', None), (u'Task.Date_Interest_Expressed__c', None), (u'Task.Description', None), (u'Task.How_often__c', None), (u'Task.How_often_used_rescue_inhaler_or_meds__c', None), (u'Task.isCloned__c', None), (u'Task.isVIPAccount__c', None), (u'Task.IsVisibleInSelfService', None), (u'Task.Migrated__c', None), (u'Task.Original_Object_ID__c', None), (u'Task.Original_Owner_Name__c', None), (u'Task.Program_Contact_Type__c', None), (u'Task.Queue_Name__c', None), (u'Task.Rate_for_asthma_control_in_past_4_weeks__c', None), (u'Task.Review_and_update_demographic_info__c', None), (u'Task.Review_and_update_practitioner_info__c', None), (u'Task.transactionid__c', None), (u'Task.Type', None), (u'Task.What', None), (u'Task.Who', None), (u'Task.X8x8_Log__c', None), (u'User.DefaultLeadOwner__c', None), (u'User.LeadAssignmentAgentStatus__c', None), (u'User.LeadLastAssignedOn__c', None), (u'User.mkto_si__IsCachingAnonWebActivityList__c', None), (u'User.mkto_si__IsCachingBestBets__c', None), (u'User.mkto_si__IsCachingEmailActivityList__c', None), (u'User.mkto_si__IsCachingGroupedWebActivityList__c', None), (u'User.mkto_si__IsCachingInterestingMomentsList__c', None), (u'User.mkto_si__IsCachingScoringList__c', None), (u'User.mkto_si__IsCachingStreamList__c', None), (u'User.mkto_si__IsCachingWatchList__c', None), (u'User.mkto_si__IsCachingWebActivityList__c', None), (u'User.mkto_si__Sales_Insight_Counter__c', None), (u'User.Original_Object_ID__c', None), (u'WorkGoal.CompletionDate', None), (u'WorkGoal.IsKeyCompanyGoal', None)]) # Field name made lowercase.
    permissionsedit = models.BooleanField(verbose_name=u'Edit Field', db_column=u'PermissionsEdit') # Field name made lowercase.
    permissionsread = models.BooleanField(verbose_name=u'Read Field', db_column=u'PermissionsRead') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'FieldPermissions'
        verbose_name = 'Field Permissions'
        verbose_name_plural = 'Field Permissions'
        # keyPrefix = '01k'

class Fiscalyearsettings(models.Model):
    periodid = models.ForeignKey('Period', null=True, db_column=u'PeriodId', blank=True) # Field name made lowercase.
    startdate = models.DateField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Start Date', db_column=u'StartDate', blank=True) # Field name made lowercase.
    enddate = models.DateField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'End Date', db_column=u'EndDate', blank=True) # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'Name', sf_read_only=models.READ_ONLY, db_column=u'Name') # Field name made lowercase.
    isstandardyear = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Is Standard Year', db_column=u'IsStandardYear') # Field name made lowercase.
    yeartype = models.CharField(db_column=u'YearType', choices=[(u'Standard', None), (u'Custom', None), (u'Placeholder', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Year Type') # Field name made lowercase.
    quarterlabelscheme = models.CharField(db_column=u'QuarterLabelScheme', choices=[(u'NumberByYear', u'Numbered By Year'), (u'Custom', u'Custom Quarter Names')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Quarter Name Scheme') # Field name made lowercase.
    periodlabelscheme = models.CharField(db_column=u'PeriodLabelScheme', choices=[(u'NumberByYear', u'Numbered By Year'), (u'NumberByQuarter', u'Numbered By Quarter'), (u'StandardMonths', u'Standard Month Names'), (u'Custom', u'Custom Period Names')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Period Name Scheme') # Field name made lowercase.
    weeklabelscheme = models.CharField(db_column=u'WeekLabelScheme', choices=[(u'NumberByYear', u'Year'), (u'NumberByQuarter', u'Quarter'), (u'NumberByPeriod', u'Period')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Week Name Scheme') # Field name made lowercase.
    quarterprefix = models.CharField(db_column=u'QuarterPrefix', choices=[(u'Quarter', u'Quarter'), (u'FQ', u'FQ'), (u'Q', u'Q'), (u'Trimester', u'Trimester')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Quarter Prefix') # Field name made lowercase.
    periodprefix = models.CharField(db_column=u'PeriodPrefix', choices=[(u'Period', u'Period'), (u'FP', u'FP'), (u'P', u'P'), (u'Month', u'Month')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Period Prefix') # Field name made lowercase.
    weekstartday = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Week Start Day', db_column=u'WeekStartDay', blank=True) # Field name made lowercase.
    description = models.CharField(max_length=255, verbose_name=u'Description', sf_read_only=models.READ_ONLY, db_column=u'Description', blank=True) # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'FiscalYearSettings'
        verbose_name = 'Fiscal Year Settings'
        verbose_name_plural = 'Fiscal Year Settings'
        # keyPrefix = '022'

class Folder(models.Model):
    name = models.CharField(max_length=40, verbose_name=u'Name', db_column=u'Name') # Field name made lowercase.
    developername = models.CharField(max_length=80, verbose_name=u'Folder Unique Name', db_column=u'DeveloperName', blank=True) # Field name made lowercase.
    accesstype = models.CharField(max_length=40, verbose_name=u'Access Type', db_column=u'AccessType', choices=[(u'Shared', u'Shared'), (u'Public', u'Public'), (u'Hidden', u'Hidden'), (u'PublicInternal', u'Public Internal')]) # Field name made lowercase.
    isreadonly = models.BooleanField(verbose_name=u'Read Only', db_column=u'IsReadonly') # Field name made lowercase.
    type = models.CharField(max_length=40, verbose_name=u'Type', sf_read_only=models.NOT_UPDATEABLE, db_column=u'Type', choices=[(u'Document', u'Document'), (u'Email', u'Email Template'), (u'Report', u'Report'), (u'Dashboard', u'Dashboard')]) # Field name made lowercase.
    namespaceprefix = models.CharField(max_length=15, verbose_name=u'Namespace Prefix', sf_read_only=models.READ_ONLY, db_column=u'NamespacePrefix', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Folder'
        verbose_name = 'Folder'
        verbose_name_plural = 'Folders'
        # keyPrefix = '00l'

class FollowupHistory(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    parentid = models.ForeignKey('FollowupC', db_column=u'ParentId') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    field = models.CharField(max_length=255, verbose_name=u'Changed Field', sf_read_only=models.READ_ONLY, db_column=u'Field', choices=[(u'CaseNumber__c', None), (u'created', u'Created.'), (u'Description__c', None), (u'feedEvent', u'Feed event'), (u'MediaType__c', None), (u'Name', None), (u'ownerAccepted', u'Owner (Accepted)'), (u'ownerAssignment', u'Owner (Assignment)'), (u'locked', u'Record locked.'), (u'unlocked', u'Record unlocked.')]) # Field name made lowercase.
    oldvalue = models.CharField(max_length=255, verbose_name=u'Old Value', sf_read_only=models.READ_ONLY, db_column=u'OldValue', blank=True) # Field name made lowercase.
    newvalue = models.CharField(max_length=255, verbose_name=u'New Value', sf_read_only=models.READ_ONLY, db_column=u'NewValue', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'FollowUp__History'
        verbose_name = 'History: FollowUp'
        verbose_name_plural = 'History: FollowUp'
        # keyPrefix = 'None'

class FollowupC(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'Subject', db_column=u'Name', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    lastactivitydate = models.DateField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Activity Date', db_column=u'LastActivityDate', blank=True) # Field name made lowercase.
    casenumber__c = models.ForeignKey('Case', db_column=u'CaseNumber__c') # Field name made lowercase.
    description__c = models.TextField(verbose_name=u'Description', db_column=u'Description__c', blank=True) # Field name made lowercase.
    mediatype__c = models.CharField(blank=True, max_length=255, verbose_name=u'MediaType', db_column=u'MediaType__c', choices=[(u'Chat', u'Chat'), (u'Email', u'Email'), (u'Phone', u'Phone'), (u'V-mail', u'V-mail')]) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'FollowUp__c'
        verbose_name = 'FollowUp'
        verbose_name_plural = 'FollowUps'
        # keyPrefix = 'a04'

class Forecastshare(models.Model):
    userroleid = models.ForeignKey('Userrole', db_column=u'UserRoleId') # Field name made lowercase.
    userorgroupid = models.ForeignKey('Group', db_column=u'UserOrGroupId') # Field name made lowercase.
    accesslevel = models.CharField(max_length=40, verbose_name=u'Forecast Access', sf_read_only=models.READ_ONLY, db_column=u'AccessLevel', choices=[(u'Read', u'Read Only'), (u'Edit', u'Read/Write'), (u'All', u'Owner')]) # Field name made lowercase.
    cansubmit = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Submit Allowed', db_column=u'CanSubmit') # Field name made lowercase.
    rowcause = models.CharField(max_length=40, verbose_name=u'Row Cause', sf_read_only=models.READ_ONLY, db_column=u'RowCause', choices=[(u'Owner', u'Owner'), (u'Manual', u'Manual Sharing'), (u'Rule', u'Sharing Rule'), (u'ImplicitChild', u'Account Sharing'), (u'ImplicitParent', u'Associated record owner or sharing'), (u'Team', u'Sales Team'), (u'Territory', u'Territory Assignment Rule'), (u'TerritoryManual', u'Territory Manual'), (u'TerritoryRule', u'Territory Sharing Rule')]) # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'ForecastShare'
        verbose_name = 'Forecast Share'
        verbose_name_plural = 'Forecast Share'
        # keyPrefix = '608'

class Forecastingadjustment(models.Model):
    forecastingitemid = models.ForeignKey('Forecastingitem', db_column=u'ForecastingItemId') # Field name made lowercase.
    periodid = models.ForeignKey('Period', null=True, db_column=u'PeriodId', blank=True) # Field name made lowercase.
    startdate = models.DateField(sf_read_only=models.NOT_UPDATEABLE, verbose_name=u'Period Start Date', db_column=u'StartDate') # Field name made lowercase.
    productfamily = models.CharField(db_column=u'ProductFamily', choices=[(u'Southern Simple', u'Southern Simple'), (u'Northern Simple', u'Northern Simple'), (u'Frontier Simple', u'Frontier Simple'), (u'Southern Star', u'Southern Star'), (u'Union Star', u'Union Star'), (u'Neighborhood', u'Neighborhood')], max_length=40, blank=True, sf_read_only=models.NOT_UPDATEABLE, verbose_name=u'Product Family') # Field name made lowercase.
    forecastcategoryname = models.CharField(max_length=40, verbose_name=u'Forecast Category', sf_read_only=models.NOT_UPDATEABLE, db_column=u'ForecastCategoryName', choices=[(u'Omitted', u'Omitted'), (u'Pipeline', u'Pipeline'), (u'Best Case', u'Best Case'), (u'Commit', u'Commit'), (u'Closed', u'Closed')]) # Field name made lowercase.
    adjustedamount = models.DecimalField(decimal_places=0, verbose_name=u'Adjusted Amount', max_digits=18, db_column=u'AdjustedAmount') # Field name made lowercase.
    adjustedquantity = models.DecimalField(decimal_places=2, verbose_name=u'Adjusted Quantity', max_digits=12, db_column=u'AdjustedQuantity') # Field name made lowercase.
    ownerid = models.ForeignKey('User', db_column=u'OwnerId') # Field name made lowercase.
    isquantity = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Is Quantity', db_column=u'IsQuantity') # Field name made lowercase.
    isamount = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Is Amount', db_column=u'IsAmount') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    forecastingtypeid = models.ForeignKey('Forecastingtype', db_column=u'ForecastingTypeId') # Field name made lowercase.
    adjustmentnote = models.TextField(verbose_name=u'Adjustment Note', db_column=u'AdjustmentNote', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'ForecastingAdjustment'
        verbose_name = 'Forecasting Adjustment'
        verbose_name_plural = 'Forecasting Adjustments'
        # keyPrefix = '0G7'

class Forecastingfact(models.Model):
    ownerid = models.ForeignKey('User', db_column=u'OwnerId') # Field name made lowercase.
    periodid = models.ForeignKey('Period', null=True, db_column=u'PeriodId', blank=True) # Field name made lowercase.
    forecastcategoryname = models.CharField(max_length=40, verbose_name=u'Forecast Category', sf_read_only=models.READ_ONLY, db_column=u'ForecastCategoryName', choices=[(u'Omitted', u'Omitted'), (u'Pipeline', u'Pipeline'), (u'Best Case', u'Best Case'), (u'Commit', u'Commit'), (u'Closed', u'Closed')]) # Field name made lowercase.
    opportunityid = models.ForeignKey('Opportunity', db_column=u'OpportunityId') # Field name made lowercase.
    forecastedobjectid = models.ForeignKey('Opportunitylineitem', null=True, db_column=u'ForecastedObjectId', blank=True) # Field name made lowercase.
    forecastingitemid = models.ForeignKey('Forecastingitem', null=True, db_column=u'ForecastingItemId', blank=True) # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    forecastingtypeid = models.ForeignKey('Forecastingtype', null=True, db_column=u'ForecastingTypeId', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'ForecastingFact'
        verbose_name = 'Forecasting Fact'
        verbose_name_plural = 'Forecasting Facts'
        # keyPrefix = '0G6'

class Forecastingitem(models.Model):
    ownerid = models.ForeignKey('User', db_column=u'OwnerId') # Field name made lowercase.
    periodid = models.ForeignKey('Period', null=True, db_column=u'PeriodId', blank=True) # Field name made lowercase.
    forecastcategoryname = models.CharField(max_length=40, verbose_name=u'Forecast Category', sf_read_only=models.READ_ONLY, db_column=u'ForecastCategoryName', choices=[(u'Omitted', u'Omitted'), (u'Pipeline', u'Pipeline'), (u'Best Case', u'Best Case'), (u'Commit', u'Commit'), (u'Closed', u'Closed')]) # Field name made lowercase.
    parentforecastingitemid = models.ForeignKey('self', null=True, db_column=u'ParentForecastingItemId', blank=True) # Field name made lowercase.
    productfamily = models.CharField(db_column=u'ProductFamily', choices=[(u'Southern Simple', u'Southern Simple'), (u'Northern Simple', u'Northern Simple'), (u'Frontier Simple', u'Frontier Simple'), (u'Southern Star', u'Southern Star'), (u'Union Star', u'Union Star'), (u'Neighborhood', u'Neighborhood')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Product Family') # Field name made lowercase.
    owneronlyamount = models.DecimalField(decimal_places=0, db_column=u'OwnerOnlyAmount', sf_read_only=models.READ_ONLY, max_digits=18, blank=True, null=True, verbose_name=u'Owner Only Amount') # Field name made lowercase.
    amountwithoutadjustments = models.DecimalField(decimal_places=0, db_column=u'AmountWithoutAdjustments', sf_read_only=models.READ_ONLY, max_digits=18, blank=True, null=True, verbose_name=u'Amount Without Adjustments') # Field name made lowercase.
    amountwithoutmanageradjustment = models.DecimalField(decimal_places=0, db_column=u'AmountWithoutManagerAdjustment', sf_read_only=models.READ_ONLY, max_digits=18, blank=True, null=True, verbose_name=u'Amount Without Manager Adjustment') # Field name made lowercase.
    forecastamount = models.DecimalField(decimal_places=0, db_column=u'ForecastAmount', sf_read_only=models.READ_ONLY, max_digits=18, blank=True, null=True, verbose_name=u'Forecast Amount') # Field name made lowercase.
    owneronlyquantity = models.DecimalField(decimal_places=2, db_column=u'OwnerOnlyQuantity', sf_read_only=models.READ_ONLY, max_digits=12, blank=True, null=True, verbose_name=u'Owner Only Quantity') # Field name made lowercase.
    quantitywithoutadjustments = models.DecimalField(decimal_places=2, db_column=u'QuantityWithoutAdjustments', sf_read_only=models.READ_ONLY, max_digits=12, blank=True, null=True, verbose_name=u'Quantity Without Adjustments') # Field name made lowercase.
    quantitywithoutmanageradjustment = models.DecimalField(decimal_places=2, db_column=u'QuantityWithoutManagerAdjustment', sf_read_only=models.READ_ONLY, max_digits=12, blank=True, null=True, verbose_name=u'Quantity Without Manager Adjustment') # Field name made lowercase.
    forecastquantity = models.DecimalField(decimal_places=2, db_column=u'ForecastQuantity', sf_read_only=models.READ_ONLY, max_digits=12, blank=True, null=True, verbose_name=u'Forecast Quantity') # Field name made lowercase.
    isquantity = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Is Quantity', db_column=u'IsQuantity') # Field name made lowercase.
    isamount = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Is Amount', db_column=u'IsAmount') # Field name made lowercase.
    hasadjustment = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Has Adjustment', db_column=u'HasAdjustment') # Field name made lowercase.
    isuptodate = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Is up to date', db_column=u'IsUpToDate') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    forecastingtypeid = models.ForeignKey('Forecastingtype', db_column=u'ForecastingTypeId') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'ForecastingItem'
        verbose_name = 'Forecasting Item'
        verbose_name_plural = 'Forecasting Items'
        # keyPrefix = '0G3'

class Forecastingquota(models.Model):
    periodid = models.ForeignKey('Period', null=True, db_column=u'PeriodId', blank=True) # Field name made lowercase.
    startdate = models.DateField(verbose_name=u'Quota Month', db_column=u'StartDate') # Field name made lowercase.
    productfamily = models.CharField(blank=True, max_length=40, verbose_name=u'Product Family', db_column=u'ProductFamily', choices=[(u'Southern Simple', u'Southern Simple'), (u'Northern Simple', u'Northern Simple'), (u'Frontier Simple', u'Frontier Simple'), (u'Southern Star', u'Southern Star'), (u'Union Star', u'Union Star'), (u'Neighborhood', u'Neighborhood')]) # Field name made lowercase.
    quotaamount = models.DecimalField(decimal_places=0, verbose_name=u'Quota Amount', max_digits=18, db_column=u'QuotaAmount') # Field name made lowercase.
    quotaquantity = models.DecimalField(decimal_places=2, verbose_name=u'Quota Quantity', max_digits=12, db_column=u'QuotaQuantity') # Field name made lowercase.
    quotaownerid = models.ForeignKey('User', db_column=u'QuotaOwnerId') # Field name made lowercase.
    isquantity = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Is Quantity', db_column=u'IsQuantity') # Field name made lowercase.
    isamount = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Is Amount', db_column=u'IsAmount') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    forecastingtypeid = models.ForeignKey('Forecastingtype', db_column=u'ForecastingTypeId') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'ForecastingQuota'
        verbose_name = 'Forecasting Quota'
        verbose_name_plural = 'Forecasting Quotas'
        # keyPrefix = '0J9'

class Forecastingtype(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    developername = models.CharField(max_length=80, verbose_name=u'API Name', sf_read_only=models.READ_ONLY, db_column=u'DeveloperName') # Field name made lowercase.
    language = models.CharField(max_length=40, verbose_name=u'Master Language', sf_read_only=models.READ_ONLY, db_column=u'Language', choices=[(u'en_US', u'English'), (u'de', u'German'), (u'es', u'Spanish'), (u'fr', u'French'), (u'it', u'Italian'), (u'ja', u'Japanese'), (u'sv', u'Swedish'), (u'ko', u'Korean'), (u'zh_TW', u'Chinese (Traditional)'), (u'zh_CN', u'Chinese (Simplified)'), (u'pt_BR', u'Portuguese (Brazilian)'), (u'nl_NL', u'Dutch'), (u'da', u'Danish'), (u'th', u'Thai'), (u'fi', u'Finnish'), (u'ru', u'Russian'), (u'es_MX', u'Spanish (Mexican)'), (u'no', u'Norwegian')]) # Field name made lowercase.
    masterlabel = models.CharField(max_length=80, verbose_name=u'Label', sf_read_only=models.READ_ONLY, db_column=u'MasterLabel') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    isactive = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Is Active', db_column=u'IsActive') # Field name made lowercase.
    isquantity = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Is Quantity', db_column=u'IsQuantity') # Field name made lowercase.
    isamount = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Is Amount', db_column=u'IsAmount') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'ForecastingType'
        verbose_name = 'Forecasting Type'
        verbose_name_plural = 'Forecasting Types'
        # keyPrefix = '0Db'

class Group(models.Model):
    name = models.CharField(max_length=40, verbose_name=u'Name', db_column=u'Name') # Field name made lowercase.
    developername = models.CharField(max_length=80, verbose_name=u'Developer Name', db_column=u'DeveloperName', blank=True) # Field name made lowercase.
    relatedid = models.ForeignKey('User', null=True, db_column=u'RelatedId', blank=True) # Field name made lowercase.
    type = models.CharField(max_length=40, verbose_name=u'Type', sf_read_only=models.NOT_UPDATEABLE, db_column=u'Type', choices=[(u'AllCustomerPortal', None), (u'CollaborationGroup', None), (u'Manager', None), (u'ManagerAndSubordinatesInternal', None), (u'Organization', None), (u'PRMOrganization', None), (u'Queue', None), (u'Regular', None), (u'Role', None), (u'RoleAndSubordinates', None), (u'RoleAndSubordinatesInternal', None), (u'SharingRuleGroup', None), (u'Territory', None), (u'TerritoryAndSubordinates', None)]) # Field name made lowercase.
    email = models.EmailField(null=True, verbose_name=u'Email', db_column=u'Email', blank=True) # Field name made lowercase.
    ownerid = models.ForeignKey('Organization', db_column=u'OwnerId') # Field name made lowercase.
    doessendemailtomembers = models.BooleanField(verbose_name=u'Send Email to Members', db_column=u'DoesSendEmailToMembers') # Field name made lowercase.
    doesincludebosses = models.BooleanField(verbose_name=u'Include Bosses', db_column=u'DoesIncludeBosses') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Group'
        verbose_name = 'Group'
        verbose_name_plural = 'Group'
        # keyPrefix = '00G'

class Groupmember(models.Model):
    groupid = models.ForeignKey('Group', db_column=u'GroupId') # Field name made lowercase.
    userorgroupid = models.ForeignKey('Group', db_column=u'UserOrGroupId') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'GroupMember'
        verbose_name = 'Group Member'
        verbose_name_plural = 'Group Member'
        # keyPrefix = '011'

class GroupMemberDependentC(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'Dependent First Name', db_column=u'Name', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    group_member__c = models.ForeignKey('GroupMemberC', db_column=u'Group_Member__c') # Field name made lowercase.
    date_of_birth__c = models.DateField(null=True, verbose_name=u'Date of Birth', db_column=u'Date_of_Birth__c', blank=True) # Field name made lowercase.
    gender__c = models.CharField(blank=True, max_length=255, verbose_name=u'Gender', db_column=u'Gender__c', choices=[(u'Female', u'Female'), (u'Male', u'Male')]) # Field name made lowercase.
    dependent_last_name__c = models.CharField(max_length=45, verbose_name=u'Dependent Last Name', db_column=u'Dependent_Last_Name__c', blank=True) # Field name made lowercase.
    relationship_to_primary__c = models.CharField(blank=True, max_length=255, verbose_name=u'Relationship To Primary', db_column=u'Relationship_To_Primary__c', choices=[(u'Spouse/Domestic Partner', u'Spouse/Domestic Partner'), (u'Dependent', u'Dependent')]) # Field name made lowercase.
    tobacco__c = models.BooleanField(verbose_name=u'Tobacco', db_column=u'Tobacco__c') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Group_Member_Dependent__c'
        verbose_name = 'Group Member Dependent'
        verbose_name_plural = 'Group Member Dependents'
        # keyPrefix = 'a06'

class GroupMemberC(models.Model):
    ownerid = models.ForeignKey('Group', db_column=u'OwnerId') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'Group Member Name', db_column=u'Name', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    lastactivitydate = models.DateField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Activity Date', db_column=u'LastActivityDate', blank=True) # Field name made lowercase.
    date_of_birth__c = models.DateField(null=True, verbose_name=u'Date of Birth', db_column=u'Date_of_Birth__c', blank=True) # Field name made lowercase.
    email__c = models.EmailField(null=True, verbose_name=u'Email', db_column=u'Email__c', blank=True) # Field name made lowercase.
    gender__c = models.CharField(blank=True, max_length=255, verbose_name=u'Gender', db_column=u'Gender__c', choices=[(u'Female', u'Female'), (u'Male', u'Male')]) # Field name made lowercase.
    group_lead__c = models.ForeignKey('Lead', null=True, db_column=u'Group_Lead__c', blank=True) # Field name made lowercase.
    hire_date__c = models.DateField(null=True, verbose_name=u'Hire Date', db_column=u'Hire_Date__c', blank=True) # Field name made lowercase.
    member_zip_postal_code__c = models.CharField(max_length=15, verbose_name=u'Member Zip/Postal Code', db_column=u'Member_Zip_Postal_Code__c', blank=True) # Field name made lowercase.
    tobacco__c = models.BooleanField(verbose_name=u'Tobacco', db_column=u'Tobacco__c') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Group_Member__c'
        verbose_name = 'Group Member'
        verbose_name_plural = 'Group Members'
        # keyPrefix = 'a02'

class GroupQuoteHistory(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    parentid = models.ForeignKey('GroupQuoteC', db_column=u'ParentId') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    field = models.CharField(max_length=255, verbose_name=u'Changed Field', sf_read_only=models.READ_ONLY, db_column=u'Field', choices=[(u'created', u'Created.'), (u'feedEvent', u'Feed event'), (u'Name', None), (u'Owner', None), (u'ownerAccepted', u'Owner (Accepted)'), (u'ownerAssignment', u'Owner (Assignment)'), (u'locked', u'Record locked.'), (u'unlocked', u'Record unlocked.')]) # Field name made lowercase.
    oldvalue = models.CharField(max_length=255, verbose_name=u'Old Value', sf_read_only=models.READ_ONLY, db_column=u'OldValue', blank=True) # Field name made lowercase.
    newvalue = models.CharField(max_length=255, verbose_name=u'New Value', sf_read_only=models.READ_ONLY, db_column=u'NewValue', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Group_Quote__History'
        verbose_name = 'History: Group Quote'
        verbose_name_plural = 'History: Group Quote'
        # keyPrefix = 'None'

class GroupQuoteC(models.Model):
    ownerid = models.ForeignKey('Group', db_column=u'OwnerId') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'Group Quote Name', db_column=u'Name', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    lastactivitydate = models.DateField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Activity Date', db_column=u'LastActivityDate', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Group_Quote__c'
        verbose_name = 'Group Quote'
        verbose_name_plural = 'Group Quotes'
        # keyPrefix = 'a03'

class HipaabypasssettingsC(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'Name', db_column=u'Name', blank=True) # Field name made lowercase.
    setupownerid = models.ForeignKey('Organization', null=True, db_column=u'SetupOwnerId', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    bypasshipaasecurityquestions__c = models.BooleanField(help_text=u'Should the HIPAA security questions page be bypassed for a user or profile or org wide?', verbose_name=u'Bypass HIPAA Security Questions', db_column=u'BypassHIPAASecurityQuestions__c') # Field name made lowercase.
    bypassreasondetail__c = models.TextField(help_text=u'What is the purpose of bypassing the HIPAA security questions for user/profile/org wide?', verbose_name=u'Bypass Reason Detail', db_column=u'BypassReasonDetail__c') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'HIPAABypassSettings__c'
        verbose_name = 'HIPAA Bypass Settings'
        verbose_name_plural = 'HIPAA Bypass Settings'
        # keyPrefix = 'a0S'

class Hashtagdefinition(models.Model):
    networkid = models.ForeignKey('Network', null=True, db_column=u'NetworkId', blank=True) # Field name made lowercase.
    namenorm = models.CharField(max_length=765, verbose_name=u'Normalized Hashtag Text', sf_read_only=models.READ_ONLY, db_column=u'NameNorm', blank=True) # Field name made lowercase.
    name = models.CharField(max_length=765, verbose_name=u'Hashtag Text', sf_read_only=models.READ_ONLY, db_column=u'Name', blank=True) # Field name made lowercase.
    hashtagcount = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Hashtag Count', db_column=u'HashtagCount', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'HashtagDefinition'
        verbose_name = 'Hashtag Definition'
        verbose_name_plural = 'Hashtag Definitions'
        # keyPrefix = '0hd'

class HipaasecuritysettingsC(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=38, verbose_name=u'Name', db_column=u'Name') # Field name made lowercase.
    setupownerid = models.ForeignKey('Organization', null=True, db_column=u'SetupOwnerId', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    isprimary__c = models.BooleanField(help_text=u'Is this one of the primary questions? If unchecked, it is treated as a secondary question.', verbose_name=u'Is Primary', db_column=u'IsPrimary__c') # Field name made lowercase.
    isrequired__c = models.BooleanField(help_text=u'Is this security question required to be answered by all clients?', verbose_name=u'Is Required', db_column=u'IsRequired__c') # Field name made lowercase.
    parentrecord__c = models.CharField(help_text=u'What is the parent record being accessed that requires the security lock?', max_length=50, verbose_name=u'Parent Record', db_column=u'ParentRecord__c') # Field name made lowercase.
    question__c = models.CharField(help_text=u'Contains the security question to be asked by the agent when engaging the client.', max_length=255, verbose_name=u'Question', db_column=u'Question__c') # Field name made lowercase.
    relationshipfield__c = models.CharField(help_text=u'What is the name of the relationship field on the parent object?', max_length=255, verbose_name=u'Relationship Field', db_column=u'RelationshipField__c', blank=True) # Field name made lowercase.
    sortorder__c = models.DecimalField(db_column=u'SortOrder__c', decimal_places=0, max_digits=3, blank=True, help_text=u'What is the sequence for questions to appear on the security page?', null=True, verbose_name=u'Sort Order') # Field name made lowercase.
    sourcefield__c = models.CharField(help_text=u'What is the source field(s) that contain the answer to the corresponding security question?', max_length=255, verbose_name=u'Source Field', db_column=u'SourceField__c') # Field name made lowercase.
    sourceobject__c = models.CharField(help_text=u'What is the source object where the answer to the security question can be found?', max_length=50, verbose_name=u'Source Object', db_column=u'SourceObject__c') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'HipaaSecuritySettings__c'
        verbose_name = 'HIPAA Security Settings'
        verbose_name_plural = 'HIPAA Security Settings'
        # keyPrefix = 'a0T'

class Holiday(models.Model):
    name = models.CharField(max_length=80, verbose_name=u'Holiday Name', db_column=u'Name') # Field name made lowercase.
    description = models.CharField(max_length=100, verbose_name=u'Description', db_column=u'Description', blank=True) # Field name made lowercase.
    isallday = models.BooleanField(verbose_name=u'All Day', db_column=u'IsAllDay') # Field name made lowercase.
    activitydate = models.DateField(null=True, verbose_name=u'Holiday Date', db_column=u'ActivityDate', blank=True) # Field name made lowercase.
    starttimeinminutes = models.IntegerField(null=True, verbose_name=u'Start Time In Minutes From Midnight', db_column=u'StartTimeInMinutes', blank=True) # Field name made lowercase.
    endtimeinminutes = models.IntegerField(null=True, verbose_name=u'End Time In Minutes From Midnight', db_column=u'EndTimeInMinutes', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    isrecurrence = models.BooleanField(verbose_name=u'Recurring Holiday', db_column=u'IsRecurrence') # Field name made lowercase.
    recurrencestartdate = models.DateField(null=True, verbose_name=u'Start Date', db_column=u'RecurrenceStartDate', blank=True) # Field name made lowercase.
    recurrenceenddateonly = models.DateField(null=True, verbose_name=u'End Date', db_column=u'RecurrenceEndDateOnly', blank=True) # Field name made lowercase.
    recurrencetype = models.CharField(blank=True, max_length=40, verbose_name=u'Recurrence Type', db_column=u'RecurrenceType', choices=[(u'RecursDaily', u'Recurs Daily'), (u'RecursEveryWeekday', u'Recurs Every Weekday'), (u'RecursMonthly', u'Recurs Monthly'), (u'RecursMonthlyNth', u'Recurs Monthy Nth'), (u'RecursWeekly', u'Recurs Weekly'), (u'RecursYearly', u'Recurs Yearly'), (u'RecursYearlyNth', u'Recurs Yearly Nth')]) # Field name made lowercase.
    recurrenceinterval = models.IntegerField(null=True, verbose_name=u'Recurrence Interval', db_column=u'RecurrenceInterval', blank=True) # Field name made lowercase.
    recurrencedayofweekmask = models.IntegerField(null=True, verbose_name=u'Recurrence Day of Week Mask', db_column=u'RecurrenceDayOfWeekMask', blank=True) # Field name made lowercase.
    recurrencedayofmonth = models.IntegerField(null=True, verbose_name=u'Recurrence Day of Month', db_column=u'RecurrenceDayOfMonth', blank=True) # Field name made lowercase.
    recurrenceinstance = models.CharField(blank=True, max_length=40, verbose_name=u'Recurrence Instance', db_column=u'RecurrenceInstance', choices=[(u'First', u'1st'), (u'Second', u'2nd'), (u'Third', u'3rd'), (u'Fourth', u'4th'), (u'Last', u'last')]) # Field name made lowercase.
    recurrencemonthofyear = models.CharField(blank=True, max_length=40, verbose_name=u'Recurrence Month of Year', db_column=u'RecurrenceMonthOfYear', choices=[(u'January', u'January'), (u'February', u'February'), (u'March', u'March'), (u'April', u'April'), (u'May', u'May'), (u'June', u'June'), (u'July', u'July'), (u'August', u'August'), (u'September', u'September'), (u'October', u'October'), (u'November', u'November'), (u'December', u'December')]) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Holiday'
        verbose_name = 'Holiday'
        verbose_name_plural = 'Holidays'
        # keyPrefix = '0C0'

class Im834InC(models.Model):
    ownerid = models.ForeignKey('Group', db_column=u'OwnerId') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'SF834RecordID', sf_read_only=models.READ_ONLY, db_column=u'Name') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    oeisas01isa02authnfoovlnoauthnfo__c = models.CharField(max_length=255, verbose_name=u'OEISAS01ISA02AUTHNFOOVLNOAUTHNFO', db_column=u'OEISAS01ISA02AUTHNFOOVLNOAUTHNFO__c', blank=True) # Field name made lowercase.
    oeisas01isa04secnfoovlnosecnfo__c = models.CharField(max_length=255, verbose_name=u'OEISAS01ISA04SECNFOOVLNOSECNFO', db_column=u'OEISAS01ISA04SECNFOOVLNOSECNFO__c', blank=True) # Field name made lowercase.
    oeisas01isa06sendridovlmutlydefndid__c = models.CharField(max_length=255, verbose_name=u'OEISAS01ISA06SENDRIDOVLMUTLYDEFNDID', db_column=u'OEISAS01ISA06SENDRIDOVLMUTLYDEFNDID__c', blank=True) # Field name made lowercase.
    oeisas01isa08recvridovlmutlydefndid__c = models.CharField(max_length=255, verbose_name=u'OEISAS01ISA08RECVRIDOVLMUTLYDEFNDID', db_column=u'OEISAS01ISA08RECVRIDOVLMUTLYDEFNDID__c', blank=True) # Field name made lowercase.
    oeisas01isa09dt__c = models.CharField(max_length=255, verbose_name=u'OEISAS01ISA09DT', db_column=u'OEISAS01ISA09DT__c', blank=True) # Field name made lowercase.
    oeisas01isa10tm__c = models.CharField(max_length=255, verbose_name=u'OEISAS01ISA10TM', db_column=u'OEISAS01ISA10TM__c', blank=True) # Field name made lowercase.
    oeisas01isa11reptnseprtr__c = models.CharField(max_length=255, verbose_name=u'OEISAS01ISA11REPTNSEPRTR', db_column=u'OEISAS01ISA11REPTNSEPRTR__c', blank=True) # Field name made lowercase.
    oeisas01isa12versnnr__c = models.CharField(max_length=255, verbose_name=u'OEISAS01ISA12VERSNNR', db_column=u'OEISAS01ISA12VERSNNR__c', blank=True) # Field name made lowercase.
    oeisas01isa13icn__c = models.CharField(max_length=255, verbose_name=u'OEISAS01ISA13ICN', db_column=u'OEISAS01ISA13ICN__c', blank=True) # Field name made lowercase.
    oeisas01isa14ackreq__c = models.CharField(max_length=255, verbose_name=u'OEISAS01ISA14ACKREQ', db_column=u'OEISAS01ISA14ACKREQ__c', blank=True) # Field name made lowercase.
    oeisas01isa15usgind__c = models.CharField(max_length=255, verbose_name=u'OEISAS01ISA15USGIND', db_column=u'OEISAS01ISA15USGIND__c', blank=True) # Field name made lowercase.
    oeisas01isa16subelesep__c = models.CharField(max_length=255, verbose_name=u'OEISAS01ISA16SUBELESEP', db_column=u'OEISAS01ISA16SUBELESEP__c', blank=True) # Field name made lowercase.
    oeisas03iea01gsct__c = models.CharField(max_length=255, verbose_name=u'OEISAS03IEA01GSCT', db_column=u'OEISAS03IEA01GSCT__c', blank=True) # Field name made lowercase.
    oeisas03iea02icn__c = models.CharField(max_length=255, verbose_name=u'OEISAS03IEA02ICN', db_column=u'OEISAS03IEA02ICN__c', blank=True) # Field name made lowercase.
    gshdrs01gs02appsendrcd__c = models.CharField(max_length=255, verbose_name=u'GSHDRS01GS02APPSENDRCD', db_column=u'GSHDRS01GS02APPSENDRCD__c', blank=True) # Field name made lowercase.
    gshdrs01gs03apprecvrcd__c = models.CharField(max_length=255, verbose_name=u'GSHDRS01GS03APPRECVRCD', db_column=u'GSHDRS01GS03APPRECVRCD__c', blank=True) # Field name made lowercase.
    gshdrs01gs04dt__c = models.CharField(max_length=255, verbose_name=u'GSHDRS01GS04DT', db_column=u'GSHDRS01GS04DT__c', blank=True) # Field name made lowercase.
    gshdrs01gs05tm__c = models.CharField(max_length=255, verbose_name=u'GSHDRS01GS05TM', db_column=u'GSHDRS01GS05TM__c', blank=True) # Field name made lowercase.
    gshdrs01gs06gcn__c = models.CharField(max_length=255, verbose_name=u'GSHDRS01GS06GCN', db_column=u'GSHDRS01GS06GCN__c', blank=True) # Field name made lowercase.
    gshdrs01gs08versidcd__c = models.CharField(max_length=255, verbose_name=u'GSHDRS01GS08VERSIDCD', db_column=u'GSHDRS01GS08VERSIDCD__c', blank=True) # Field name made lowercase.
    gshdrs03ge01tsct__c = models.CharField(max_length=255, verbose_name=u'GSHDRS03GE01TSCT', db_column=u'GSHDRS03GE01TSCT__c', blank=True) # Field name made lowercase.
    gshdrs03ge02gcn__c = models.CharField(max_length=255, verbose_name=u'GSHDRS03GE02GCN', db_column=u'GSHDRS03GE02GCN__c', blank=True) # Field name made lowercase.
    sthdrs01st02contrlnr__c = models.CharField(max_length=255, verbose_name=u'STHDRS01ST02CONTRLNR', db_column=u'STHDRS01ST02CONTRLNR__c', blank=True) # Field name made lowercase.
    sthdrs01st03implmntnconvntnrefnc__c = models.CharField(max_length=255, verbose_name=u'STHDRS01ST03IMPLMNTNCONVNTNREFNC', db_column=u'STHDRS01ST03IMPLMNTNCONVNTNREFNC__c', blank=True) # Field name made lowercase.
    sthdrs02bgn01tspurpscd__c = models.CharField(max_length=255, verbose_name=u'STHDRS02BGN01TSPURPSCD', db_column=u'STHDRS02BGN01TSPURPSCD__c', blank=True) # Field name made lowercase.
    sthdrs02bgn02tsrefnr__c = models.CharField(max_length=255, verbose_name=u'STHDRS02BGN02TSREFNR', db_column=u'STHDRS02BGN02TSREFNR__c', blank=True) # Field name made lowercase.
    sthdrs02bgn03tscreatndt__c = models.CharField(max_length=255, verbose_name=u'STHDRS02BGN03TSCREATNDT', db_column=u'STHDRS02BGN03TSCREATNDT__c', blank=True) # Field name made lowercase.
    sthdrs02bgn04tscreatntim__c = models.CharField(max_length=255, verbose_name=u'STHDRS02BGN04TSCREATNTIM', db_column=u'STHDRS02BGN04TSCREATNTIM__c', blank=True) # Field name made lowercase.
    sthdrs02bgn05timzoncd__c = models.CharField(max_length=255, verbose_name=u'STHDRS02BGN05TIMZONCD', db_column=u'STHDRS02BGN05TIMZONCD__c', blank=True) # Field name made lowercase.
    sthdrs02bgn08actncd__c = models.CharField(max_length=255, verbose_name=u'STHDRS02BGN08ACTNCD', db_column=u'STHDRS02BGN08ACTNCD__c', blank=True) # Field name made lowercase.
    sthdrs04dtp03dttmperdovlmaintnceffd8__c = models.CharField(max_length=255, verbose_name=u'STHDRS04DTP03DTTMPERDOVLMAINTNCEFFD8', db_column=u'STHDRS04DTP03DTTMPERDOVLMAINTNCEFFD8__c', blank=True) # Field name made lowercase.
    sthdrs05qty02recrdtotlsovltotl__c = models.CharField(max_length=255, verbose_name=u'STHDRS05QTY02RECRDTOTLSOVLTOTL', db_column=u'STHDRS05QTY02RECRDTOTLSOVLTOTL__c', blank=True) # Field name made lowercase.
    sthdrs10se01segct__c = models.CharField(max_length=255, verbose_name=u'STHDRS10SE01SEGCT', db_column=u'STHDRS10SE01SEGCT__c', blank=True) # Field name made lowercase.
    sthdrs10se02tcn__c = models.CharField(max_length=255, verbose_name=u'STHDRS10SE02TCN', db_column=u'STHDRS10SE02TCN__c', blank=True) # Field name made lowercase.
    sthdrs05qty02i02recrdtotlsovldepndnttotl__c = models.CharField(max_length=255, verbose_name=u'STHDRS05QTY02I02RECRDTOTLSOVLDEPNDNTTOTL', db_column=u'STHDRS05QTY02I02RECRDTOTLSOVLDEPNDNTTOTL__c', blank=True) # Field name made lowercase.
    l1000as01n102plansponsrnm__c = models.CharField(max_length=255, verbose_name=u'L1000AS01N102PLANSPONSRNM', db_column=u'L1000AS01N102PLANSPONSRNM__c', blank=True) # Field name made lowercase.
    l1000as01n104sponsridovlcdasgnddestntnor__c = models.CharField(max_length=255, verbose_name=u'L1000AS01N104SPONSRIDOVLCDASGNDDESTNTNOR', db_column=u'L1000AS01N104SPONSRIDOVLCDASGNDDESTNTNOR__c', blank=True) # Field name made lowercase.
    l1000as01n104sponsridovlfedtaxidnr__c = models.CharField(max_length=255, verbose_name=u'L1000AS01N104SPONSRIDOVLFEDTAXIDNR', db_column=u'L1000AS01N104SPONSRIDOVLFEDTAXIDNR__c', blank=True) # Field name made lowercase.
    l1000bs01n102insrnm__c = models.CharField(max_length=255, verbose_name=u'L1000BS01N102INSRNM', db_column=u'L1000BS01N102INSRNM__c', blank=True) # Field name made lowercase.
    l1000bs01n104insridcdovlfedtaxidnr__c = models.CharField(max_length=255, verbose_name=u'L1000BS01N104INSRIDCDOVLFEDTAXIDNR', db_column=u'L1000BS01N104INSRIDCDOVLFEDTAXIDNR__c', blank=True) # Field name made lowercase.
    l1000cbos01n102brokrnm__c = models.CharField(max_length=255, verbose_name=u'L1000CBOS01N102BROKRNM', db_column=u'L1000CBOS01N102BROKRNM__c', blank=True) # Field name made lowercase.
    l1000cbos01n104tpabrokridcdovlcdasgnddes__c = models.CharField(max_length=255, verbose_name=u'L1000CBOS01N104TPABROKRIDCDOVLCDASGNDDES', db_column=u'L1000CBOS01N104TPABROKRIDCDOVLCDASGNDDES__c', blank=True) # Field name made lowercase.
    l1000ctvs01n102brokrnm__c = models.CharField(max_length=255, verbose_name=u'L1000CTVS01N102BROKRNM', db_column=u'L1000CTVS01N102BROKRNM__c', blank=True) # Field name made lowercase.
    l1000ctvs01n104tpabrokridcdovlcdasgnddes__c = models.CharField(max_length=255, verbose_name=u'L1000CTVS01N104TPABROKRIDCDOVLCDASGNDDES', db_column=u'L1000CTVS01N104TPABROKRIDCDOVLCDASGNDDES__c', blank=True) # Field name made lowercase.
    l1100cs01act01tpabrokracntnr__c = models.CharField(max_length=255, verbose_name=u'L1100CS01ACT01TPABROKRACNTNR', db_column=u'L1100CS01ACT01TPABROKRACNTNR__c', blank=True) # Field name made lowercase.
    l2000s01ins01memind__c = models.CharField(max_length=255, verbose_name=u'L2000S01INS01MEMIND', db_column=u'L2000S01INS01MEMIND__c', blank=True) # Field name made lowercase.
    l2000s01ins02indvdlrelcd__c = models.CharField(max_length=255, verbose_name=u'L2000S01INS02INDVDLRELCD', db_column=u'L2000S01INS02INDVDLRELCD__c', blank=True) # Field name made lowercase.
    l2000s01ins03maintnctypecd__c = models.CharField(max_length=255, verbose_name=u'L2000S01INS03MAINTNCTYPECD', db_column=u'L2000S01INS03MAINTNCTYPECD__c', blank=True) # Field name made lowercase.
    l2000s01ins04maintncrsncd__c = models.CharField(max_length=255, verbose_name=u'L2000S01INS04MAINTNCRSNCD', db_column=u'L2000S01INS04MAINTNCRSNCD__c', blank=True) # Field name made lowercase.
    l2000s01ins05benftstatscd__c = models.CharField(max_length=255, verbose_name=u'L2000S01INS05BENFTSTATSCD', db_column=u'L2000S01INS05BENFTSTATSCD__c', blank=True) # Field name made lowercase.
    l2000s01ins08emplymntstatscd__c = models.CharField(max_length=255, verbose_name=u'L2000S01INS08EMPLYMNTSTATSCD', db_column=u'L2000S01INS08EMPLYMNTSTATSCD__c', blank=True) # Field name made lowercase.
    l2000s02ref02subidovlsubnr__c = models.CharField(max_length=255, verbose_name=u'L2000S02REF02SUBIDOVLSUBNR', db_column=u'L2000S02REF02SUBIDOVLSUBNR__c', blank=True) # Field name made lowercase.
    l2000s04ref02suppidovlclientreprtngcatgr__c = models.CharField(max_length=255, verbose_name=u'L2000S04REF02SUPPIDOVLCLIENTREPRTNGCATGR', db_column=u'L2000S04REF02SUPPIDOVLCLIENTREPRTNGCATGR__c', blank=True) # Field name made lowercase.
    l2000s04ref02i02suppidovlcrosrefnr__c = models.CharField(max_length=255, verbose_name=u'L2000S04REF02I02SUPPIDOVLCROSREFNR', db_column=u'L2000S04REF02I02SUPPIDOVLCROSREFNR__c', blank=True) # Field name made lowercase.
    l2000s05dtp03statsnfoeffdtovleligbegnd8__c = models.CharField(max_length=255, verbose_name=u'L2000S05DTP03STATSNFOEFFDTOVLELIGBEGND8', db_column=u'L2000S05DTP03STATSNFOEFFDTOVLELIGBEGND8__c', blank=True) # Field name made lowercase.
    l2100ails01nm103memlnameovlpersn__c = models.CharField(max_length=255, verbose_name=u'L2100AILS01NM103MEMLNAMEOVLPERSN', db_column=u'L2100AILS01NM103MEMLNAMEOVLPERSN__c', blank=True) # Field name made lowercase.
    l2100ails01nm104memfname__c = models.CharField(max_length=255, verbose_name=u'L2100AILS01NM104MEMFNAME', db_column=u'L2100AILS01NM104MEMFNAME__c', blank=True) # Field name made lowercase.
    l2100ails01nm105memmname__c = models.CharField(max_length=255, verbose_name=u'L2100AILS01NM105MEMMNAME', db_column=u'L2100AILS01NM105MEMMNAME__c', blank=True) # Field name made lowercase.
    l2100ails01nm106nmprefx__c = models.CharField(max_length=255, verbose_name=u'L2100AILS01NM106NMPREFX', db_column=u'L2100AILS01NM106NMPREFX__c', blank=True) # Field name made lowercase.
    l2100ails01nm107nmsufx__c = models.CharField(max_length=255, verbose_name=u'L2100AILS01NM107NMSUFX', db_column=u'L2100AILS01NM107NMSUFX__c', blank=True) # Field name made lowercase.
    l2100ails01nm109memidovlssn__c = models.CharField(max_length=255, verbose_name=u'L2100AILS01NM109MEMIDOVLSSN', db_column=u'L2100AILS01NM109MEMIDOVLSSN__c', blank=True) # Field name made lowercase.
    l2100ails02per04commnrovlbeprnr__c = models.CharField(max_length=255, verbose_name=u'L2100AILS02PER04COMMNROVLBEPRNR', db_column=u'L2100AILS02PER04COMMNROVLBEPRNR__c', blank=True) # Field name made lowercase.
    l2100ails03n301adrslin__c = models.CharField(max_length=255, verbose_name=u'L2100AILS03N301ADRSLIN', db_column=u'L2100AILS03N301ADRSLIN__c', blank=True) # Field name made lowercase.
    l2100ails04n401citynm__c = models.CharField(max_length=255, verbose_name=u'L2100AILS04N401CITYNM', db_column=u'L2100AILS04N401CITYNM__c', blank=True) # Field name made lowercase.
    l2100ails04n402statcd__c = models.CharField(max_length=255, verbose_name=u'L2100AILS04N402STATCD', db_column=u'L2100AILS04N402STATCD__c', blank=True) # Field name made lowercase.
    l2100ails04n403mempostlzonzipcd__c = models.CharField(max_length=255, verbose_name=u'L2100AILS04N403MEMPOSTLZONZIPCD', db_column=u'L2100AILS04N403MEMPOSTLZONZIPCD__c', blank=True) # Field name made lowercase.
    l2100ails04n406locidovlcountyprsh__c = models.CharField(max_length=255, verbose_name=u'L2100AILS04N406LOCIDOVLCOUNTYPRSH', db_column=u'L2100AILS04N406LOCIDOVLCOUNTYPRSH__c', blank=True) # Field name made lowercase.
    l2100ails05dmg02birthdtovldtccyymmdd__c = models.CharField(max_length=255, verbose_name=u'L2100AILS05DMG02BIRTHDTOVLDTCCYYMMDD', db_column=u'L2100AILS05DMG02BIRTHDTOVLDTCCYYMMDD__c', blank=True) # Field name made lowercase.
    l2100ails05dmg03gendrcd__c = models.CharField(max_length=255, verbose_name=u'L2100AILS05DMG03GENDRCD', db_column=u'L2100AILS05DMG03GENDRCD__c', blank=True) # Field name made lowercase.
    l2100ails05dmg04martlstatscd__c = models.CharField(max_length=255, verbose_name=u'L2100AILS05DMG04MARTLSTATSCD', db_column=u'L2100AILS05DMG04MARTLSTATSCD__c', blank=True) # Field name made lowercase.
    l2100ails05dmg0503racethnctycdovlclasfct__c = models.CharField(max_length=255, verbose_name=u'L2100AILS05DMG0503RACETHNCTYCDOVLCLASFCT', db_column=u'L2100AILS05DMG0503RACETHNCTYCDOVLCLASFCT__c', blank=True) # Field name made lowercase.
    l2100ails09hlh01reltdcd__c = models.CharField(max_length=255, verbose_name=u'L2100AILS09HLH01RELTDCD', db_column=u'L2100AILS09HLH01RELTDCD__c', blank=True) # Field name made lowercase.
    l2100ails02per04commnrovlemail__c = models.CharField(max_length=255, verbose_name=u'L2100AILS02PER04COMMNROVLEMAIL', db_column=u'L2100AILS02PER04COMMNROVLEMAIL__c', blank=True) # Field name made lowercase.
    l2100ails03n302adrslin__c = models.CharField(max_length=255, verbose_name=u'L2100AILS03N302ADRSLIN', db_column=u'L2100AILS03N302ADRSLIN__c', blank=True) # Field name made lowercase.
    l2100cs02n301adrslin__c = models.CharField(max_length=255, verbose_name=u'L2100CS02N301ADRSLIN', db_column=u'L2100CS02N301ADRSLIN__c', blank=True) # Field name made lowercase.
    l2100cs03n401memmailcitynm__c = models.CharField(max_length=255, verbose_name=u'L2100CS03N401MEMMAILCITYNM', db_column=u'L2100CS03N401MEMMAILCITYNM__c', blank=True) # Field name made lowercase.
    l2100cs03n402memmailstatcd__c = models.CharField(max_length=255, verbose_name=u'L2100CS03N402MEMMAILSTATCD', db_column=u'L2100CS03N402MEMMAILSTATCD__c', blank=True) # Field name made lowercase.
    l2100cs03n403postlzonzipcd__c = models.CharField(max_length=255, verbose_name=u'L2100CS03N403POSTLZONZIPCD', db_column=u'L2100CS03N403POSTLZONZIPCD__c', blank=True) # Field name made lowercase.
    l2300s01hd01maintnctypecd__c = models.CharField(max_length=255, verbose_name=u'L2300S01HD01MAINTNCTYPECD', db_column=u'L2300S01HD01MAINTNCTYPECD__c', blank=True) # Field name made lowercase.
    l2300s01hd03inslincd__c = models.CharField(max_length=255, verbose_name=u'L2300S01HD03INSLINCD', db_column=u'L2300S01HD03INSLINCD__c', blank=True) # Field name made lowercase.
    l2300s02dtp03covgperdovlbenftbegnd8__c = models.CharField(max_length=255, verbose_name=u'L2300S02DTP03COVGPERDOVLBENFTBEGND8', db_column=u'L2300S02DTP03COVGPERDOVLBENFTBEGND8__c', blank=True) # Field name made lowercase.
    l2300s04ref02memgrppolcynrovlgrppolcynr__c = models.CharField(max_length=255, verbose_name=u'L2300S04REF02MEMGRPPOLCYNROVLGRPPOLCYNR', db_column=u'L2300S04REF02MEMGRPPOLCYNROVLGRPPOLCYNR__c', blank=True) # Field name made lowercase.
    l2300s04ref02i02memgrppolcynrovlclascont__c = models.CharField(max_length=255, verbose_name=u'L2300S04REF02I02MEMGRPPOLCYNROVLCLASCONT', db_column=u'L2300S04REF02I02MEMGRPPOLCYNROVLCLASCONT__c', blank=True) # Field name made lowercase.
    l2700s01ls01lpidcd__c = models.CharField(max_length=255, verbose_name=u'L2700S01LS01LPIDCD', db_column=u'L2700S01LS01LPIDCD__c', blank=True) # Field name made lowercase.
    l2700s03le01idcd__c = models.CharField(max_length=255, verbose_name=u'L2700S03LE01IDCD', db_column=u'L2700S03LE01IDCD__c', blank=True) # Field name made lowercase.
    l2710s01lx01asgndnr__c = models.CharField(max_length=255, verbose_name=u'L2710S01LX01ASGNDNR', db_column=u'L2710S01LX01ASGNDNR__c', blank=True) # Field name made lowercase.
    l2750s01n102memreprtngcatgrynm__c = models.CharField(max_length=255, verbose_name=u'L2750S01N102MEMREPRTNGCATGRYNM', db_column=u'L2750S01N102MEMREPRTNGCATGRYNM__c', blank=True) # Field name made lowercase.
    l2750s02ref02memreprtngcatgryrefidovlcli__c = models.CharField(max_length=255, verbose_name=u'L2750S02REF02MEMREPRTNGCATGRYREFIDOVLCLI', db_column=u'L2750S02REF02MEMREPRTNGCATGRYREFIDOVLCLI__c', blank=True) # Field name made lowercase.
    l2750s02ref02memreprtngcatgryrefidovlacn__c = models.CharField(max_length=255, verbose_name=u'L2750S02REF02MEMREPRTNGCATGRYREFIDOVLACN', db_column=u'L2750S02REF02MEMREPRTNGCATGRYREFIDOVLACN__c', blank=True) # Field name made lowercase.
    l2750s03dtp03memreprtngcatgryeffdtovleff__c = models.CharField(max_length=255, verbose_name=u'L2750S03DTP03MEMREPRTNGCATGRYEFFDTOVLEFF', db_column=u'L2750S03DTP03MEMREPRTNGCATGRYEFFDTOVLEFF__c', blank=True) # Field name made lowercase.
    l2750s02ref02memreprtngcatgryrefidovlpmt__c = models.CharField(max_length=255, verbose_name=u'L2750S02REF02MEMREPRTNGCATGRYREFIDOVLPMT', db_column=u'L2750S02REF02MEMREPRTNGCATGRYREFIDOVLPMT__c', blank=True) # Field name made lowercase.
    stagedgroupcontrolnumber__c = models.CharField(max_length=255, verbose_name=u'stagedgroupcontrolnumber', blank=True)
    stagedtransactioncontrolnumber__c = models.CharField(max_length=255, verbose_name=u'stagedtransactioncontrolnumber', blank=True)
    stageddependenttotal__c = models.CharField(max_length=255, verbose_name=u'stageddependenttotal', blank=True)
    stagedtotal__c = models.CharField(max_length=255, verbose_name=u'stagedtotal', blank=True)
    stagedemployeetotal__c = models.CharField(max_length=255, verbose_name=u'stagedemployeetotal', blank=True)
    stagedissuerassignedsubscriberid__c = models.CharField(max_length=255, verbose_name=u'stagedissuerassignedsubscriberid', blank=True)
    stagedpremiumpaidtodate__c = models.CharField(max_length=255, verbose_name=u'stagedpremiumpaidtodate', blank=True)
    stagedlastpremiumpaiddate__c = models.CharField(max_length=255, verbose_name=u'stagedlastpremiumpaiddate', blank=True)
    l2100ails02per06i02commnrovlaltrnttelphn__c = models.CharField(max_length=255, verbose_name=u'L2100AILS02PER06I02COMMNROVLALTRNTTELPHN', db_column=u'L2100AILS02PER06I02COMMNROVLALTRNTTELPHN__c', blank=True) # Field name made lowercase.
    l2100ails10lui02langcdovlis639langcd__c = models.CharField(max_length=255, verbose_name=u'L2100AILS10LUI02LANGCDOVLIS639LANGCD', db_column=u'L2100AILS10LUI02LANGCDOVLIS639LANGCD__c', blank=True) # Field name made lowercase.
    l2100cs02n302adrslin__c = models.CharField(max_length=255, verbose_name=u'L2100CS02N302ADRSLIN', db_column=u'L2100CS02N302ADRSLIN__c', blank=True) # Field name made lowercase.
    l2100ails02per06commnrovlemail__c = models.CharField(max_length=255, verbose_name=u'L2100AILS02PER06COMMNROVLEMAIL', db_column=u'L2100AILS02PER06COMMNROVLEMAIL__c', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'IM_834_IN__c'
        verbose_name = 'IM 834 IN'
        verbose_name_plural = 'IM 834 IN'
        # keyPrefix = 'a0m'

class Installedmobileapp(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=255, verbose_name=u'Installed Mobile App Name', sf_read_only=models.READ_ONLY, db_column=u'Name') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    status = models.CharField(max_length=255, verbose_name=u'Status', sf_read_only=models.READ_ONLY, db_column=u'Status', choices=[(u'downloaded', u'Downloaded'), (u'installed', u'Installed')]) # Field name made lowercase.
    userid = models.ForeignKey('User', db_column=u'UserId') # Field name made lowercase.
    version = models.CharField(max_length=255, verbose_name=u'Version', sf_read_only=models.READ_ONLY, db_column=u'Version', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'InstalledMobileApp'
        verbose_name = 'Installed Mobile App'
        verbose_name_plural = 'Installed Mobile Apps'
        # keyPrefix = '0El'

class KeyvalueliststoreC(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=38, verbose_name=u'Name', db_column=u'Name') # Field name made lowercase.
    setupownerid = models.ForeignKey('Organization', null=True, db_column=u'SetupOwnerId', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    description__c = models.TextField(help_text=u'Describe the purpose of this particular key value pair.', verbose_name=u'Description', db_column=u'Description__c') # Field name made lowercase.
    value__c = models.CharField(help_text=u'Stores any value for a given key which is stored on the native Name field', max_length=255, verbose_name=u'Value', db_column=u'Value__c') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'KeyValueListStore__c'
        verbose_name = 'Key Value List Store'
        verbose_name_plural = 'Key Value List Store'
        # keyPrefix = 'a0U'

class Knowledgeableuser(models.Model):
    networkid = models.ForeignKey('Network', null=True, db_column=u'NetworkId', blank=True) # Field name made lowercase.
    userid = models.ForeignKey('User', db_column=u'UserId') # Field name made lowercase.
    topicid = models.ForeignKey('Topic', db_column=u'TopicId') # Field name made lowercase.
    rawrank = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Rank', db_column=u'RawRank', blank=True) # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'KnowledgeableUser'
        verbose_name = 'Knowledgeable User'
        verbose_name_plural = 'Knowledgeable Users'
        # keyPrefix = '0in'

class Lead(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    masterrecordid = models.ForeignKey('self', null=True, db_column=u'MasterRecordId', blank=True) # Field name made lowercase.
    lastname = models.CharField(max_length=80, verbose_name=u'Last Name', db_column=u'LastName') # Field name made lowercase.
    firstname = models.CharField(max_length=40, verbose_name=u'First Name', db_column=u'FirstName', blank=True) # Field name made lowercase.
    salutation = models.CharField(blank=True, max_length=40, verbose_name=u'Salutation', db_column=u'Salutation', choices=[(u'Mr.', u'Mr.'), (u'Ms.', u'Ms.'), (u'Mrs.', u'Mrs.'), (u'Dr.', u'Dr.'), (u'Prof.', u'Prof.')]) # Field name made lowercase.
    name = models.CharField(max_length=121, verbose_name=u'Full Name', sf_read_only=models.READ_ONLY, db_column=u'Name') # Field name made lowercase.
    recordtypeid = models.ForeignKey('Recordtype', null=True, db_column=u'RecordTypeId', blank=True) # Field name made lowercase.
    title = models.CharField(max_length=128, verbose_name=u'Title', db_column=u'Title', blank=True) # Field name made lowercase.
    company = models.CharField(max_length=255, verbose_name=u'Company', db_column=u'Company', blank=True) # Field name made lowercase.
    street = models.TextField(verbose_name=u'Street', db_column=u'Street', blank=True) # Field name made lowercase.
    city = models.CharField(max_length=40, verbose_name=u'City', db_column=u'City', blank=True) # Field name made lowercase.
    state = models.CharField(max_length=80, verbose_name=u'State/Province', db_column=u'State', blank=True) # Field name made lowercase.
    postalcode = models.CharField(max_length=20, verbose_name=u'Zip/Postal Code', db_column=u'PostalCode', blank=True) # Field name made lowercase.
    country = models.CharField(max_length=80, verbose_name=u'Country', db_column=u'Country', blank=True) # Field name made lowercase.
    latitude = models.DecimalField(db_column=u'Latitude', decimal_places=15, max_digits=18, blank=True, null=True, verbose_name=u'Latitude') # Field name made lowercase.
    longitude = models.DecimalField(db_column=u'Longitude', decimal_places=15, max_digits=18, blank=True, null=True, verbose_name=u'Longitude') # Field name made lowercase.
    address = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Address', db_column=u'Address', blank=True) # Field name made lowercase. This field type is a guess.
    phone = models.CharField(max_length=40, verbose_name=u'Phone', db_column=u'Phone', blank=True) # Field name made lowercase.
    mobilephone = models.CharField(max_length=40, verbose_name=u'Mobile Phone', db_column=u'MobilePhone', blank=True) # Field name made lowercase.
    email = models.EmailField(null=True, verbose_name=u'Email', db_column=u'Email', blank=True) # Field name made lowercase.
    photourl = models.URLField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Photo URL', db_column=u'PhotoUrl', blank=True) # Field name made lowercase.
    description = models.TextField(verbose_name=u'Description', db_column=u'Description', blank=True) # Field name made lowercase.
    leadsource = models.CharField(blank=True, max_length=40, verbose_name=u'Lead Source', db_column=u'LeadSource', choices=[(u'Advertisement', u'Advertisement'), (u'Employee Referral', u'Employee Referral'), (u'External Referral', u'External Referral'), (u'Partner', u'Partner'), (u'Public Relations', u'Public Relations'), (u'Seminar - Internal', u'Seminar - Internal'), (u'Seminar - Partner', u'Seminar - Partner'), (u'Trade Show', u'Trade Show'), (u'Web', u'Web'), (u'Word of mouth', u'Word of mouth'), (u'Other', u'Other'), (u'Call In', u'Call In'), (u'Walk In', u'Walk In'), (u'Online', u'Online'), (u'Administrative Upload', u'Administrative Upload')]) # Field name made lowercase.
    status = models.CharField(max_length=40, verbose_name=u'Status', db_column=u'Status', choices=[(u'Active', u'Active'), (u'Inactive', u'Inactive'), (u'Application Completed', u'Application Completed')]) # Field name made lowercase.
    industry = models.CharField(blank=True, max_length=40, verbose_name=u'Industry', db_column=u'Industry', choices=[(u'Agriculture', u'Agriculture'), (u'Apparel', u'Apparel'), (u'Banking', u'Banking'), (u'Biotechnology', u'Biotechnology'), (u'Chemicals', u'Chemicals'), (u'Communications', u'Communications'), (u'Construction', u'Construction'), (u'Consulting', u'Consulting'), (u'Education', u'Education'), (u'Electronics', u'Electronics'), (u'Energy', u'Energy'), (u'Engineering', u'Engineering'), (u'Entertainment', u'Entertainment'), (u'Environmental', u'Environmental'), (u'Finance', u'Finance'), (u'Food & Beverage', u'Food & Beverage'), (u'Government', u'Government'), (u'Healthcare', u'Healthcare'), (u'Hospitality', u'Hospitality'), (u'Insurance', u'Insurance'), (u'Machinery', u'Machinery'), (u'Manufacturing', u'Manufacturing'), (u'Media', u'Media'), (u'Not For Profit', u'Not For Profit'), (u'Other', u'Other'), (u'Recreation', u'Recreation'), (u'Retail', u'Retail'), (u'Shipping', u'Shipping'), (u'Technology', u'Technology'), (u'Telecommunications', u'Telecommunications'), (u'Transportation', u'Transportation'), (u'Utilities', u'Utilities')]) # Field name made lowercase.
    numberofemployees = models.IntegerField(null=True, verbose_name=u'Employees', db_column=u'NumberOfEmployees', blank=True) # Field name made lowercase.
    ownerid = models.ForeignKey('Group', db_column=u'OwnerId') # Field name made lowercase.
    hasoptedoutofemail = models.BooleanField(verbose_name=u'Email Opt Out', db_column=u'HasOptedOutOfEmail') # Field name made lowercase.
    isconverted = models.BooleanField(sf_read_only=models.NOT_UPDATEABLE, verbose_name=u'Converted', db_column=u'IsConverted') # Field name made lowercase.
    converteddate = models.DateField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Converted Date', db_column=u'ConvertedDate', blank=True) # Field name made lowercase.
    convertedaccountid = models.ForeignKey('Account', null=True, db_column=u'ConvertedAccountId', blank=True) # Field name made lowercase.
    convertedcontactid = models.ForeignKey('Contact', null=True, db_column=u'ConvertedContactId', blank=True) # Field name made lowercase.
    convertedopportunityid = models.ForeignKey('Opportunity', null=True, db_column=u'ConvertedOpportunityId', blank=True) # Field name made lowercase.
    isunreadbyowner = models.BooleanField(verbose_name=u'Unread By Owner', db_column=u'IsUnreadByOwner') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    lastactivitydate = models.DateField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Activity', db_column=u'LastActivityDate', blank=True) # Field name made lowercase.
    donotcall = models.BooleanField(verbose_name=u'Do Not Call', db_column=u'DoNotCall') # Field name made lowercase.
    lastvieweddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Viewed Date', db_column=u'LastViewedDate', blank=True) # Field name made lowercase.
    lastreferenceddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Referenced Date', db_column=u'LastReferencedDate', blank=True) # Field name made lowercase.
    jigsawcontactid = models.CharField(max_length=20, verbose_name=u'Jigsaw Contact ID', sf_read_only=models.READ_ONLY, db_column=u'JigsawContactId', blank=True) # Field name made lowercase.
    companydunsnumber = models.CharField(max_length=9, verbose_name=u'Company D-U-N-S Number', db_column=u'CompanyDunsNumber', blank=True) # Field name made lowercase.
    emailbouncedreason = models.CharField(max_length=255, verbose_name=u'Email Bounced Reason', sf_read_only=models.NOT_CREATEABLE, db_column=u'EmailBouncedReason', blank=True) # Field name made lowercase.
    emailbounceddate = models.DateTimeField(null=True, sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Email Bounced Date', db_column=u'EmailBouncedDate', blank=True) # Field name made lowercase.
    annual_mileage__c = models.DecimalField(db_column=u'Annual_Mileage__c', decimal_places=0, max_digits=18, blank=True, null=True, verbose_name=u'Annual Mileage') # Field name made lowercase.
    at_this_address_since__c = models.DateField(null=True, verbose_name=u'At this Address Since', db_column=u'At_This_Address_Since__c', blank=True) # Field name made lowercase.
    car_make__c = models.CharField(max_length=255, verbose_name=u'Car Make', db_column=u'Car_Make__c', blank=True) # Field name made lowercase.
    car_model__c = models.CharField(max_length=255, verbose_name=u'Car Model', db_column=u'Car_Model__c', blank=True) # Field name made lowercase.
    car_year__c = models.DecimalField(db_column=u'Car_Year__c', decimal_places=0, max_digits=4, blank=True, null=True, verbose_name=u'Car Year') # Field name made lowercase.
    coverage_amount__c = models.DecimalField(db_column=u'Coverage_Amount__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Coverage Amount') # Field name made lowercase.
    coverage_interests__c = models.CharField(blank=True, max_length=4099, verbose_name=u'Coverage Interests', db_column=u'Coverage_Interests__c', choices=[(u'Commercial Auto', u'Commercial Auto'), (u'Business Owners', u'Business Owners'), (u'General Liability', u'General Liability'), (u'Commercial Umbrella', u'Commercial Umbrella'), (u'Workers Compensation', u'Workers Compensation'), (u'Commercial Property', u'Commercial Property'), (u'Package', u'Package'), (u'Personal Auto', u'Personal Auto'), (u'Inland Marine', u'Inland Marine'), (u'Homeowners', u'Homeowners'), (u'Umbrella', u'Umbrella'), (u'Watercraft', u'Watercraft')]) # Field name made lowercase.
    current_annual_premium__c = models.DecimalField(db_column=u'Current_Annual_Premium__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Current Annual Premium') # Field name made lowercase.
    subscriber__c = models.ForeignKey('self', null=True, db_column=u'Subscriber__c', blank=True) # Field name made lowercase.
    current_mileage__c = models.DecimalField(db_column=u'Current_Mileage__c', decimal_places=0, max_digits=18, blank=True, null=True, verbose_name=u'Current Mileage') # Field name made lowercase.
    date_of_birth__c = models.DateField(null=True, verbose_name=u'Date of Birth', db_column=u'Date_of_Birth__c', blank=True) # Field name made lowercase.
    education__c = models.CharField(blank=True, max_length=255, verbose_name=u'Education', db_column=u'Education__c', choices=[(u'Some or No High School', u'Some or No High School'), (u'High School Diploma', u'High School Diploma'), (u'GED', u'GED'), (u'Some College', u'Some College'), (u'Associate Degree', u'Associate Degree'), (u'Bachelors Degree', u'Bachelors Degree'), (u'Masters Degree', u'Masters Degree'), (u'Doctorate Degree', u'Doctorate Degree'), (u'Other Professional Degree', u'Other Professional Degree'), (u'Other Non Professional Degree', u'Other Non Professional Degree'), (u'Trade/Vocational School', u'Trade/Vocational School')]) # Field name made lowercase.
    estimated_personal_income_annual__c = models.DecimalField(db_column=u'Estimated_Personal_Income_Annual__c', decimal_places=0, max_digits=18, blank=True, null=True, verbose_name=u'Estimated Household Income (Annual)') # Field name made lowercase.
    eve_phone__c = models.CharField(max_length=40, verbose_name=u'Eve. Phone', db_column=u'Eve_Phone__c', blank=True) # Field name made lowercase.
    gender__c = models.CharField(blank=True, max_length=255, verbose_name=u'Gender', db_column=u'Gender__c', choices=[(u'Female', u'Female'), (u'Male', u'Male')]) # Field name made lowercase.
    driver_s_license_number__c = models.CharField(max_length=255, verbose_name=u"Driver's License Number", db_column=u'Driver_s_License_Number__c', blank=True) # Field name made lowercase.
    driver_s_license_state__c = models.CharField(blank=True, max_length=255, verbose_name=u"Driver's License State", db_column=u'Driver_s_License_State__c', choices=[(u'AK', u'AK'), (u'AL', u'AL'), (u'AR', u'AR'), (u'AZ', u'AZ'), (u'CA', u'CA'), (u'CO', u'CO'), (u'CT', u'CT'), (u'DC', u'DC'), (u'DE', u'DE'), (u'FL', u'FL'), (u'GA', u'GA'), (u'HI', u'HI'), (u'IA', u'IA'), (u'ID', u'ID'), (u'IL', u'IL'), (u'IN', u'IN'), (u'KS', u'KS'), (u'KY', u'KY'), (u'LA', u'LA'), (u'MA', u'MA'), (u'MD', u'MD'), (u'ME', u'ME'), (u'MI', u'MI'), (u'MN', u'MN'), (u'MO', u'MO'), (u'MS', u'MS'), (u'MT', u'MT'), (u'NC', u'NC'), (u'ND', u'ND'), (u'NE', u'NE'), (u'NJ', u'NJ'), (u'NM', u'NM'), (u'NV', u'NV'), (u'NY', u'NY'), (u'OH', u'OH'), (u'OK', u'OK'), (u'OR', u'OR'), (u'PA', u'PA'), (u'RI', u'RI'), (u'SC', u'SC'), (u'SD', u'SD'), (u'TN', u'TN'), (u'TX', u'TX'), (u'UT', u'UT'), (u'VA', u'VA'), (u'VT', u'VT'), (u'WA', u'WA'), (u'WI', u'WI'), (u'WV', u'WV'), (u'WY', u'WY')]) # Field name made lowercase.
    marital_status__c = models.CharField(blank=True, max_length=255, verbose_name=u'Marital Status', db_column=u'Marital_Status__c', choices=[(u'Single', u'Single'), (u'Married', u'Married'), (u'Divorced', u'Divorced'), (u'Separated', u'Separated'), (u'Widowed', u'Widowed')]) # Field name made lowercase.
    occupation__c = models.CharField(max_length=255, verbose_name=u'Occupation', db_column=u'Occupation__c', blank=True) # Field name made lowercase.
    owns_residence__c = models.CharField(blank=True, max_length=255, verbose_name=u'Owns Residence', db_column=u'Owns_Residence__c', choices=[(u'Yes', u'Yes'), (u'No', u'No')]) # Field name made lowercase.
    policy_expiration_date__c = models.DateField(null=True, verbose_name=u'Policy Expiration Date', db_column=u'Policy_Expiration_Date__c', blank=True) # Field name made lowercase.
    preferred_method_of_contact__c = models.CharField(blank=True, max_length=255, verbose_name=u'Preferred Method of Contact', db_column=u'Preferred_Method_of_Contact__c', choices=[(u'Phone', u'Phone'), (u'Email', u'Email')]) # Field name made lowercase.
    property_type__c = models.CharField(blank=True, max_length=255, verbose_name=u'Property Type', db_column=u'Property_Type__c', choices=[(u'Single Family Home', u'Single Family Home'), (u'Apartment', u'Apartment'), (u'Duplex', u'Duplex'), (u'Condominium', u'Condominium'), (u'Town Home', u'Town Home'), (u'Mobile Home', u'Mobile Home')]) # Field name made lowercase.
    registered_state__c = models.CharField(blank=True, max_length=255, verbose_name=u'Registered State', db_column=u'Registered_State__c', choices=[(u'AK', u'AK'), (u'AL', u'AL'), (u'AR', u'AR'), (u'AZ', u'AZ'), (u'CA', u'CA'), (u'CO', u'CO'), (u'CT', u'CT'), (u'DC', u'DC'), (u'DE', u'DE'), (u'FL', u'FL'), (u'GA', u'GA'), (u'HI', u'HI'), (u'IA', u'IA'), (u'ID', u'ID'), (u'IL', u'IL'), (u'IN', u'IN'), (u'KS', u'KS'), (u'KY', u'KY'), (u'LA', u'LA'), (u'MA', u'MA'), (u'MD', u'MD'), (u'ME', u'ME'), (u'MI', u'MI'), (u'MN', u'MN'), (u'MO', u'MO'), (u'MS', u'MS'), (u'MT', u'MT'), (u'NC', u'NC'), (u'ND', u'ND'), (u'NE', u'NE'), (u'NJ', u'NJ'), (u'NM', u'NM'), (u'NV', u'NV'), (u'NY', u'NY'), (u'OH', u'OH'), (u'OK', u'OK'), (u'OR', u'OR'), (u'PA', u'PA'), (u'RI', u'RI'), (u'SC', u'SC'), (u'SD', u'SD'), (u'TN', u'TN'), (u'TX', u'TX'), (u'UT', u'UT'), (u'VA', u'VA'), (u'VT', u'VT'), (u'WA', u'WA'), (u'WI', u'WI'), (u'WV', u'WV'), (u'WY', u'WY')]) # Field name made lowercase.
    residence_city__c = models.CharField(max_length=200, verbose_name=u'Residence City', db_column=u'Residence_City__c', blank=True) # Field name made lowercase.
    residence_country__c = models.CharField(max_length=255, verbose_name=u'Residence Country', db_column=u'Residence_Country__c', blank=True) # Field name made lowercase.
    residence_state__c = models.CharField(blank=True, max_length=255, verbose_name=u'Residence State', db_column=u'Residence_State__c', choices=[(u'AK', u'AK'), (u'AL', u'AL'), (u'AR', u'AR'), (u'AZ', u'AZ'), (u'CA', u'CA'), (u'CO', u'CO'), (u'CT', u'CT'), (u'DC', u'DC'), (u'DE', u'DE'), (u'FL', u'FL'), (u'GA', u'GA'), (u'HI', u'HI'), (u'IA', u'IA'), (u'ID', u'ID'), (u'IL', u'IL'), (u'IN', u'IN'), (u'KS', u'KS'), (u'KY', u'KY'), (u'LA', u'LA'), (u'MA', u'MA'), (u'MD', u'MD'), (u'ME', u'ME'), (u'MI', u'MI'), (u'MN', u'MN'), (u'MO', u'MO'), (u'MS', u'MS'), (u'MT', u'MT'), (u'NC', u'NC'), (u'ND', u'ND'), (u'NE', u'NE'), (u'NJ', u'NJ'), (u'NM', u'NM'), (u'NV', u'NV'), (u'NY', u'NY'), (u'OH', u'OH'), (u'OK', u'OK'), (u'OR', u'OR'), (u'PA', u'PA'), (u'RI', u'RI'), (u'SC', u'SC'), (u'SD', u'SD'), (u'TN', u'TN'), (u'TX', u'TX'), (u'UT', u'UT'), (u'VA', u'VA'), (u'VT', u'VT'), (u'WA', u'WA'), (u'WI', u'WI'), (u'WV', u'WV'), (u'WY', u'WY')]) # Field name made lowercase.
    residence_street__c = models.TextField(verbose_name=u'Residence Street', db_column=u'Residence_Street__c', blank=True) # Field name made lowercase.
    residence_zip_postal_code__c = models.CharField(max_length=10, verbose_name=u'Residence Zip/Postal Code', db_column=u'Residence_Zip_Postal_Code__c', blank=True) # Field name made lowercase.
    spouse__c = models.CharField(max_length=255, verbose_name=u'Spouse', db_column=u'Spouse__c', blank=True) # Field name made lowercase.
    vin__c = models.CharField(max_length=255, verbose_name=u'VIN', db_column=u'VIN__c', blank=True) # Field name made lowercase.
    current_coverage__c = models.CharField(blank=True, max_length=4099, verbose_name=u'Current Coverage', db_column=u'Current_Coverage__c', choices=[(u'Commercial Auto', u'Commercial Auto'), (u'Business Owners', u'Business Owners'), (u'General Liability', u'General Liability'), (u'Commercial Umbrella', u'Commercial Umbrella'), (u'Workers Compensation', u'Workers Compensation'), (u'Commercial Property', u'Commercial Property'), (u'Package', u'Package'), (u'Personal Auto', u'Personal Auto'), (u'Inland Marine', u'Inland Marine'), (u'Homeowners', u'Homeowners'), (u'Umbrella', u'Umbrella'), (u'Watercraft', u'Watercraft')]) # Field name made lowercase.
    lead_type__c = models.CharField(blank=True, max_length=255, verbose_name=u'Lead Type', db_column=u'Lead_Type__c', choices=[(u'Personal', u'Personal'), (u'Commercial', u'Commercial')]) # Field name made lowercase.
    legal_entity__c = models.CharField(blank=True, max_length=255, verbose_name=u'Legal Entity', db_column=u'Legal_Entity__c', choices=[(u'Corporation', u'Corporation'), (u'Individual', u'Individual'), (u'Joint Venture', u'Joint Venture'), (u'LLC', u'LLC'), (u'Not-for-Profit Organization', u'Not-for-Profit Organization'), (u'Sole Proprietor', u'Sole Proprietor'), (u'Parternship', u'Parternship'), (u'Trust', u'Trust'), (u'Other', u'Other')]) # Field name made lowercase.
    date_business_started__c = models.DateField(null=True, verbose_name=u'Date Business Started', db_column=u'Date_Business_Started__c', blank=True) # Field name made lowercase.
    years_in_business__c = models.DecimalField(decimal_places=0, db_column=u'Years_in_Business__c', sf_read_only=models.READ_ONLY, max_digits=18, blank=True, null=True, verbose_name=u'Years in Business') # Field name made lowercase.
    no_of_members_and_managers__c = models.DecimalField(db_column=u'No_of_Members_and_Managers__c', decimal_places=0, max_digits=18, blank=True, null=True, verbose_name=u'No. of Members and Managers') # Field name made lowercase.
    customer_status__c = models.CharField(db_column=u'Customer_Status__c', choices=[(u'Application Completed', u'Application Completed'), (u'Application Incomplete', u'Application Incomplete'), (u'Contact Attempt 1', u'Contact Attempt 1'), (u'Contact Attempt 2', u'Contact Attempt 2'), (u'Contact Attempt 3', u'Contact Attempt 3'), (u'Contact Attempt 4', u'Contact Attempt 4'), (u'Contacted but not Quoted', u'Contacted but not Quoted'), (u'DNC', u'DNC'), (u'Medicaid Eligible', u'Medicaid Eligible'), (u'New (Time-Sensitive Lead)', u'New (Time-Sensitive Lead)'), (u'No Response (4x contacts)', u'No Response (4x contacts)'), (u'Not Interested', u'Not Interested'), (u'Quoted but not Sold', u'Quoted but not Sold'), (u'Bad Phone #', u'Bad Phone #'), (u'Test Lead', u'Test Lead'), (u'Self-Reliant', u'Self-Reliant'), (u'Prefers to Work with Broker or External Rep', u'Prefers to Work with Broker or External Rep'), (u'Has Coverage: See Current Carrier(s) Field', u'Has Coverage: See Current Carrier(s) Field'), (u'Pending HIXID', u'Pending HIXID')], max_length=255, blank=True, help_text=u'Customer Status for sales activity.', verbose_name=u'Customer Status') # Field name made lowercase.
    prequalified_by_text__c = models.CharField(max_length=100, verbose_name=u'Prequalified By Text', db_column=u'Prequalified_By_Text__c', blank=True) # Field name made lowercase.
    coverage_start_date_preferred__c = models.DateField(help_text=u'Date indicated by the customer as to when they want coverage to begin.', null=True, verbose_name=u'Coverage Start Date - Preferred', db_column=u'Coverage_Start_Date_Preferred__c', blank=True) # Field name made lowercase.
    quick_notes__c = models.TextField(help_text=u'Quick notes about contacts and special handling of lead', verbose_name=u'Contact Quick Notes', db_column=u'Quick_Notes__c', blank=True) # Field name made lowercase.
    converted_account_id__c = models.CharField(max_length=18, verbose_name=u'Converted Account Id', db_column=u'Converted_Account_Id__c', blank=True) # Field name made lowercase.
    original_owner_id__c = models.CharField(help_text=u'Original Owner ID prior to import into NHC Salesforce Tenant.', max_length=50, verbose_name=u'Original Owner ID', db_column=u'Original_Owner_ID__c', blank=True) # Field name made lowercase.
    original_last_modified_date__c = models.DateTimeField(help_text=u'Last Modified Date prior to importing into NHC Salesforce Tenant.', null=True, verbose_name=u'Original Last Modified Date', db_column=u'Original_Last_Modified_Date__c', blank=True) # Field name made lowercase.
    original_created_date__c = models.DateTimeField(help_text=u'Original Created Date from 1st Salesforce platform.', null=True, verbose_name=u'Original Created Date', db_column=u'Original_Created_Date__c', blank=True) # Field name made lowercase.
    original_object_id__c = models.CharField(help_text=u'Original Object ID in Insuremonkey Tenant prior to creation in NHC Tenant.', max_length=50, verbose_name=u'Original Object ID', db_column=u'Original_Object_ID__c', blank=True) # Field name made lowercase.
    original_owner_name__c = models.CharField(max_length=1300, verbose_name=u'Original Owner Name', sf_read_only=models.READ_ONLY, db_column=u'Original_Owner_Name__c', blank=True) # Field name made lowercase.
    benefits_specialist__c = models.ForeignKey('User', null=True, db_column=u'Benefits_Specialist__c', blank=True) # Field name made lowercase.
    enrollment_specialists__c = models.ForeignKey('User', null=True, db_column=u'Enrollment_Specialists__c', blank=True) # Field name made lowercase.
    employeed__c = models.BooleanField(help_text=u'Check if customer is currently employed.', verbose_name=u'Employeed', db_column=u'Employeed__c') # Field name made lowercase.
    subsidy_eligible__c = models.BooleanField(help_text=u'Check if the customer qualifies for a subsidy.', verbose_name=u'Subsidy Eligible', db_column=u'Subsidy_Eligible__c') # Field name made lowercase.
    preferred_language__c = models.CharField(db_column=u'Preferred_Language__c', choices=[(u'English', u'English'), (u'Spanish', u'Spanish')], max_length=255, blank=True, help_text=u'Used to indicate preferred language.', verbose_name=u'Preferred Language') # Field name made lowercase.
    original_last_modified_by__c = models.CharField(help_text=u'Originally last modified by UUID information.', max_length=50, verbose_name=u'Original Last Modified By', db_column=u'Original_Last_Modified_By__c', blank=True) # Field name made lowercase.
    original_last_modified_name__c = models.CharField(max_length=1300, verbose_name=u'Original Last Modified Name', sf_read_only=models.READ_ONLY, db_column=u'Original_Last_Modified_Name__c', blank=True) # Field name made lowercase.
    broker_information__c = models.ForeignKey('Contact', null=True, db_column=u'Broker_Information__c', blank=True) # Field name made lowercase.
    pending_broker_information__c = models.CharField(help_text=u'Used when broker information is not available in Salesforce, but broker indicates they are working with the customer.', max_length=100, verbose_name=u'Pending Broker Information', db_column=u'Pending_Broker_Information__c', blank=True) # Field name made lowercase.
    group_lead__c = models.BooleanField(help_text=u'Group Lead indicator for conversion.', verbose_name=u'Group Lead', db_column=u'Group_Lead__c') # Field name made lowercase.
    primary_dob__c = models.DateField(help_text=u'Primary insurer date of birth.', null=True, verbose_name=u'Primary DOB', db_column=u'Primary_DOB__c', blank=True) # Field name made lowercase.
    county__c = models.CharField(help_text=u'County of primary insured or company', max_length=80, verbose_name=u'County', db_column=u'County__c', blank=True) # Field name made lowercase.
    previously_insured__c = models.CharField(db_column=u'Previously_Insured__c', choices=[(u'Yes', u'Yes'), (u'No', u'No')], max_length=255, blank=True, help_text=u'Indicated if the customer was previously insured.', verbose_name=u'Previously Insured') # Field name made lowercase.
    network_info__c = models.TextField(help_text=u'Debug information for system administrator.', verbose_name=u'Network Info', db_column=u'Network_Info__c', blank=True) # Field name made lowercase.
    pre_existing_conditions__c = models.BooleanField(help_text=u'Check if pre-existing conditions exist. Legacy from IM.', verbose_name=u'Pre-existing Conditions', db_column=u'Pre_existing_Conditions__c') # Field name made lowercase.
    tobacco_user__c = models.BooleanField(help_text=u'Check to indicate primary insurer uses tobacco products', verbose_name=u'Tobacco User', db_column=u'Tobacco_User__c') # Field name made lowercase.
    specific_source__c = models.CharField(db_column=u'Specific_Source__c', choices=[(u'Nevada Health Co-Op', u'Nevada Health Co-Op'), (u'Nevada Health Link', u'Nevada Health Link'), (u'Nevada Health Link Pend Campaign', u'Nevada Health Link Pend Campaign')], max_length=255, blank=True, help_text=u'IM Legacy Field', verbose_name=u'Specific Source') # Field name made lowercase.
    medications__c = models.CharField(help_text=u'IM Legacy Field', max_length=150, verbose_name=u'Medications', db_column=u'Medications__c', blank=True) # Field name made lowercase.
    prior_carrier__c = models.CharField(help_text=u'IM Legacy', max_length=80, verbose_name=u'Prior Carrier', db_column=u'Prior_Carrier__c', blank=True) # Field name made lowercase.
    sub_account_of__c = models.ForeignKey('Account', null=True, db_column=u'Sub_account_of__c', blank=True) # Field name made lowercase.
    initial_contact_date__c = models.DateField(null=True, verbose_name=u'Initial Contact Date', db_column=u'Initial_Contact_Date__c', blank=True) # Field name made lowercase.
    initial_contact__c = models.CharField(blank=True, max_length=255, verbose_name=u'Initial Contact', db_column=u'Initial_Contact__c', choices=[(u'Quote Form', u'Quote Form'), (u'Call-In', u'Call-In'), (u'Walk In', u'Walk In')]) # Field name made lowercase.
    number_of_people_in_household__c = models.DecimalField(db_column=u'Number_of_People_in_Household__c', decimal_places=0, max_digits=2, blank=True, null=True, verbose_name=u'Number of People in Household') # Field name made lowercase.
    age_of_the_first_adult__c = models.DecimalField(db_column=u'Age_of_the_first_adult__c', decimal_places=0, max_digits=3, blank=True, help_text=u'For subsidy calculation and reporting maintain subsidy information here.', null=True, verbose_name=u'Age of the first adult') # Field name made lowercase.
    age_of_spouse_domestic_partner__c = models.DecimalField(db_column=u'Age_of_Spouse_Domestic_Partner__c', decimal_places=0, max_digits=3, blank=True, help_text=u'For subsidy calculation and reporting maintain subsidy information here.', null=True, verbose_name=u'Age of Spouse/Domestic Partner') # Field name made lowercase.
    number_of_children_under_age_21__c = models.DecimalField(db_column=u'Number_of_Children_Under_Age_21__c', decimal_places=0, max_digits=3, blank=True, help_text=u'For subsidy calculation and reporting maintain subsidy information here.', null=True, verbose_name=u'Number of Children Under Age 21') # Field name made lowercase.
    number_of_children_age_21_25__c = models.DecimalField(db_column=u'Number_of_Children_age_21_25__c', decimal_places=0, max_digits=3, blank=True, help_text=u'For subsidy calculation and reporting maintain subsidy information here.', null=True, verbose_name=u'Number of Children age 21 - 25') # Field name made lowercase.
    last_action__c = models.CharField(help_text=u'This field is used to update the customer status during log-a-call.\r\n\r\nIf the fields has value after log-a-call was attempted and the log-a-call failed, remove the value and trying logging the call again. Also remove the value for Updated via Task Action', max_length=75, verbose_name=u'Last Action', db_column=u'Last_Action__c', blank=True) # Field name made lowercase.
    follow_up_status__c = models.CharField(blank=True, max_length=255, verbose_name=u'Follow Up Status', db_column=u'Follow_Up_Status__c', choices=[(u'Contact Attempt 1', u'Contact Attempt 1'), (u'Contact Attempt 2', u'Contact Attempt 2'), (u'Contact Attempt 3', u'Contact Attempt 3'), (u'Contact Attempt 4', u'Contact Attempt 4'), (u'Contact Attempt 5', u'Contact Attempt 5'), (u'Contact Attempt 6', u'Contact Attempt 6')]) # Field name made lowercase.
    updated_via_task_action__c = models.BooleanField(help_text=u'This field is used to update the customer status during log-a-call.\r\n\r\nIf the fields has value after log-a-call was attempted and the log-a-call failed, remove the value and trying logging the call again. Also remove the value for Last Action', verbose_name=u'Updated via Task Action', db_column=u'Updated_via_Task_Action__c') # Field name made lowercase.
    auto_archived__c = models.BooleanField(verbose_name=u'Auto Archived', db_column=u'Auto_Archived__c') # Field name made lowercase.
    application_completed_notes__c = models.CharField(blank=True, max_length=255, verbose_name=u'Application Completed Notes', db_column=u'Application_Completed_Notes__c', choices=[(u'On Exchange', u'On Exchange'), (u'Off Exchange', u'Off Exchange')]) # Field name made lowercase.
    on_exchange_app_completed_by__c = models.CharField(blank=True, max_length=255, verbose_name=u'On Exchange App Completed By', db_column=u'On_Exchange_App_Completed_By__c', choices=[(u'Agent', u'Agent'), (u'Customer', u'Customer')]) # Field name made lowercase.
    prequalified_by__c = models.CharField(blank=True, max_length=255, verbose_name=u'Prequalified  By', db_column=u'Prequalified_By__c', choices=[(u'Craig Fox', u'Craig Fox'), (u'Mara Cabral', u'Mara Cabral'), (u'Haidee Tomlinson', u'Haidee Tomlinson'), (u'Jessika Nighorn', u'Jessika Nighorn'), (u'Cindy Leslie', u'Cindy Leslie'), (u'Maribel Vasquez', u'Maribel Vasquez'), (u'Chris Melchor', u'Chris Melchor')]) # Field name made lowercase.
    height__c = models.CharField(help_text=u'IM Legacy', max_length=10, verbose_name=u'Height', db_column=u'Height__c', blank=True) # Field name made lowercase.
    weight__c = models.CharField(help_text=u'IM Legacy', max_length=10, verbose_name=u'Weight', db_column=u'Weight__c', blank=True) # Field name made lowercase.
    last_activity__c = models.DateField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Activity', db_column=u'Last_Activity__c', blank=True) # Field name made lowercase.
    original_einstein__c = models.CharField(max_length=80, verbose_name=u'Original Einstein', db_column=u'Original_Einstein__c', blank=True) # Field name made lowercase.
    auto_archived_date__c = models.DateField(null=True, verbose_name=u'Auto Archived Date', db_column=u'Auto_Archived_Date__c', blank=True) # Field name made lowercase.
    converted_contact_id__c = models.CharField(max_length=18, verbose_name=u'Converted Contact Id', db_column=u'Converted_Contact_Id__c', blank=True) # Field name made lowercase.
    converted_opportunity_id__c = models.CharField(max_length=18, verbose_name=u'Converted Opportunity Id', db_column=u'Converted_Opportunity_Id__c', blank=True) # Field name made lowercase.
    migrated__c = models.BooleanField(help_text=u'Was this record migrated from old tenant?', verbose_name=u'Migrated', db_column=u'Migrated__c') # Field name made lowercase.
    assisting_agent__c = models.CharField(max_length=80, verbose_name=u'Assisting Agent', db_column=u'Assisting_Agent__c', blank=True) # Field name made lowercase.
    pending_follow_up_date__c = models.DateField(help_text=u'Follow up date for oldest open task.', null=True, verbose_name=u'Pending Follow Up Date', db_column=u'Pending_Follow_Up_Date__c', blank=True) # Field name made lowercase.
    mkto2__acquisition_date__c = models.DateTimeField(null=True, verbose_name=u'Acquisition Date', db_column=u'mkto2__Acquisition_Date__c', blank=True) # Field name made lowercase.
    mkto2__acquisition_program_id__c = models.DecimalField(db_column=u'mkto2__Acquisition_Program_Id__c', decimal_places=0, max_digits=18, blank=True, null=True, verbose_name=u'Acquisition Program Id') # Field name made lowercase.
    mkto2__acquisition_program__c = models.CharField(max_length=255, verbose_name=u'Acquisition Program', db_column=u'mkto2__Acquisition_Program__c', blank=True) # Field name made lowercase.
    mkto2__inferred_city__c = models.CharField(max_length=255, verbose_name=u'Inferred City', db_column=u'mkto2__Inferred_City__c', blank=True) # Field name made lowercase.
    mkto2__inferred_company__c = models.CharField(max_length=255, verbose_name=u'Inferred Company', db_column=u'mkto2__Inferred_Company__c', blank=True) # Field name made lowercase.
    mkto2__inferred_country__c = models.CharField(max_length=255, verbose_name=u'Inferred Country', db_column=u'mkto2__Inferred_Country__c', blank=True) # Field name made lowercase.
    mkto2__inferred_metropolitan_area__c = models.CharField(max_length=255, verbose_name=u'Inferred Metropolitan Area', db_column=u'mkto2__Inferred_Metropolitan_Area__c', blank=True) # Field name made lowercase.
    mkto2__inferred_phone_area_code__c = models.CharField(max_length=255, verbose_name=u'Inferred Phone Area Code', db_column=u'mkto2__Inferred_Phone_Area_Code__c', blank=True) # Field name made lowercase.
    mkto2__inferred_postal_code__c = models.CharField(max_length=255, verbose_name=u'Inferred Postal Code', db_column=u'mkto2__Inferred_Postal_Code__c', blank=True) # Field name made lowercase.
    mkto2__inferred_state_region__c = models.CharField(max_length=255, verbose_name=u'Inferred State Region', db_column=u'mkto2__Inferred_State_Region__c', blank=True) # Field name made lowercase.
    mkto2__lead_score__c = models.DecimalField(db_column=u'mkto2__Lead_Score__c', decimal_places=0, max_digits=18, blank=True, null=True, verbose_name=u'Lead Score') # Field name made lowercase.
    mkto2__original_referrer__c = models.CharField(max_length=255, verbose_name=u'Original Referrer', db_column=u'mkto2__Original_Referrer__c', blank=True) # Field name made lowercase.
    mkto2__original_search_engine__c = models.CharField(max_length=255, verbose_name=u'Original Search Engine', db_column=u'mkto2__Original_Search_Engine__c', blank=True) # Field name made lowercase.
    mkto2__original_search_phrase__c = models.CharField(max_length=255, verbose_name=u'Original Search Phrase', db_column=u'mkto2__Original_Search_Phrase__c', blank=True) # Field name made lowercase.
    mkto2__original_source_info__c = models.TextField(verbose_name=u'Original Source Info', db_column=u'mkto2__Original_Source_Info__c', blank=True) # Field name made lowercase.
    mkto2__original_source_type__c = models.CharField(max_length=255, verbose_name=u'Original Source Type', db_column=u'mkto2__Original_Source_Type__c', blank=True) # Field name made lowercase.
    mkto_si__hidedate__c = models.DateField(null=True, verbose_name=u'Hide Date', db_column=u'mkto_si__HideDate__c', blank=True) # Field name made lowercase.
    mkto_si__last_interesting_moment_date__c = models.DateTimeField(null=True, verbose_name=u'Last Interesting Moment Date', db_column=u'mkto_si__Last_Interesting_Moment_Date__c', blank=True) # Field name made lowercase.
    mkto_si__last_interesting_moment_desc__c = models.TextField(verbose_name=u'Last Interesting Moment Desc', db_column=u'mkto_si__Last_Interesting_Moment_Desc__c', blank=True) # Field name made lowercase.
    mkto_si__last_interesting_moment_source__c = models.CharField(max_length=100, verbose_name=u'Last Interesting Moment Source', db_column=u'mkto_si__Last_Interesting_Moment_Source__c', blank=True) # Field name made lowercase.
    mkto_si__last_interesting_moment_type__c = models.CharField(max_length=100, verbose_name=u'Last Interesting Moment Type', db_column=u'mkto_si__Last_Interesting_Moment_Type__c', blank=True) # Field name made lowercase.
    mkto_si__last_interesting_moment__c = models.CharField(max_length=1300, verbose_name=u'Last Interesting Moment', sf_read_only=models.READ_ONLY, db_column=u'mkto_si__Last_Interesting_Moment__c', blank=True) # Field name made lowercase.
    mkto_si__msicontactid__c = models.ForeignKey('Contact', null=True, db_column=u'mkto_si__MSIContactId__c', blank=True) # Field name made lowercase.
    mkto_si__priority__c = models.DecimalField(db_column=u'mkto_si__Priority__c', decimal_places=0, max_digits=18, blank=True, null=True, verbose_name=u'Priority') # Field name made lowercase.
    mkto_si__relative_score_value__c = models.DecimalField(db_column=u'mkto_si__Relative_Score_Value__c', decimal_places=0, max_digits=4, blank=True, null=True, verbose_name=u'Relative Score Value') # Field name made lowercase.
    mkto_si__relative_score__c = models.CharField(max_length=1300, verbose_name=u'Relative Score', sf_read_only=models.READ_ONLY, db_column=u'mkto_si__Relative_Score__c', blank=True) # Field name made lowercase.
    mkto_si__urgency_value__c = models.DecimalField(db_column=u'mkto_si__Urgency_Value__c', decimal_places=0, max_digits=4, blank=True, null=True, verbose_name=u'Urgency Value') # Field name made lowercase.
    mkto_si__urgency__c = models.CharField(max_length=1300, verbose_name=u'Urgency', sf_read_only=models.READ_ONLY, db_column=u'mkto_si__Urgency__c', blank=True) # Field name made lowercase.
    mkto_si__view_in_marketo__c = models.CharField(max_length=1300, verbose_name=u'View in Marketo', sf_read_only=models.READ_ONLY, db_column=u'mkto_si__View_in_Marketo__c', blank=True) # Field name made lowercase.
    current_carrier_s__c = models.CharField(db_column=u'Current_Carrier_s__c', choices=[(u'United', u'United'), (u'Sierra', u'Sierra'), (u'HPN', u'HPN'), (u'Coventry', u'Coventry'), (u'St Mary\u2019s', u'St Mary\u2019s'), (u'Aetna', u'Aetna'), (u'Assurant', u'Assurant')], max_length=4099, blank=True, help_text=u'Use this field if the lead has coverage but was inquiring about enrolling through NHCO.', verbose_name=u'Current Carrier(s)') # Field name made lowercase.
    subscriberhixid__c = models.CharField(help_text=u'The ID from the Nevada Health Link', max_length=60, verbose_name=u'SubscriberHIXID', db_column=u'SubscriberHIXID__c', blank=True) # Field name made lowercase.
    nhl_username__c = models.CharField(max_length=32, verbose_name=u'NHL Username', db_column=u'NHL_Username__c', blank=True) # Field name made lowercase.
    nhl_password__c = models.CharField(max_length=32, verbose_name=u'NHL Password', db_column=u'NHL_Password__c', blank=True) # Field name made lowercase.
    memberid__c = models.CharField(max_length=50, verbose_name=u'Member Id', db_column=u'MemberId__c', blank=True) # Field name made lowercase.
    address__c = models.CharField(max_length=1300, verbose_name=u'Address', sf_read_only=models.READ_ONLY, db_column=u'Address__c', blank=True) # Field name made lowercase.
    isassignedtoqueue__c = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Is Assigned to Queue?', db_column=u'IsAssignedToQueue__c') # Field name made lowercase.
    isdefaultleadowner__c = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Is Default Lead Owner?', db_column=u'IsDefaultLeadOwner__c') # Field name made lowercase.
    leadscore__c = models.DecimalField(db_column=u'LeadScore__c', decimal_places=0, max_digits=3, blank=True, null=True, verbose_name=u'Lead Score') # Field name made lowercase.
    federationid__c = models.CharField(help_text=u'Associated with the Federation ID on IM portal for login credentials', max_length=40, verbose_name=u'FederationID', db_column=u'FederationID__c', blank=True) # Field name made lowercase.
    externalid__c = models.CharField(max_length=32, unique=True, verbose_name=u'ExternalID', db_column=u'ExternalID__c', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Lead'
        verbose_name = 'Lead'
        verbose_name_plural = 'Leads'
        # keyPrefix = '00Q'

class Leadfeed(models.Model):
    parentid = models.ForeignKey('Lead', db_column=u'ParentId') # Field name made lowercase.
    type = models.CharField(db_column=u'Type', choices=[(u'TrackedChange', u'Tracked Change'), (u'UserStatus', u'User Status'), (u'TextPost', u'Text Post'), (u'AdvancedTextPost', u'Advanced Text Post'), (u'LinkPost', u'Link Post'), (u'ContentPost', u'Content Post'), (u'PollPost', u'Poll'), (u'RypplePost', u'Work.com Thanks'), (u'ProfileSkillPost', u'Profile Skill Post'), (u'DashboardComponentSnapshot', u'Dashboard Component Snapshot'), (u'ApprovalPost', u'Approval Post'), (u'CaseCommentPost', u'Case Comment Feed'), (u'ReplyPost', u'Reply Post'), (u'EmailMessageEvent', u'Email Message Feed'), (u'CallLogPost', u'Call Log Feed'), (u'ChangeStatusPost', u'Change Status Feed'), (u'AttachArticleEvent', u'Attached Article'), (u'MilestoneEvent', u'Milestone Event'), (u'ActivityEvent', u'Activity Change'), (u'ChatTranscriptPost', u'Chat Transcript Post'), (u'CollaborationGroupCreated', u'Collaboration Group Created'), (u'CollaborationGroupUnarchived', u'Collaboration Group Reactivated'), (u'SocialPost', u'Social Post'), (u'QuestionPost', u'Question Post'), (u'FacebookPost', u'Facebook Post'), (u'BasicTemplateFeedItem', u'Basic Template Post'), (u'CreateRecordEvent', u'Created Record'), (u'CanvasPost', u'Canvas'), (u'AnnouncementPost', u'a')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Feed Item Type') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    commentcount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Comment Count', db_column=u'CommentCount') # Field name made lowercase.
    likecount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Like Count', db_column=u'LikeCount') # Field name made lowercase.
    title = models.CharField(max_length=255, verbose_name=u'Title', sf_read_only=models.READ_ONLY, db_column=u'Title', blank=True) # Field name made lowercase.
    body = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Body', db_column=u'Body', blank=True) # Field name made lowercase.
    linkurl = models.URLField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Link Url', db_column=u'LinkUrl', blank=True) # Field name made lowercase.
    relatedrecordid = models.ForeignKey('Contentversion', null=True, db_column=u'RelatedRecordId', blank=True) # Field name made lowercase.
    contentdata = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Content Data', db_column=u'ContentData', blank=True) # Field name made lowercase.
    contentfilename = models.CharField(max_length=255, verbose_name=u'Content File Name', sf_read_only=models.READ_ONLY, db_column=u'ContentFileName', blank=True) # Field name made lowercase.
    contentdescription = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Content Description', db_column=u'ContentDescription', blank=True) # Field name made lowercase.
    contenttype = models.CharField(max_length=120, verbose_name=u'Content File Type', sf_read_only=models.READ_ONLY, db_column=u'ContentType', blank=True) # Field name made lowercase.
    contentsize = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Content Size', db_column=u'ContentSize', blank=True) # Field name made lowercase.
    insertedbyid = models.ForeignKey('User', null=True, db_column=u'InsertedById', blank=True) # Field name made lowercase.
    networkscope = models.CharField(db_column=u'NetworkScope', choices=[(u'AllNetworks', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Network Scope') # Field name made lowercase.
    visibility = models.CharField(db_column=u'Visibility', choices=[(u'AllUsers', None), (u'InternalUsers', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Visibility') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'LeadFeed'
        verbose_name = 'Lead Feed'
        verbose_name_plural = 'Lead Feed'
        # keyPrefix = 'None'

class Leadhistory(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    leadid = models.ForeignKey('Lead', db_column=u'LeadId') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    field = models.CharField(max_length=255, verbose_name=u'Changed Field', sf_read_only=models.READ_ONLY, db_column=u'Field', choices=[(u'Address', None), (u'Age_of_Spouse_Domestic_Partner__c', None), (u'Age_of_the_first_adult__c', None), (u'Annual_Mileage__c', None), (u'AnnualRevenue', None), (u'Application_Completed_Notes__c', None), (u'Assisting_Agent__c', None), (u'At_This_Address_Since__c', None), (u'Auto_Archived__c', None), (u'Auto_Archived_Date__c', None), (u'Benefits_Specialist__c', None), (u'Broker_Information__c', None), (u'Car_Make__c', None), (u'Car_Model__c', None), (u'Car_Year__c', None), (u'City', None), (u'Company', None), (u'CompanyDunsNumber', None), (u'Converted_Account_Id__c', None), (u'Converted_Contact_Id__c', None), (u'Converted_Opportunity_Id__c', None), (u'Country', None), (u'County__c', None), (u'Coverage_Amount__c', None), (u'Coverage_Interests__c', None), (u'Coverage_Start_Date_Preferred__c', None), (u'created', u'Created.'), (u'Current_Annual_Premium__c', None), (u'Current_Carrier_s__c', None), (u'Current_Coverage__c', None), (u'Current_Mileage__c', None), (u'Customer_Status__c', None), (u'Date_Business_Started__c', None), (u'Date_of_Birth__c', None), (u'Description', None), (u'DoNotCall', None), (u'Driver_s_License_Number__c', None), (u'Driver_s_License_State__c', None), (u'Education__c', None), (u'Email', None), (u'EmailBouncedDate', None), (u'EmailBouncedReason', None), (u'Employeed__c', None), (u'Enrollment_Specialists__c', None), (u'Estimated_Personal_Income_Annual__c', None), (u'Eve_Phone__c', None), (u'ExternalID__c', None), (u'Fax', None), (u'FederationID__c', None), (u'feedEvent', u'Feed event'), (u'FirstName', None), (u'Follow_Up_Status__c', None), (u'Gender__c', None), (u'Group_Lead__c', None), (u'HasOptedOutOfEmail', None), (u'HasOptedOutOfFax', None), (u'Height__c', None), (u'Industry', None), (u'Initial_Contact__c', None), (u'Initial_Contact_Date__c', None), (u'IsUnreadByOwner', None), (u'Jigsaw', None), (u'Last_Action__c', None), (u'LastName', None), (u'Latitude', None), (u'Lead_Type__c', None), (u'leadConverted', u'Lead Converted.'), (u'leadMerged', u'Lead Merged'), (u'LeadScore__c', None), (u'LeadSource', None), (u'Legal_Entity__c', None), (u'Longitude', None), (u'Marital_Status__c', None), (u'Medications__c', None), (u'MemberId__c', None), (u'Migrated__c', None), (u'mkto_si__HideDate__c', None), (u'mkto_si__Last_Interesting_Moment_Date__c', None), (u'mkto_si__Last_Interesting_Moment_Desc__c', None), (u'mkto_si__Last_Interesting_Moment_Source__c', None), (u'mkto_si__Last_Interesting_Moment_Type__c', None), (u'mkto_si__MSIContactId__c', None), (u'mkto_si__Priority__c', None), (u'mkto_si__Relative_Score_Value__c', None), (u'mkto_si__Urgency_Value__c', None), (u'mkto2__Acquisition_Date__c', None), (u'mkto2__Acquisition_Program__c', None), (u'mkto2__Acquisition_Program_Id__c', None), (u'mkto2__Inferred_City__c', None), (u'mkto2__Inferred_Company__c', None), (u'mkto2__Inferred_Country__c', None), (u'mkto2__Inferred_Metropolitan_Area__c', None), (u'mkto2__Inferred_Phone_Area_Code__c', None), (u'mkto2__Inferred_Postal_Code__c', None), (u'mkto2__Inferred_State_Region__c', None), (u'mkto2__Lead_Score__c', None), (u'mkto2__Original_Referrer__c', None), (u'mkto2__Original_Search_Engine__c', None), (u'mkto2__Original_Search_Phrase__c', None), (u'mkto2__Original_Source_Info__c', None), (u'mkto2__Original_Source_Type__c', None), (u'MobilePhone', None), (u'Name', None), (u'Network_Info__c', None), (u'NHL_Password__c', None), (u'NHL_Username__c', None), (u'No_of_Members_and_Managers__c', None), (u'Number_of_Children_age_21_25__c', None), (u'Number_of_Children_Under_Age_21__c', None), (u'Number_of_People_in_Household__c', None), (u'NumberOfEmployees', None), (u'Occupation__c', None), (u'On_Exchange_App_Completed_By__c', None), (u'Original_Created_Date__c', None), (u'Original_Einstein__c', None), (u'Original_Last_Modified_By__c', None), (u'Original_Last_Modified_Date__c', None), (u'Original_Object_ID__c', None), (u'Original_Owner_ID__c', None), (u'Owner', None), (u'ownerAccepted', u'Owner (Accepted)'), (u'ownerAssignment', u'Owner (Assignment)'), (u'Owns_Residence__c', None), (u'Pending_Broker_Information__c', None), (u'Pending_Follow_Up_Date__c', None), (u'Phone', None), (u'Policy_Expiration_Date__c', None), (u'PostalCode', None), (u'Pre_existing_Conditions__c', None), (u'Preferred_Language__c', None), (u'Preferred_Method_of_Contact__c', None), (u'Prequalified_By__c', None), (u'Prequalified_By_Text__c', None), (u'Previously_Insured__c', None), (u'Primary_DOB__c', None), (u'Prior_Carrier__c', None), (u'Property_Type__c', None), (u'Quick_Notes__c', None), (u'Rating', None), (u'locked', u'Record locked.'), (u'RecordType', None), (u'unlocked', u'Record unlocked.'), (u'Registered_State__c', None), (u'Residence_City__c', None), (u'Residence_Country__c', None), (u'Residence_State__c', None), (u'Residence_Street__c', None), (u'Residence_Zip_Postal_Code__c', None), (u'Salutation', None), (u'Specific_Source__c', None), (u'Spouse__c', None), (u'State', None), (u'Status', None), (u'Street', None), (u'Sub_account_of__c', None), (u'Subscriber__c', None), (u'SubscriberHIXID__c', None), (u'Subsidy_Eligible__c', None), (u'Title', None), (u'Tobacco_User__c', None), (u'Updated_via_Task_Action__c', None), (u'VIN__c', None), (u'Website', None), (u'Weight__c', None)]) # Field name made lowercase.
    oldvalue = models.CharField(max_length=255, verbose_name=u'Old Value', sf_read_only=models.READ_ONLY, db_column=u'OldValue', blank=True) # Field name made lowercase.
    newvalue = models.CharField(max_length=255, verbose_name=u'New Value', sf_read_only=models.READ_ONLY, db_column=u'NewValue', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'LeadHistory'
        verbose_name = 'Lead History'
        verbose_name_plural = 'Lead History'
        # keyPrefix = 'None'

class Leadshare(models.Model):
    leadid = models.ForeignKey('Lead', db_column=u'LeadId') # Field name made lowercase.
    userorgroupid = models.ForeignKey('Group', db_column=u'UserOrGroupId') # Field name made lowercase.
    leadaccesslevel = models.CharField(max_length=40, verbose_name=u'Lead Access', sf_read_only=models.READ_ONLY, db_column=u'LeadAccessLevel', choices=[(u'Read', u'Read Only'), (u'Edit', u'Read/Write'), (u'All', u'Owner')]) # Field name made lowercase.
    rowcause = models.CharField(db_column=u'RowCause', choices=[(u'Owner', u'Owner'), (u'Manual', u'Manual Sharing'), (u'Rule', u'Sharing Rule'), (u'ImplicitChild', u'Account Sharing'), (u'ImplicitParent', u'Associated record owner or sharing'), (u'Team', u'Sales Team'), (u'Territory', u'Territory Assignment Rule'), (u'TerritoryManual', u'Territory Manual'), (u'TerritoryRule', u'Territory Sharing Rule')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Row Cause') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'LeadShare'
        verbose_name = 'Lead Share'
        verbose_name_plural = 'Lead Share'
        # keyPrefix = '01o'

class Leadstatus(models.Model):
    masterlabel = models.CharField(max_length=255, verbose_name=u'Master Label', sf_read_only=models.READ_ONLY, db_column=u'MasterLabel', blank=True) # Field name made lowercase.
    sortorder = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Sort Order', db_column=u'SortOrder', blank=True) # Field name made lowercase.
    isdefault = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Is Default', db_column=u'IsDefault') # Field name made lowercase.
    isconverted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Is Converted', db_column=u'IsConverted') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'LeadStatus'
        verbose_name = 'Lead Status Value'
        verbose_name_plural = 'Lead Status Value'
        # keyPrefix = 'None'

class Loginhistory(models.Model):
    userid = models.ForeignKey('User', null=True, db_column=u'UserId', blank=True) # Field name made lowercase.
    logintime = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Login Time', db_column=u'LoginTime') # Field name made lowercase.
    logintype = models.CharField(max_length=1, verbose_name=u'Login Type', sf_read_only=models.READ_ONLY, db_column=u'LoginType') # Field name made lowercase.
    sourceip = models.CharField(max_length=39, verbose_name=u'Source IP', sf_read_only=models.READ_ONLY, db_column=u'SourceIp', blank=True) # Field name made lowercase.
    loginurl = models.CharField(max_length=120, verbose_name=u'Login URL', sf_read_only=models.READ_ONLY, db_column=u'LoginUrl', blank=True) # Field name made lowercase.
    networkid = models.ForeignKey('Network', null=True, db_column=u'NetworkId', blank=True) # Field name made lowercase.
    browser = models.CharField(max_length=64, verbose_name=u'Browser', sf_read_only=models.READ_ONLY, db_column=u'Browser', blank=True) # Field name made lowercase.
    platform = models.CharField(max_length=64, verbose_name=u'Platform', sf_read_only=models.READ_ONLY, db_column=u'Platform', blank=True) # Field name made lowercase.
    status = models.CharField(max_length=128, verbose_name=u'Status', sf_read_only=models.READ_ONLY, db_column=u'Status', blank=True) # Field name made lowercase.
    application = models.CharField(max_length=64, verbose_name=u'Application', sf_read_only=models.READ_ONLY, db_column=u'Application', blank=True) # Field name made lowercase.
    clientversion = models.CharField(max_length=64, verbose_name=u'Client Version', sf_read_only=models.READ_ONLY, db_column=u'ClientVersion', blank=True) # Field name made lowercase.
    apitype = models.CharField(max_length=64, verbose_name=u'API Type', sf_read_only=models.READ_ONLY, db_column=u'ApiType', blank=True) # Field name made lowercase.
    apiversion = models.CharField(max_length=32, verbose_name=u'API Version', sf_read_only=models.READ_ONLY, db_column=u'ApiVersion', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'LoginHistory'
        verbose_name = 'Login History'
        verbose_name_plural = 'Login History'
        # keyPrefix = '0Ya'

class Loginip(models.Model):
    usersid = models.ForeignKey('User', db_column=u'UsersId') # Field name made lowercase.
    sourceip = models.CharField(max_length=39, verbose_name=u'Source IP', sf_read_only=models.READ_ONLY, db_column=u'SourceIp', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    isauthenticated = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'IsAuthenticated', db_column=u'IsAuthenticated') # Field name made lowercase.
    challengesentdate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Challenge SentDate', db_column=u'ChallengeSentDate', blank=True) # Field name made lowercase.
    challengemethod = models.CharField(db_column=u'ChallengeMethod', choices=[(u'Email', None), (u'SMS', None), (u'TOTP_CHOICE', None), (u'TOTP_ONLY', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Challenge Method') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'LoginIp'
        verbose_name = 'Login IP'
        verbose_name_plural = 'Login IP'
        # keyPrefix = '710'

class Mailmergetemplate(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'Name', db_column=u'Name') # Field name made lowercase.
    description = models.CharField(max_length=255, verbose_name=u'Description', db_column=u'Description', blank=True) # Field name made lowercase.
    filename = models.CharField(max_length=255, verbose_name=u'File', sf_read_only=models.NOT_UPDATEABLE, db_column=u'Filename') # Field name made lowercase.
    bodylength = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Body Length', db_column=u'BodyLength', blank=True) # Field name made lowercase.
    body = models.TextField(sf_read_only=models.NOT_UPDATEABLE, verbose_name=u'Body', db_column=u'Body') # Field name made lowercase.
    lastuseddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Used Date', db_column=u'LastUsedDate', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'MailmergeTemplate'
        verbose_name = 'Mail Merge Template'
        verbose_name_plural = 'Mail Merge Template'
        # keyPrefix = '01H'

class MedicalManagementHistory(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    parentid = models.ForeignKey('MedicalManagementC', db_column=u'ParentId') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    field = models.CharField(max_length=255, verbose_name=u'Changed Field', sf_read_only=models.READ_ONLY, db_column=u'Field', choices=[(u'Account__c', None), (u'Alert_Notification__c', None), (u'Case_Management__c', None), (u'cloneComments__c', None), (u'Cloned_From__c', None), (u'created', u'Created.'), (u'Disease_Management__c', None), (u'Diseased__c', None), (u'Eligibility_Confirmed__c', None), (u'End_of_Hospitalization__c', None), (u'End_of_Ongoing_Treatment__c', None), (u'Family_Member__c', None), (u'feedEvent', u'Feed event'), (u'Hospital__c', None), (u'Hospitalization__c', None), (u'Hospitalization_Diagnostic_Code__c', None), (u'isCloned__c', None), (u'isVIPAccount__c', None), (u'Main_Diagnosis_for_Treatment__c', None), (u'Medication_Trigger_Email__c', None), (u'Medication_Trigger_Reason__c', None), (u'Name', None), (u'Ongoing_Diagnostic_Code__c', None), (u'Ongoing_Treatment__c', None), (u'Outpatient_Diagnostic_Code__c', None), (u'ownerAccepted', u'Owner (Accepted)'), (u'ownerAssignment', u'Owner (Assignment)'), (u'Reason_for_Hospitalization__c', None), (u'Receiving_Outpatient_Therapy__c', None), (u'locked', u'Record locked.'), (u'unlocked', u'Record unlocked.'), (u'Referred_Out_To__c', None), (u'Resolution_of_Treatment__c', None), (u'Send_Campaign_Emails__c', None), (u'Start_of_Hospitalization__c', None), (u'Start_of_Ongoing_Treatment__c', None), (u'Treatment_Facility__c', None), (u'Type_of_Outpatient_Treatment__c', None)]) # Field name made lowercase.
    oldvalue = models.CharField(max_length=255, verbose_name=u'Old Value', sf_read_only=models.READ_ONLY, db_column=u'OldValue', blank=True) # Field name made lowercase.
    newvalue = models.CharField(max_length=255, verbose_name=u'New Value', sf_read_only=models.READ_ONLY, db_column=u'NewValue', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Medical_Management__History'
        verbose_name = 'History: Medical Management'
        verbose_name_plural = 'History: Medical Management'
        # keyPrefix = 'None'

class MedicalManagementC(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'Medical Condition', sf_read_only=models.READ_ONLY, db_column=u'Name') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    lastactivitydate = models.DateField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Activity Date', db_column=u'LastActivityDate', blank=True) # Field name made lowercase.
    lastvieweddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Viewed Date', db_column=u'LastViewedDate', blank=True) # Field name made lowercase.
    lastreferenceddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Referenced Date', db_column=u'LastReferencedDate', blank=True) # Field name made lowercase.
    account__c = models.ForeignKey('Account', db_column=u'Account__c') # Field name made lowercase.
    end_of_hospitalization__c = models.DateField(null=True, verbose_name=u'End of Hospitalization', db_column=u'End_of_Hospitalization__c', blank=True) # Field name made lowercase.
    end_of_ongoing_treatment__c = models.DateField(null=True, verbose_name=u'End of Ongoing Treatment', db_column=u'End_of_Ongoing_Treatment__c', blank=True) # Field name made lowercase.
    family_member__c = models.ForeignKey('FamilyC', null=True, db_column=u'Family_Member__c', blank=True) # Field name made lowercase.
    hospital__c = models.CharField(max_length=75, verbose_name=u'Hospital', db_column=u'Hospital__c', blank=True) # Field name made lowercase.
    hospitalization__c = models.BooleanField(help_text=u'Check if the member is currently hospitalized or if they are scheduling a hospital stay.', verbose_name=u'Hospitalization', db_column=u'Hospitalization__c') # Field name made lowercase.
    main_diagnosis_for_treatment__c = models.CharField(max_length=75, verbose_name=u'Main Diagnosis for Treatment', db_column=u'Main_Diagnosis_for_Treatment__c', blank=True) # Field name made lowercase.
    medication_trigger_email__c = models.BooleanField(verbose_name=u'Medication Trigger Email', db_column=u'Medication_Trigger_Email__c') # Field name made lowercase.
    medication_trigger_reason__c = models.CharField(blank=True, max_length=255, verbose_name=u'Medication Trigger Reason', db_column=u'Medication_Trigger_Reason__c', choices=[(u'Late Prescription Notification', u'Late Prescription Notification'), (u'Late Prescription Follow Up', u'Late Prescription Follow Up'), (u'Discontinued Use of Medication', u'Discontinued Use of Medication')]) # Field name made lowercase.
    ongoing_treatment__c = models.BooleanField(verbose_name=u'Ongoing Treatment', db_column=u'Ongoing_Treatment__c') # Field name made lowercase.
    reason_for_hospitalization__c = models.CharField(blank=True, max_length=255, verbose_name=u'Reason for Hospitalization', db_column=u'Reason_for_Hospitalization__c', choices=[(u'Schedule', u'Schedule'), (u'Emergency', u'Emergency')]) # Field name made lowercase.
    receiving_outpatient_therapy__c = models.BooleanField(verbose_name=u'Receiving Outpatient Therapy', db_column=u'Receiving_Outpatient_Therapy__c') # Field name made lowercase.
    resolution_of_treatment__c = models.CharField(blank=True, max_length=255, verbose_name=u'Resolution of Treatment', db_column=u'Resolution_of_Treatment__c', choices=[(u'Full Recovery', u'Full Recovery'), (u'In Remission', u'In Remission'), (u'Treatment Revised', u'Treatment Revised'), (u'Deceased', u'Deceased')]) # Field name made lowercase.
    send_campaign_emails__c = models.BooleanField(verbose_name=u'Send Campaign Emails', db_column=u'Send_Campaign_Emails__c') # Field name made lowercase.
    start_of_hospitalization__c = models.DateField(null=True, verbose_name=u'Start of Hospitalization', db_column=u'Start_of_Hospitalization__c', blank=True) # Field name made lowercase.
    start_of_ongoing_treatment__c = models.DateField(null=True, verbose_name=u'Start of Ongoing Treatment', db_column=u'Start_of_Ongoing_Treatment__c', blank=True) # Field name made lowercase.
    treatment_facility__c = models.CharField(max_length=60, verbose_name=u'Treatment Facility', db_column=u'Treatment_Facility__c', blank=True) # Field name made lowercase.
    type_of_outpatient_treatment__c = models.CharField(blank=True, max_length=255, verbose_name=u'Type of Outpatient Treatment', db_column=u'Type_of_Outpatient_Treatment__c', choices=[(u'Dialysis/Infusion Therapy', u'Dialysis/Infusion Therapy'), (u'Chemotherapy', u'Chemotherapy'), (u'Post-Transplant Care', u'Post-Transplant Care')]) # Field name made lowercase.
    number_of_medications__c = models.DecimalField(decimal_places=0, db_column=u'Number_of_Medications__c', sf_read_only=models.READ_ONLY, max_digits=18, blank=True, null=True, verbose_name=u'Number of Medications') # Field name made lowercase.
    outpatient_diagnostic_code__c = models.CharField(max_length=25, verbose_name=u'Diagnostic Code', db_column=u'Outpatient_Diagnostic_Code__c', blank=True) # Field name made lowercase.
    hospitalization_diagnostic_code__c = models.CharField(max_length=25, verbose_name=u'Diagnostic Code', db_column=u'Hospitalization_Diagnostic_Code__c', blank=True) # Field name made lowercase.
    ongoing_diagnostic_code__c = models.CharField(max_length=50, verbose_name=u'Diagnostic Code', db_column=u'Ongoing_Diagnostic_Code__c', blank=True) # Field name made lowercase.
    disease_management__c = models.CharField(blank=True, max_length=255, verbose_name=u'Disease Management', db_column=u'Disease_Management__c', choices=[(u'Candidate', u'Candidate'), (u'Engaged', u'Engaged'), (u'Exited Program', u'Exited Program')]) # Field name made lowercase.
    case_management__c = models.CharField(blank=True, max_length=255, verbose_name=u'Case Management', db_column=u'Case_Management__c', choices=[(u'Candidate', u'Candidate'), (u'Referred Out', u'Referred Out'), (u'Engaged', u'Engaged'), (u'Exited Program', u'Exited Program')]) # Field name made lowercase.
    referred_out_to__c = models.CharField(blank=True, max_length=255, verbose_name=u'Referred Out To', db_column=u'Referred_Out_To__c', choices=[(u'First Health', u'First Health'), (u'Well Health', u'Well Health'), (u'Turntable Health', u'Turntable Health')]) # Field name made lowercase.
    eligibility_confirmed__c = models.CharField(db_column=u'Eligibility_Confirmed__c', choices=[(u'Yes', u'Yes'), (u'No', u'No'), (u'Pending', u'Pending')], max_length=255, blank=True, help_text=u'Eligibility Information at time of opening medical management case', verbose_name=u'Eligibility Confirmed') # Field name made lowercase.
    alert_notification__c = models.TextField(help_text=u'Notes regarding Care Coordination', verbose_name=u'Alert Notification', db_column=u'Alert_Notification__c', blank=True) # Field name made lowercase.
    diseased__c = models.BooleanField(help_text=u'Click if the individual is now diseased.', verbose_name=u'Deceased', db_column=u'Diseased__c') # Field name made lowercase.
    isvipaccount__c = models.BooleanField(verbose_name=u'isVIPAccount', db_column=u'isVIPAccount__c') # Field name made lowercase.
    iscloned__c = models.BooleanField(verbose_name=u'isCloned', db_column=u'isCloned__c') # Field name made lowercase.
    cloned_from__c = models.ForeignKey('self', null=True, db_column=u'Cloned_From__c', blank=True) # Field name made lowercase.
    clonecomments__c = models.CharField(max_length=50, verbose_name=u'cloneComments', db_column=u'cloneComments__c', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Medical_Management__c'
        verbose_name = 'Medical Management'
        verbose_name_plural = 'Medical Managements'
        # keyPrefix = 'a0O'

class MedicationHistory(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    parentid = models.ForeignKey('MedicationC', db_column=u'ParentId') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    field = models.CharField(max_length=255, verbose_name=u'Changed Field', sf_read_only=models.READ_ONLY, db_column=u'Field', choices=[(u'Account__c', None), (u'cloneComments__c', None), (u'Cloned_From__c', None), (u'created', u'Created.'), (u'Family_Member__c', None), (u'feedEvent', u'Feed event'), (u'isCloned__c', None), (u'isVIPAccount__c', None), (u'Late_Filling_Prescription__c', None), (u'Medical_Management__c', None), (u'Medication_Status__c', None), (u'Name', None), (u'ownerAccepted', u'Owner (Accepted)'), (u'ownerAssignment', u'Owner (Assignment)'), (u'Prescription_Actually_Filled_On__c', None), (u'Prescription_Filled_On_Time__c', None), (u'Prescription_Last_Filled__c', None), (u'Prescription_Next_Fill__c', None), (u'locked', u'Record locked.'), (u'unlocked', u'Record unlocked.'), (u'Use_of_Medication__c', None)]) # Field name made lowercase.
    oldvalue = models.CharField(max_length=255, verbose_name=u'Old Value', sf_read_only=models.READ_ONLY, db_column=u'OldValue', blank=True) # Field name made lowercase.
    newvalue = models.CharField(max_length=255, verbose_name=u'New Value', sf_read_only=models.READ_ONLY, db_column=u'NewValue', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Medication__History'
        verbose_name = 'History: Medication'
        verbose_name_plural = 'History: Medication'
        # keyPrefix = 'None'

class MedicationC(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'Medications Name', db_column=u'Name', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    lastactivitydate = models.DateField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Activity Date', db_column=u'LastActivityDate', blank=True) # Field name made lowercase.
    medical_management__c = models.ForeignKey('MedicalManagementC', db_column=u'Medical_Management__c') # Field name made lowercase.
    account__c = models.ForeignKey('Account', null=True, db_column=u'Account__c', blank=True) # Field name made lowercase.
    family_member__c = models.ForeignKey('FamilyC', null=True, db_column=u'Family_Member__c', blank=True) # Field name made lowercase.
    late_filling_prescription__c = models.BooleanField(verbose_name=u'Late Filling Prescription?', db_column=u'Late_Filling_Prescription__c') # Field name made lowercase.
    medication_status__c = models.CharField(blank=True, max_length=255, verbose_name=u'Medication Status', db_column=u'Medication_Status__c', choices=[(u'In Use', u'In Use'), (u'Discontinued Use', u'Discontinued Use')]) # Field name made lowercase.
    prescription_actually_filled_on__c = models.DateField(null=True, verbose_name=u'Prescription Actually Filled On', db_column=u'Prescription_Actually_Filled_On__c', blank=True) # Field name made lowercase.
    prescription_filled_on_time__c = models.BooleanField(verbose_name=u'Prescription Filled On Time?', db_column=u'Prescription_Filled_On_Time__c') # Field name made lowercase.
    prescription_last_filled__c = models.DateField(null=True, verbose_name=u'Prescription Last Filled', db_column=u'Prescription_Last_Filled__c', blank=True) # Field name made lowercase.
    prescription_next_fill__c = models.DateField(null=True, verbose_name=u'Prescription Next Fill', db_column=u'Prescription_Next_Fill__c', blank=True) # Field name made lowercase.
    use_of_medication__c = models.CharField(blank=True, max_length=255, verbose_name=u'Use of Medication', db_column=u'Use_of_Medication__c', choices=[(u'Ongoing Treatment', u'Ongoing Treatment'), (u'One Time Treatment', u'One Time Treatment')]) # Field name made lowercase.
    cloned_from__c = models.ForeignKey('self', null=True, db_column=u'Cloned_From__c', blank=True) # Field name made lowercase.
    iscloned__c = models.BooleanField(verbose_name=u'isCloned', db_column=u'isCloned__c') # Field name made lowercase.
    isvipaccount__c = models.BooleanField(verbose_name=u'isVIPAccount', db_column=u'isVIPAccount__c') # Field name made lowercase.
    clonecomments__c = models.CharField(max_length=50, verbose_name=u'cloneComments', db_column=u'cloneComments__c', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Medication__c'
        verbose_name = 'Medication'
        verbose_name_plural = 'Medications'
        # keyPrefix = 'a0P'

class Mobiledeviceregistrar(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    developername = models.CharField(max_length=80, verbose_name=u'Name', db_column=u'DeveloperName') # Field name made lowercase.
    language = models.CharField(blank=True, max_length=40, verbose_name=u'Master Language', db_column=u'Language', choices=[(u'en_US', u'English'), (u'de', u'German'), (u'es', u'Spanish'), (u'fr', u'French'), (u'it', u'Italian'), (u'ja', u'Japanese'), (u'sv', u'Swedish'), (u'ko', u'Korean'), (u'zh_TW', u'Chinese (Traditional)'), (u'zh_CN', u'Chinese (Simplified)'), (u'pt_BR', u'Portuguese (Brazilian)'), (u'nl_NL', u'Dutch'), (u'da', u'Danish'), (u'th', u'Thai'), (u'fi', u'Finnish'), (u'ru', u'Russian'), (u'es_MX', u'Spanish (Mexican)'), (u'no', u'Norwegian')]) # Field name made lowercase.
    masterlabel = models.CharField(max_length=80, verbose_name=u'Label', db_column=u'MasterLabel') # Field name made lowercase.
    namespaceprefix = models.CharField(max_length=15, verbose_name=u'Namespace Prefix', sf_read_only=models.READ_ONLY, db_column=u'NamespacePrefix', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    provider = models.CharField(max_length=255, verbose_name=u'Provider', db_column=u'Provider', choices=[(u'salesforce', u'Salesforce'), (u'mobileiron', u'MobileIron'), (u'airwatch', u'AirWatch')]) # Field name made lowercase.
    mdmproviderenrollendpoint = models.URLField(null=True, verbose_name=u'Mdm Provider Enroll Endpoint', db_column=u'MdmProviderEnrollEndpoint', blank=True) # Field name made lowercase.
    mdmproviderpushappendpoint = models.URLField(null=True, verbose_name=u'Mdm Provider Push App Endpoint', db_column=u'MdmProviderPushAppEndpoint', blank=True) # Field name made lowercase.
    mdmproviderapiaccesstoken = models.CharField(max_length=255, verbose_name=u'Mdm Provider Api Access Token', db_column=u'MdmProviderApiAccessToken', blank=True) # Field name made lowercase.
    mdmproviderapiusername = models.CharField(max_length=255, verbose_name=u'Mdm Provider Api Username', db_column=u'MdmProviderApiUsername', blank=True) # Field name made lowercase.
    mdmproviderapipassword = models.CharField(max_length=255, verbose_name=u'Mdm Provider Api Password', db_column=u'MdmProviderApiPassword', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'MobileDeviceRegistrar'
        verbose_name = 'Mobile Device Registrar'
        verbose_name_plural = 'Mobile Device Registrars'
        # keyPrefix = '0IG'

class Name(models.Model):
    name = models.CharField(max_length=255, verbose_name=u'Name', sf_read_only=models.READ_ONLY, db_column=u'Name', blank=True) # Field name made lowercase.
    lastname = models.CharField(max_length=80, verbose_name=u'Last Name', sf_read_only=models.READ_ONLY, db_column=u'LastName', blank=True) # Field name made lowercase.
    firstname = models.CharField(max_length=40, verbose_name=u'First Name', sf_read_only=models.READ_ONLY, db_column=u'FirstName', blank=True) # Field name made lowercase.
    type = models.CharField(db_column=u'Type', choices=[(u'Account', None), (u'AccountContactRole', None), (u'Accumulators__c', None), (u'AdditionalUserData__c', None), (u'Announcement', None), (u'Appeal__c', None), (u'Asset', None), (u'Authorized_Representative__c', None), (u'AutoPayOptions__c', None), (u'Campaign', None), (u'Carrier__c', None), (u'Case', None), (u'Claim__c', None), (u'CollaborationGroup', None), (u'Contact', None), (u'ContentDocument', None), (u'ContentVersion', None), (u'Contract', None), (u'Dashboard', None), (u'DashboardComponent', None), (u'DatacloudOwnedEntity', None), (u'DatacloudPurchaseUsage', None), (u'DataMigration__c', None), (u'DataMigrationItem__c', None), (u'Document', None), (u'Employer_Payments__c', None), (u'Event', None), (u'Family__c', None), (u'FollowUp__c', None), (u'Group_Member__c', None), (u'Group_Member_Dependent__c', None), (u'Group_Quote__c', None), (u'IM_834_IN__c', None), (u'InstalledMobileApp', None), (u'Lead', None), (u'legacyAccountsDedupResults__c', None), (u'Medical_Management__c', None), (u'Medication__c', None), (u'mkto_si__Best_Bets_View__c', None), (u'mkto_si__Best_Bets_View_Detail__c', None), (u'mkto_si__BestBetsCache__c', None), (u'mkto_si__EmailActivityCache__c', None), (u'mkto_si__Get_Method_Argus__c', None), (u'mkto_si__GroupedWebActivityCache__c', None), (u'mkto_si__InterestingMomentsCache__c', None), (u'mkto_si__Marketo_Sales_Insight_Config__c', None), (u'mkto_si__ScoringCache__c', None), (u'mkto_si__Value__c', None), (u'mkto_si__WebActivityCache__c', None), (u'NetworkActivityAudit', None), (u'Opportunity', None), (u'Payment_History__c', None), (u'Person_Payment__c', None), (u'Policy__c', None), (u'Pricebook2', None), (u'ProcessInstanceNode', None), (u'Product2', None), (u'Queue', None), (u'Quote', None), (u'QuoteLineItem', None), (u'Record_Audit__c', None), (u'Report', None), (u'SearchPromotionRule', None), (u'SelfServiceUser', None), (u'Solution', None), (u'Survey__c', None), (u'Survey_Choices__c', None), (u'Survey_Members__c', None), (u'Survey_Response__c', None), (u'SurveyQuestions__c', None), (u'Task', None), (u'Topic', None), (u'User', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Type') # Field name made lowercase.
    alias = models.CharField(max_length=8, verbose_name=u'Alias', sf_read_only=models.READ_ONLY, db_column=u'Alias', blank=True) # Field name made lowercase.
    userroleid = models.ForeignKey('Userrole', null=True, db_column=u'UserRoleId', blank=True) # Field name made lowercase.
    recordtypeid = models.ForeignKey('Recordtype', null=True, db_column=u'RecordTypeId', blank=True) # Field name made lowercase.
    isactive = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Active', db_column=u'IsActive') # Field name made lowercase.
    profileid = models.ForeignKey('Profile', null=True, db_column=u'ProfileId', blank=True) # Field name made lowercase.
    title = models.CharField(max_length=80, verbose_name=u'Title', sf_read_only=models.READ_ONLY, db_column=u'Title', blank=True) # Field name made lowercase.
    email = models.EmailField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'E-mail', db_column=u'Email', blank=True) # Field name made lowercase.
    phone = models.CharField(max_length=40, verbose_name=u'Phone', sf_read_only=models.READ_ONLY, db_column=u'Phone', blank=True) # Field name made lowercase.
    username = models.CharField(max_length=80, verbose_name=u'Username', sf_read_only=models.READ_ONLY, db_column=u'Username', blank=True) # Field name made lowercase.
    lastvieweddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Viewed Date', db_column=u'LastViewedDate', blank=True) # Field name made lowercase.
    lastreferenceddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Referenced Date', db_column=u'LastReferencedDate', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Name'
        verbose_name = 'Name'
        verbose_name_plural = 'Names'
        # keyPrefix = 'None'

class Network(models.Model):
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    name = models.CharField(max_length=40, verbose_name=u'Name', sf_read_only=models.NOT_CREATEABLE, db_column=u'Name') # Field name made lowercase.
    description = models.CharField(max_length=255, verbose_name=u'Description', sf_read_only=models.NOT_CREATEABLE, db_column=u'Description', blank=True) # Field name made lowercase.
    status = models.CharField(max_length=40, verbose_name=u'Status', sf_read_only=models.NOT_CREATEABLE, db_column=u'Status', choices=[(u'UnderConstruction', u'Preview'), (u'Live', u'Published'), (u'DownForMaintenance', u'Offline')]) # Field name made lowercase.
    optionsinvitationsenabled = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Invitations Enabled', db_column=u'OptionsInvitationsEnabled') # Field name made lowercase.
    optionssendwelcomeemail = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Send Welcome Email', db_column=u'OptionsSendWelcomeEmail') # Field name made lowercase.
    optionsselfregistrationenabled = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Self Registration Enabled', db_column=u'OptionsSelfRegistrationEnabled') # Field name made lowercase.
    optionsallowmemberstoflag = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Allow Members To Flag', db_column=u'OptionsAllowMembersToFlag') # Field name made lowercase.
    optionssiteascontainerenabled = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Site.com as Community Container Enabled', db_column=u'OptionsSiteAsContainerEnabled') # Field name made lowercase.
    optionsprivatemessagesenabled = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Private Messages Enabled', db_column=u'OptionsPrivateMessagesEnabled') # Field name made lowercase.
    optionsknowledgeableenabled = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Knowledgeable Enabled', db_column=u'OptionsKnowledgeableEnabled') # Field name made lowercase.
    optionsreputationenabled = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Reputation Enabled', db_column=u'OptionsReputationEnabled') # Field name made lowercase.
    optionsguestchatterenabled = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Guest Chatter Enabled', db_column=u'OptionsGuestChatterEnabled') # Field name made lowercase.
    welcomeemailtemplateid = models.ForeignKey('Emailtemplate', db_column=u'WelcomeEmailTemplateId') # Field name made lowercase.
    changepasswordemailtemplateid = models.ForeignKey('Emailtemplate', db_column=u'ChangePasswordEmailTemplateId') # Field name made lowercase.
    forgotpasswordemailtemplateid = models.ForeignKey('Emailtemplate', db_column=u'ForgotPasswordEmailTemplateId') # Field name made lowercase.
    emailsendername = models.CharField(max_length=80, verbose_name=u'From Email Name', sf_read_only=models.NOT_CREATEABLE, db_column=u'EmailSenderName') # Field name made lowercase.
    emailsenderaddress = models.EmailField(sf_read_only=models.READ_ONLY, verbose_name=u'From Email Address', db_column=u'EmailSenderAddress') # Field name made lowercase.
    newsenderaddress = models.EmailField(null=True, sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Unverified Sender Email Address', db_column=u'NewSenderAddress', blank=True) # Field name made lowercase.
    emailfooterlogoid = models.ForeignKey('Document', null=True, db_column=u'EmailFooterLogoId', blank=True) # Field name made lowercase.
    emailfootertext = models.CharField(max_length=1000, verbose_name=u'Email Footer Text', sf_read_only=models.NOT_CREATEABLE, db_column=u'EmailFooterText', blank=True) # Field name made lowercase.
    urlpathprefix = models.CharField(max_length=40, verbose_name=u'Community URL Prefix', sf_read_only=models.NOT_CREATEABLE, db_column=u'UrlPathPrefix', blank=True) # Field name made lowercase.
    casecommentemailtemplateid = models.ForeignKey('Emailtemplate', null=True, db_column=u'CaseCommentEmailTemplateId', blank=True) # Field name made lowercase.
    selfregprofileid = models.ForeignKey('Profile', null=True, db_column=u'SelfRegProfileId', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Network'
        verbose_name = 'Network'
        verbose_name_plural = 'Networks'
        # keyPrefix = '0DB'

class Networkactivityaudit(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=255, verbose_name=u'Name', db_column=u'Name') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    networkid = models.ForeignKey('Network', null=True, db_column=u'NetworkId', blank=True) # Field name made lowercase.
    entityid = models.ForeignKey('Contentdocument', null=True, db_column=u'EntityId', blank=True) # Field name made lowercase.
    parententitytype = models.CharField(blank=True, max_length=255, verbose_name=u'Parent Type of Audited Object', db_column=u'ParentEntityType', choices=[(u'User', u'User'), (u'CollaborationGroup', u'Group')]) # Field name made lowercase.
    parententityid = models.ForeignKey('Collaborationgroup', null=True, db_column=u'ParentEntityId', blank=True) # Field name made lowercase.
    entitycreatedbyid = models.ForeignKey('User', null=True, db_column=u'EntityCreatedById', blank=True) # Field name made lowercase.
    entitytype = models.CharField(blank=True, max_length=255, verbose_name=u'Audited Object Type', db_column=u'EntityType', choices=[(u'FeedItem', u'Feed Item'), (u'FeedComment', u'Feed Comment'), (u'ContentDocument', u'Content')]) # Field name made lowercase.
    action = models.CharField(blank=True, max_length=255, verbose_name=u'Action', db_column=u'Action', choices=[(u'Flag', u'Flagged'), (u'Unflag', u'Unflagged'), (u'RemoveFlags', u'RemovedFlags'), (u'DeleteFlaggedItem', u'DeletedFlaggedItem')]) # Field name made lowercase.
    description = models.CharField(max_length=250, verbose_name=u'Description', db_column=u'Description', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'NetworkActivityAudit'
        verbose_name = 'Audited Object'
        verbose_name_plural = 'Network Audits'
        # keyPrefix = '0J6'

class Networkmember(models.Model):
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    networkid = models.ForeignKey('Network', db_column=u'NetworkId') # Field name made lowercase.
    memberid = models.ForeignKey('User', db_column=u'MemberId') # Field name made lowercase.
    digestfrequency = models.CharField(max_length=40, verbose_name=u'Chatter Email Highlights Frequency', sf_read_only=models.NOT_CREATEABLE, db_column=u'DigestFrequency', choices=[(u'D', u'Daily'), (u'W', u'Weekly'), (u'N', u'Never')]) # Field name made lowercase.
    defaultgroupnotificationfrequency = models.CharField(max_length=40, verbose_name=u'Default Notification Frequency when Joining Groups', sf_read_only=models.NOT_CREATEABLE, db_column=u'DefaultGroupNotificationFrequency', choices=[(u'P', u'Email on Each Post'), (u'D', u'Daily Digests'), (u'W', u'Weekly Digests'), (u'N', u'Never')]) # Field name made lowercase.
    preferencesdisableallfeedsemail = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'DisableAllFeedsEmail', db_column=u'PreferencesDisableAllFeedsEmail') # Field name made lowercase.
    preferencesdisablefollowersemail = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'DisableFollowersEmail', db_column=u'PreferencesDisableFollowersEmail') # Field name made lowercase.
    preferencesdisableprofilepostemail = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'DisableProfilePostEmail', db_column=u'PreferencesDisableProfilePostEmail') # Field name made lowercase.
    preferencesdisablechangecommentemail = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'DisableChangeCommentEmail', db_column=u'PreferencesDisableChangeCommentEmail') # Field name made lowercase.
    preferencesdisablelatercommentemail = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'DisableLaterCommentEmail', db_column=u'PreferencesDisableLaterCommentEmail') # Field name made lowercase.
    preferencesdisprofpostcommentemail = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'DisProfPostCommentEmail', db_column=u'PreferencesDisProfPostCommentEmail') # Field name made lowercase.
    preferencesdisablementionspostemail = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'DisableMentionsPostEmail', db_column=u'PreferencesDisableMentionsPostEmail') # Field name made lowercase.
    preferencesdismentionscommentemail = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'DisMentionsCommentEmail', db_column=u'PreferencesDisMentionsCommentEmail') # Field name made lowercase.
    preferencesdisablelikeemail = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'DisableLikeEmail', db_column=u'PreferencesDisableLikeEmail') # Field name made lowercase.
    preferencesdiscommentafterlikeemail = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'DisCommentAfterLikeEmail', db_column=u'PreferencesDisCommentAfterLikeEmail') # Field name made lowercase.
    preferencesdisablebookmarkemail = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'DisableBookmarkEmail', db_column=u'PreferencesDisableBookmarkEmail') # Field name made lowercase.
    preferencesdisablesharepostemail = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'DisableSharePostEmail', db_column=u'PreferencesDisableSharePostEmail') # Field name made lowercase.
    preferencesdisableitemflaggedemail = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'DisableItemFlaggedEmail', db_column=u'PreferencesDisableItemFlaggedEmail') # Field name made lowercase.
    preferencesdisablemessageemail = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'DisableMessageEmail', db_column=u'PreferencesDisableMessageEmail') # Field name made lowercase.
    preferencesdisableendorsementemail = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'DisableEndorsementEmail', db_column=u'PreferencesDisableEndorsementEmail') # Field name made lowercase.
    reputationpoints = models.DecimalField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Reputation Points', max_digits=15, db_column=u'ReputationPoints', decimal_places=0) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'NetworkMember'
        verbose_name = 'Network Member'
        verbose_name_plural = 'Network Members'
        # keyPrefix = '0DO'

class Networkmembergroup(models.Model):
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    networkid = models.ForeignKey('Network', db_column=u'NetworkId') # Field name made lowercase.
    parentid = models.ForeignKey('Permissionset', db_column=u'ParentId') # Field name made lowercase.
    assignmentstatus = models.CharField(max_length=40, verbose_name=u'Assignment Status', sf_read_only=models.NOT_CREATEABLE, db_column=u'AssignmentStatus', choices=[(u'Added', u'Added'), (u'WaitingForAdd', u'Waiting For Add'), (u'WaitingForRemove', u'Waiting For Remove')]) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'NetworkMemberGroup'
        verbose_name = 'Network Member Group'
        verbose_name_plural = 'Network Member Group'
        # keyPrefix = '0DL'

class Networkmoderation(models.Model):
    entityid = models.ForeignKey('Contentdocument', null=True, db_column=u'EntityId', blank=True) # Field name made lowercase.
    networkid = models.ForeignKey('Network', null=True, db_column=u'NetworkId', blank=True) # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    visibility = models.CharField(db_column=u'Visibility', choices=[(u'SelfAndModerators', u'Self and Moderators'), (u'ModeratorsOnly', u'Moderators Only')], max_length=40, blank=True, sf_read_only=models.NOT_UPDATEABLE, verbose_name=u'Visibility') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'NetworkModeration'
        verbose_name = 'Network Moderation'
        verbose_name_plural = 'Network Moderations'
        # keyPrefix = '0Id'

class Note(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    parentid = models.ForeignKey('Account', db_column=u'ParentId') # Field name made lowercase.
    title = models.CharField(max_length=80, verbose_name=u'Title', db_column=u'Title') # Field name made lowercase.
    isprivate = models.BooleanField(verbose_name=u'Private', db_column=u'IsPrivate') # Field name made lowercase.
    body = models.TextField(verbose_name=u'Body', db_column=u'Body', blank=True) # Field name made lowercase.
    ownerid = models.ForeignKey('User', db_column=u'OwnerId') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Note'
        verbose_name = 'Note'
        verbose_name_plural = 'Notes'
        # keyPrefix = '002'

class Noteandattachment(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    isnote = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Is Note', db_column=u'IsNote') # Field name made lowercase.
    parentid = models.ForeignKey('Account', db_column=u'ParentId') # Field name made lowercase.
    title = models.CharField(max_length=80, verbose_name=u'Title', sf_read_only=models.READ_ONLY, db_column=u'Title', blank=True) # Field name made lowercase.
    isprivate = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Private', db_column=u'IsPrivate') # Field name made lowercase.
    ownerid = models.ForeignKey('User', db_column=u'OwnerId') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'NoteAndAttachment'
        verbose_name = 'Note and Attachment'
        verbose_name_plural = 'Notes and Attachments'
        # keyPrefix = 'None'

class Objectpermissions(models.Model):
    parentid = models.ForeignKey('Permissionset', db_column=u'ParentId') # Field name made lowercase.
    sobjecttype = models.CharField(max_length=40, verbose_name=u'Sobject Type Name', sf_read_only=models.NOT_UPDATEABLE, db_column=u'SobjectType', choices=[(u'Account', None), (u'Accumulators__c', None), (u'AdditionalUserData__c', None), (u'AddOnDefinition', None), (u'AggregationRow', None), (u'Appeal__c', None), (u'Asset', None), (u'Authorized_Representative__c', None), (u'AutoPayOptions__c', None), (u'Campaign', None), (u'Carrier__c', None), (u'Case', None), (u'Certification', None), (u'CertificationDef', None), (u'CertificationSectionDef', None), (u'CertificationStep', None), (u'CertificationStepDef', None), (u'Claim__c', None), (u'CloudServiceProvider', None), (u'CloudServiceProviderApi', None), (u'CMS_834_IN__c', None), (u'Contact', None), (u'Contract', None), (u'ContractLineItem', None), (u'CORESOURCE_834_IN__c', None), (u'DandBCompany', None), (u'DataMigration__c', None), (u'DataMigrationItem__c', None), (u'Document', None), (u'DuplicateRecordSet', None), (u'EditionDefinition', None), (u'Employer_Payments__c', None), (u'Entitlement', None), (u'EntitlementContact', None), (u'EnvironmentHubInvitation', None), (u'EnvironmentHubMember', None), (u'Family__c', None), (u'FollowUp__c', None), (u'FtestAccountChild', None), (u'FtestChild', None), (u'FtestError', None), (u'FtestErrorChild', None), (u'FtestGrandChild', None), (u'FtestHiddenName', None), (u'FtestMain', None), (u'FtestPerson', None), (u'FtestVirtualMain', None), (u'Goal', None), (u'GoalLink', None), (u'Group_Member__c', None), (u'Group_Member_Dependent__c', None), (u'Group_Quote__c', None), (u'Idea', None), (u'IdeaTheme', None), (u'IM_834_IN__c', None), (u'IncludedLicenseDefinition', None), (u'JAVELINA_834_IN__c', None), (u'Lead', None), (u'legacyAccountsDedupResults__c', None), (u'LicensingError', None), (u'LicensingRequest', None), (u'LiveAgentSession', None), (u'LiveChatTranscript', None), (u'LiveChatVisitor', None), (u'Macro', None), (u'ManagementAddOnLicense', None), (u'ManagementEditionLicense', None), (u'ManagementPlatformLicense', None), (u'ManagementUserLicense', None), (u'MarketingAction', None), (u'Medical_Management__c', None), (u'Medication__c', None), (u'Metric', None), (u'mkto_si__Best_Bets_View__c', None), (u'mkto_si__Best_Bets_View_Detail__c', None), (u'mkto_si__BestBetsCache__c', None), (u'mkto_si__EmailActivityCache__c', None), (u'mkto_si__Get_Method_Argus__c', None), (u'mkto_si__GroupedWebActivityCache__c', None), (u'mkto_si__InterestingMomentsCache__c', None), (u'mkto_si__Marketo_Sales_Insight_Config__c', None), (u'mkto_si__ScoringCache__c', None), (u'mkto_si__Value__c', None), (u'mkto_si__WebActivityCache__c', None), (u'MyCustomObject', None), (u'Opportunity', None), (u'Order', None), (u'Payment_History__c', None), (u'Person_Payment__c', None), (u'PersonKey', None), (u'PlatformLicenseDefinition', None), (u'Policy__c', None), (u'Pricebook2', None), (u'Product2', None), (u'ProfileSkill', None), (u'ProfileSkillEndorsement', None), (u'ProfileSkillUser', None), (u'PushTopic', None), (u'Question', None), (u'QuickText', None), (u'Quote', None), (u'Record_Audit__c', None), (u'RegisteredMobileDevice', None), (u'ServiceContract', None), (u'SignupRequest', None), (u'SocialPost', None), (u'Solution', None), (u'SOSSession', None), (u'StreamingChannel', None), (u'Survey__c', None), (u'Survey_Answers__c', None), (u'Survey_Choices__c', None), (u'Survey_Choices__c', None), (u'Survey_Members__c', None), (u'Survey_Response__c', None), (u'SurveyQuestions__c', None), (u'Tenant', None), (u'TenantParameterMap', None), (u'UsageEntitlement', None), (u'UserLicenseDefinition', None), (u'WorkCoaching', None), (u'WorkFeedback', None), (u'WorkFeedbackQuestion', None), (u'WorkFeedbackQuestionSet', None), (u'WorkFeedbackRequest', None), (u'WorkGoal', None), (u'WorkGoalCollaborator', None), (u'WorkGoalLink', None), (u'WorkPerformanceCycle', None), (u'WorkReward', None), (u'WorkRewardFund', None), (u'WorkRewardFundType', None), (u'WorkUpgradeAction', None), (u'WorkUpgradeCustomer', None), (u'WorkUpgradeUser', None)]) # Field name made lowercase.
    permissionscreate = models.BooleanField(verbose_name=u'Create Records', db_column=u'PermissionsCreate') # Field name made lowercase.
    permissionsread = models.BooleanField(verbose_name=u'Read Records', db_column=u'PermissionsRead') # Field name made lowercase.
    permissionsedit = models.BooleanField(verbose_name=u'Edit Records', db_column=u'PermissionsEdit') # Field name made lowercase.
    permissionsdelete = models.BooleanField(verbose_name=u'Delete Records', db_column=u'PermissionsDelete') # Field name made lowercase.
    permissionsviewallrecords = models.BooleanField(verbose_name=u'Read All Records', db_column=u'PermissionsViewAllRecords') # Field name made lowercase.
    permissionsmodifyallrecords = models.BooleanField(verbose_name=u'Edit All Records', db_column=u'PermissionsModifyAllRecords') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'ObjectPermissions'
        verbose_name = 'Object Permissions'
        verbose_name_plural = 'Object Permissions'
        # keyPrefix = '110'

class Openactivity(models.Model):
    accountid = models.ForeignKey('Account', null=True, db_column=u'AccountId', blank=True) # Field name made lowercase.
    whoid = models.ForeignKey('Contact', null=True, db_column=u'WhoId', blank=True) # Field name made lowercase.
    whatid = models.ForeignKey('AppealC', null=True, db_column=u'WhatId', blank=True) # Field name made lowercase.
    subject = models.CharField(db_column=u'Subject', choices=[(u'Call', u'Call'), (u'Send Letter', u'Send Letter'), (u'Send Quote', u'Send Quote'), (u'Other', u'Other')], max_length=80, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Subject') # Field name made lowercase.
    istask = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Task', db_column=u'IsTask') # Field name made lowercase.
    activitydate = models.DateField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Date', db_column=u'ActivityDate', blank=True) # Field name made lowercase.
    ownerid = models.ForeignKey('User', null=True, db_column=u'OwnerId', blank=True) # Field name made lowercase.
    status = models.CharField(db_column=u'Status', choices=[(u'Open', u'Open'), (u'Completed', u'Completed'), (u'Not Started', u'Not Started')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Status') # Field name made lowercase.
    priority = models.CharField(db_column=u'Priority', choices=[(u'High', u'High'), (u'Normal', u'Normal')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Priority') # Field name made lowercase.
    ishighpriority = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'High Priority', db_column=u'IsHighPriority') # Field name made lowercase.
    activitytype = models.CharField(db_column=u'ActivityType', choices=[(u'Call', None), (u'Call', None), (u'Email', None), (u'Meeting', None), (u'Meeting', None), (u'Other', None), (u'Other', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Type') # Field name made lowercase.
    isclosed = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Closed', db_column=u'IsClosed') # Field name made lowercase.
    durationinminutes = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Duration', db_column=u'DurationInMinutes', blank=True) # Field name made lowercase.
    location = models.CharField(max_length=80, verbose_name=u'Location', sf_read_only=models.READ_ONLY, db_column=u'Location', blank=True) # Field name made lowercase.
    description = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Comments', db_column=u'Description', blank=True) # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    calldurationinseconds = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Call Duration', db_column=u'CallDurationInSeconds', blank=True) # Field name made lowercase.
    calltype = models.CharField(db_column=u'CallType', choices=[(u'Internal', u'Internal'), (u'Inbound', u'Inbound'), (u'Outbound', u'Outbound')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Call Type') # Field name made lowercase.
    calldisposition = models.CharField(max_length=255, verbose_name=u'Call Result', sf_read_only=models.READ_ONLY, db_column=u'CallDisposition', blank=True) # Field name made lowercase.
    callobject = models.CharField(max_length=255, verbose_name=u'Call Object Identifier', sf_read_only=models.READ_ONLY, db_column=u'CallObject', blank=True) # Field name made lowercase.
    reminderdatetime = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Reminder Date/Time', db_column=u'ReminderDateTime', blank=True) # Field name made lowercase.
    isreminderset = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Reminder Set', db_column=u'IsReminderSet') # Field name made lowercase.
    enddatetime = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'End', db_column=u'EndDateTime', blank=True) # Field name made lowercase.
    startdatetime = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Start', db_column=u'StartDateTime', blank=True) # Field name made lowercase.
    primarywhoid = models.ForeignKey('Contact', null=True, db_column=u'PrimaryWhoId', blank=True) # Field name made lowercase.
    primaryaccountid = models.ForeignKey('Account', null=True, db_column=u'PrimaryAccountId', blank=True) # Field name made lowercase.
    x8x8_log__c = models.TextField(help_text=u'Log from 8x8. Field populated with call data.', sf_read_only=models.READ_ONLY, verbose_name=u'8x8 Log', db_column=u'X8x8_Log__c', blank=True) # Field name made lowercase.
    call_answered_time__c = models.CharField(db_column=u'Call_Answered_Time__c', max_length=50, blank=True, help_text=u'Time the call was answered by an agent.', sf_read_only=models.READ_ONLY, verbose_name=u'Call Answered Time') # Field name made lowercase.
    call_hangup_time__c = models.TextField(help_text=u'Time the call ended with the agent.', sf_read_only=models.READ_ONLY, verbose_name=u'Call Hangup Time', db_column=u'Call_Hangup_Time__c', blank=True) # Field name made lowercase.
    call_notes__c = models.TextField(help_text=u'Notes regarding the outcome of the call.', sf_read_only=models.READ_ONLY, verbose_name=u'Call Notes', db_column=u'Call_Notes__c', blank=True) # Field name made lowercase.
    channel_name__c = models.CharField(db_column=u'Channel_Name__c', max_length=100, blank=True, help_text=u'Name of the inbound or outbound channel or number dialed by customer.', sf_read_only=models.READ_ONLY, verbose_name=u'Channel Name') # Field name made lowercase.
    queue_name__c = models.CharField(db_column=u'Queue_Name__c', max_length=100, blank=True, help_text=u'Queue that the inbound or outbound channel directed the caller to.', sf_read_only=models.READ_ONLY, verbose_name=u'Queue Name') # Field name made lowercase.
    original_object_id__c = models.CharField(max_length=18, verbose_name=u'Original Object ID', sf_read_only=models.READ_ONLY, db_column=u'Original_Object_ID__c', blank=True) # Field name made lowercase.
    transactionid__c = models.CharField(max_length=200, verbose_name=u'Transaction ID', sf_read_only=models.READ_ONLY, blank=True)
    action__c = models.CharField(db_column=u'Action__c', choices=[(u'Called: No Contact', u'Called: No Contact'), (u'Contacted: Did not Quote', u'Contacted: Did not Quote'), (u'Contacted: Quoted but did not Sell', u'Contacted: Quoted but did not Sell'), (u'Do Not Call', u'Do Not Call'), (u'Medicaid Eligible', u'Medicaid Eligible'), (u'General Comment', u'General Comment'), (u'Not Interested', u'Not Interested'), (u'Application Completed', u'Application Completed'), (u'Application Incomplete', u'Application Incomplete'), (u'Called: Bad Phone #', u'Called: Bad Phone #'), (u'Contacted: Customer not ready to move forward', u'Contacted: Customer not ready to move forward'), (u'Lead generated through testing process', u'Lead generated through testing process'), (u'Prefers to Work Alone', u'Prefers to Work Alone'), (u'Has Coverage: Not looking to enroll at this time', u'Has Coverage: Not looking to enroll at this time'), (u'Pending HIXID from NHL', u'Pending HIXID from NHL')], max_length=255, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Action') # Field name made lowercase.
    migrated__c = models.BooleanField(help_text=u'Was this record migrated from old tenant?', sf_read_only=models.READ_ONLY, verbose_name=u'Migrated', db_column=u'Migrated__c') # Field name made lowercase.
    original_owner_name__c = models.CharField(max_length=150, verbose_name=u'Original Owner Name', sf_read_only=models.READ_ONLY, db_column=u'Original_Owner_Name__c', blank=True) # Field name made lowercase.
    auto_generated__c = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Auto Generated', db_column=u'Auto_Generated__c') # Field name made lowercase.
    current_carrier__c = models.CharField(max_length=255, db_column=u'Current_Carrier__c', blank=True, help_text=u'Use if action is Has Coverage: Not looking to enroll at this time.', sf_read_only=models.READ_ONLY, verbose_name=u'Current Carrier', choices=[(u'United', u'United'), (u'Sierra', u'Sierra'), (u'HPN', u'HPN'), (u'Coventry', u'Coventry'), (u'St Mary\u2019s', u'St Mary\u2019s'), (u'Aetna', u'Aetna'), (u'Assurant', u'Assurant')]) # Field name made lowercase.
    activity_type__c = models.CharField(max_length=255, db_column=u'Activity_Type__c', blank=True, help_text=u'Indicated the activity type used to interact with the member.', sf_read_only=models.READ_ONLY, verbose_name=u'Activity Type', choices=[(u'Call', u'Call'), (u'Email', u'Email'), (u'Mail', u'Mail'), (u'On-Site', u'On-Site'), (u'SMS', u'SMS'), (u'Case Note', u'Case Note'), (u'Event / Grievance', u'Event / Grievance')]) # Field name made lowercase.
    date_interest_expressed__c = models.DateField(db_column=u'Date_Interest_Expressed__c', sf_read_only=models.READ_ONLY, blank=True, help_text=u'Date that interest was expressed by a provider for engaging with NHC.', null=True, verbose_name=u'Date Interest Expressed') # Field name made lowercase.
    program_contact_type__c = models.CharField(db_column=u'Program_Contact_Type__c', choices=[(u'Asthma Program Initial Telephone Contact', u'Asthma Program Initial Telephone Contact'), (u'Asthma Program Follow-Up Telephone Contact', u'Asthma Program Follow-Up Telephone Contact'), (u'Diabetes Program Initial Telephone Contact', u'Diabetes Program Initial Telephone Contact'), (u'Diabetes Program Follow-Up Telephone Contact', u'Diabetes Program Follow-Up Telephone Contact')], max_length=255, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Program Contact Type') # Field name made lowercase.
    review_and_update_demographic_info__c = models.BooleanField(help_text=u'During the conversation did you review and update demographic information with the member?', sf_read_only=models.READ_ONLY, verbose_name=u'Review and update demographic info', db_column=u'Review_and_update_demographic_info__c') # Field name made lowercase.
    review_and_update_practitioner_info__c = models.BooleanField(help_text=u'During the conversation was a review and update practitioner information performed?', sf_read_only=models.READ_ONLY, verbose_name=u'Review and update practitioner info', db_column=u'Review_and_update_practitioner_info__c') # Field name made lowercase.
    asthma_affecting_work_school_home_etc__c = models.CharField(max_length=255, db_column=u'Asthma_affecting_work_school_home_etc__c', blank=True, help_text=u'In the past 4 weeks, how much of the time did your asthma keep you from getting as much done at work, school or home? The integer represents a five-point Likert Scale from \u201call of the time\u201d to \u201cnone of the time.\u201d', sf_read_only=models.READ_ONLY, verbose_name=u'Asthma affecting work, school, home, etc', choices=[(u'1', u'1'), (u'2', u'2'), (u'3', u'3'), (u'4', u'4'), (u'5', u'5')]) # Field name made lowercase.
    how_often__c = models.CharField(max_length=255, db_column=u'How_often__c', blank=True, help_text=u'During the past 4 weeks, how often has the member had shortness of breath?\r\nThe integer represents a five-point Likert Scale from \u201cmore than once a day\u201d to \u201cnot at all.\u201d', sf_read_only=models.READ_ONLY, verbose_name=u'How often had shortness of breath?', choices=[(u'1', u'1'), (u'2', u'2'), (u'3', u'3'), (u'4', u'4'), (u'5', u'5')]) # Field name made lowercase.
    asthma_symptoms_wake_you__c = models.CharField(max_length=255, db_column=u'Asthma_symptoms_wake_you__c', blank=True, help_text=u'During the past 4 weeks, how often did your asthma symptoms (wheezing, coughing, short-of-breath, chest tightness, or pain) wake you up at night or earlier than usual in the morning? Five-point Likert Scale from \u201c4 or more nights a week\u201d to \u201cnot at all"', sf_read_only=models.READ_ONLY, verbose_name=u'Asthma symptoms wake you?', choices=[(u'1', u'1'), (u'2', u'2'), (u'3', u'3'), (u'4', u'4'), (u'5', u'5')]) # Field name made lowercase.
    how_often_used_rescue_inhaler_or_meds__c = models.CharField(max_length=255, db_column=u'How_often_used_rescue_inhaler_or_meds__c', blank=True, help_text=u'During the past 4 weeks, how often have you used your rescue inhaler or nebulizer medication (such as albuterol)?\r\nThe integer represents a five-point Likert Scale from \u201c3 or more times per day\u201d to \u201cnot at all.\u201d', sf_read_only=models.READ_ONLY, verbose_name=u'How often used rescue inhaler or meds?', choices=[(u'1', u'1'), (u'2', u'2'), (u'3', u'3'), (u'4', u'4'), (u'5', u'5')]) # Field name made lowercase.
    rate_for_asthma_control_in_past_4_weeks__c = models.CharField(max_length=255, db_column=u'Rate_for_asthma_control_in_past_4_weeks__c', blank=True, help_text=u'How would you rate your asthma control during the past 4 weeks?\r\nThe integer represents a five-point Likert Scale from \u201cnot controlled at all\u201d to \u201ccompletely controlled.\u201d', sf_read_only=models.READ_ONLY, verbose_name=u'Rate for asthma control in past 4 weeks?', choices=[(u'1', u'1'), (u'2', u'2'), (u'3', u'3'), (u'4', u'4'), (u'5', u'5')]) # Field name made lowercase.
    iscloned__c = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'isCloned', db_column=u'isCloned__c') # Field name made lowercase.
    isvipaccount__c = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'isVIPAccount', db_column=u'isVIPAccount__c') # Field name made lowercase.
    cloned_from__c = models.CharField(max_length=20, verbose_name=u'Cloned From', sf_read_only=models.READ_ONLY, db_column=u'Cloned_From__c', blank=True) # Field name made lowercase.
    clonecomments__c = models.CharField(max_length=50, verbose_name=u'cloneComments', sf_read_only=models.READ_ONLY, db_column=u'cloneComments__c', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'OpenActivity'
        verbose_name = 'Open Activity'
        verbose_name_plural = 'Open Activities'
        # keyPrefix = 'None'

class Opportunity(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    accountid = models.ForeignKey('Account', null=True, db_column=u'AccountId', blank=True) # Field name made lowercase.
    recordtypeid = models.ForeignKey('Recordtype', null=True, db_column=u'RecordTypeId', blank=True) # Field name made lowercase.
    name = models.CharField(max_length=120, verbose_name=u'Name', db_column=u'Name') # Field name made lowercase.
    description = models.TextField(verbose_name=u'Description', db_column=u'Description', blank=True) # Field name made lowercase.
    stagename = models.CharField(max_length=40, verbose_name=u'Stage', db_column=u'StageName', choices=[(u'Prospecting', u'Prospecting'), (u'Qualification', u'Qualification'), (u'Out To Market', u'Out To Market'), (u'Proposal To Customer', u'Proposal To Customer'), (u'Carrier Selected', u'Carrier Selected'), (u'Closed Won', u'Closed Won'), (u'Closed Lost', u'Closed Lost'), (u'App Pending', u'App Pending'), (u'In-Force', u'In-Force')]) # Field name made lowercase.
    amount = models.DecimalField(db_column=u'Amount', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Annualized Premium') # Field name made lowercase.
    probability = models.DecimalField(db_column=u'Probability', decimal_places=0, max_digits=3, blank=True, null=True, verbose_name=u'Probability (%)') # Field name made lowercase.
    closedate = models.DateField(verbose_name=u'Close Date', db_column=u'CloseDate') # Field name made lowercase.
    type = models.CharField(blank=True, max_length=40, verbose_name=u'Opportunity Type', db_column=u'Type', choices=[(u'Existing Business - Renewal', u'Existing Business - Renewal'), (u'New Business', u'New Business')]) # Field name made lowercase.
    nextstep = models.CharField(max_length=255, verbose_name=u'Next Step', db_column=u'NextStep', blank=True) # Field name made lowercase.
    leadsource = models.CharField(blank=True, max_length=40, verbose_name=u'Lead Source', db_column=u'LeadSource', choices=[(u'Advertisement', u'Advertisement'), (u'Employee Referral', u'Employee Referral'), (u'External Referral', u'External Referral'), (u'Partner', u'Partner'), (u'Public Relations', u'Public Relations'), (u'Seminar - Internal', u'Seminar - Internal'), (u'Seminar - Partner', u'Seminar - Partner'), (u'Trade Show', u'Trade Show'), (u'Web', u'Web'), (u'Word of mouth', u'Word of mouth'), (u'Other', u'Other'), (u'Call In', u'Call In'), (u'Walk In', u'Walk In'), (u'Online', u'Online'), (u'Administrative Upload', u'Administrative Upload')]) # Field name made lowercase.
    isclosed = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Closed', db_column=u'IsClosed') # Field name made lowercase.
    iswon = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Won', db_column=u'IsWon') # Field name made lowercase.
    forecastcategory = models.CharField(max_length=40, verbose_name=u'Forecast Category', sf_read_only=models.READ_ONLY, db_column=u'ForecastCategory', choices=[(u'Omitted', u'Omitted'), (u'Pipeline', u'Pipeline'), (u'BestCase', u'Best Case'), (u'Forecast', u'Commit'), (u'Closed', u'Closed')]) # Field name made lowercase.
    forecastcategoryname = models.CharField(blank=True, max_length=40, verbose_name=u'Forecast Category', db_column=u'ForecastCategoryName', choices=[(u'Omitted', u'Omitted'), (u'Pipeline', u'Pipeline'), (u'Best Case', u'Best Case'), (u'Commit', u'Commit'), (u'Closed', u'Closed')]) # Field name made lowercase.
    hasopportunitylineitem = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Has Line Item', db_column=u'HasOpportunityLineItem') # Field name made lowercase.
    pricebook2id = models.ForeignKey('Pricebook2', null=True, db_column=u'Pricebook2Id', blank=True) # Field name made lowercase.
    ownerid = models.ForeignKey('User', db_column=u'OwnerId') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    lastactivitydate = models.DateField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Activity', db_column=u'LastActivityDate', blank=True) # Field name made lowercase.
    fiscalquarter = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Fiscal Quarter', db_column=u'FiscalQuarter', blank=True) # Field name made lowercase.
    fiscalyear = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Fiscal Year', db_column=u'FiscalYear', blank=True) # Field name made lowercase.
    fiscal = models.CharField(max_length=6, verbose_name=u'Fiscal Period', sf_read_only=models.READ_ONLY, db_column=u'Fiscal', blank=True) # Field name made lowercase.
    lastvieweddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Viewed Date', db_column=u'LastViewedDate', blank=True) # Field name made lowercase.
    lastreferenceddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Referenced Date', db_column=u'LastReferencedDate', blank=True) # Field name made lowercase.
    syncedquoteid = models.ForeignKey('Quote', null=True, db_column=u'SyncedQuoteId', blank=True) # Field name made lowercase.
    underwriting_status__c = models.CharField(blank=True, max_length=255, verbose_name=u'Underwriting Status', db_column=u'Underwriting_Status__c', choices=[(u'Creating Proposal', u'Creating Proposal'), (u'Submitted to Carrier', u'Submitted to Carrier'), (u'Waiting On Customer', u'Waiting On Customer'), (u'Bound', u'Bound'), (u'Rejected By Carrier', u'Rejected By Carrier'), (u'Declined By Customer', u'Declined By Customer')]) # Field name made lowercase.
    total_policy_premium__c = models.DecimalField(db_column=u'Total_Policy_Premium__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Total Policy Premium') # Field name made lowercase.
    target_annualized_premium__c = models.DecimalField(db_column=u'Target_Annualized_Premium__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Target Annualized Premium') # Field name made lowercase.
    selected_carrier__c = models.ForeignKey('CarrierC', null=True, db_column=u'Selected_Carrier__c', blank=True) # Field name made lowercase.
    reason_lost__c = models.CharField(blank=True, max_length=255, verbose_name=u'Reason Lost', db_column=u'Reason_Lost__c', choices=[(u'Carrier Declined', u'Carrier Declined'), (u'Customer Declined', u'Customer Declined'), (u'Other', u'Other')]) # Field name made lowercase.
    line_of_business__c = models.CharField(blank=True, max_length=255, verbose_name=u'Line of Business', db_column=u'Line_of_Business__c', choices=[(u'P&C', u'P&C'), (u'Life', u'Life'), (u'Benefits', u'Benefits')]) # Field name made lowercase.
    expiration_date_of_new_policy__c = models.DateField(null=True, verbose_name=u'Expiration Date of New Policy', db_column=u'Expiration_Date_of_New_Policy__c', blank=True) # Field name made lowercase.
    effective_date_of_new_policy__c = models.DateField(null=True, verbose_name=u'Effective Date of New Policy', db_column=u'Effective_Date_of_New_Policy__c', blank=True) # Field name made lowercase.
    current_policy_expiration_date__c = models.DateField(null=True, verbose_name=u'Current Policy Expiration Date', db_column=u'Current_Policy_Expiration_Date__c', blank=True) # Field name made lowercase.
    current_policy__c = models.ForeignKey('PolicyC', null=True, db_column=u'Current_Policy__c', blank=True) # Field name made lowercase.
    commission_value_producer__c = models.DecimalField(db_column=u'Commission_Value_Producer__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Commission Value - Producer') # Field name made lowercase.
    commission_value_agency__c = models.DecimalField(db_column=u'Commission_Value_Agency__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Commission Value - Agency') # Field name made lowercase.
    commission_type_producer__c = models.CharField(blank=True, max_length=255, verbose_name=u'Commission Type - Producer', db_column=u'Commission_Type_Producer__c', choices=[(u'%', u'%'), (u'Flat Fee', u'Flat Fee')]) # Field name made lowercase.
    commission_type_agency__c = models.CharField(blank=True, max_length=255, verbose_name=u'Commission Type - Agency', db_column=u'Commission_Type_Agency__c', choices=[(u'%', u'%'), (u'Flat Fee', u'Flat Fee')]) # Field name made lowercase.
    agency_commission__c = models.DecimalField(decimal_places=2, db_column=u'Agency_Commission__c', sf_read_only=models.READ_ONLY, max_digits=18, blank=True, null=True, verbose_name=u'Agency Commission') # Field name made lowercase.
    producer_commission__c = models.DecimalField(decimal_places=2, db_column=u'Producer_Commission__c', sf_read_only=models.READ_ONLY, max_digits=18, blank=True, null=True, verbose_name=u'Producer Commission') # Field name made lowercase.
    coverage_interests__c = models.CharField(blank=True, max_length=4099, verbose_name=u'Coverage Interests', db_column=u'Coverage_Interests__c', choices=[(u'Commercial Auto', u'Commercial Auto'), (u'Businesss Owners', u'Businesss Owners'), (u'General Liability', u'General Liability'), (u'Commercial Umbrella', u'Commercial Umbrella'), (u'Workers Compensation', u'Workers Compensation'), (u'Commercial Property', u'Commercial Property'), (u'Package', u'Package'), (u'Personal Auto', u'Personal Auto'), (u'Inland Marine', u'Inland Marine'), (u'Homeowners', u'Homeowners'), (u'Umbrella', u'Umbrella'), (u'Watercraft', u'Watercraft')]) # Field name made lowercase.
    current_carrier_s__c = models.CharField(max_length=255, verbose_name=u'Current Carrier(s)', db_column=u'Current_Carrier_s__c', blank=True) # Field name made lowercase.
    lead_type__c = models.CharField(blank=True, max_length=255, verbose_name=u'Lead Type', db_column=u'Lead_Type__c', choices=[(u'Personal', u'Personal'), (u'Commercial', u'Commercial')]) # Field name made lowercase.
    coverage_amount__c = models.DecimalField(db_column=u'Coverage_Amount__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Coverage Amount') # Field name made lowercase.
    policy_holder__c = models.ForeignKey('Contact', null=True, db_column=u'Policy_Holder__c', blank=True) # Field name made lowercase.
    producer__c = models.ForeignKey('User', null=True, db_column=u'Producer__c', blank=True) # Field name made lowercase.
    application_completed_date__c = models.DateField(null=True, verbose_name=u'Application Completed Date', db_column=u'Application_Completed_Date__c', blank=True) # Field name made lowercase.
    application_started__c = models.DateField(null=True, verbose_name=u'Application Started', db_column=u'Application_Started__c', blank=True) # Field name made lowercase.
    carrier__c = models.ForeignKey('CarrierC', null=True, db_column=u'Carrier__c', blank=True) # Field name made lowercase.
    monthly_premium__c = models.DecimalField(db_column=u'Monthly_Premium__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Monthly Premium') # Field name made lowercase.
    depth__c = models.CharField(blank=True, max_length=255, verbose_name=u'Depth', db_column=u'Depth__c', choices=[(u'Standard', u'Standard'), (u'Withdrawn', u'Withdrawn'), (u'Paper App', u'Paper App'), (u'Payment', u'Payment'), (u'Abandoned', u'Abandoned'), (u'Not Taken', u'Not Taken'), (u'Paramed Ordered', u'Paramed Ordered'), (u'Tele-Interview Completed', u'Tele-Interview Completed')]) # Field name made lowercase.
    of_members__c = models.DecimalField(db_column=u'of_Members__c', decimal_places=0, max_digits=2, blank=True, null=True, verbose_name=u'# of Members') # Field name made lowercase.
    out_of_force_date__c = models.DateField(null=True, verbose_name=u'Out of Force Date', db_column=u'Out_of_Force_Date__c', blank=True) # Field name made lowercase.
    payment_mode__c = models.CharField(blank=True, max_length=255, verbose_name=u'Payment Mode', db_column=u'Payment_Mode__c', choices=[(u'monthly auto draft', u'monthly auto draft')]) # Field name made lowercase.
    plan_selected__c = models.ForeignKey('Product2', null=True, db_column=u'Plan_Selected__c', blank=True) # Field name made lowercase.
    co_insurance__c = models.CharField(max_length=1300, verbose_name=u'Co-Insurance', sf_read_only=models.READ_ONLY, db_column=u'Co_Insurance__c', blank=True) # Field name made lowercase.
    max_out_of_pocket_member__c = models.DecimalField(decimal_places=2, db_column=u'Max_Out_of_Pocket_Member__c', sf_read_only=models.READ_ONLY, max_digits=18, blank=True, null=True, verbose_name=u'Max Out of Pocket - Member') # Field name made lowercase.
    max_out_of_pocket_family__c = models.DecimalField(decimal_places=2, db_column=u'Max_Out_of_Pocket_Family__c', sf_read_only=models.READ_ONLY, max_digits=18, blank=True, null=True, verbose_name=u'Max Out of Pocket - Family') # Field name made lowercase.
    deductible_member__c = models.DecimalField(decimal_places=2, db_column=u'Deductible_Member__c', sf_read_only=models.READ_ONLY, max_digits=18, blank=True, null=True, verbose_name=u'Deductible - Member') # Field name made lowercase.
    deductible_family__c = models.DecimalField(decimal_places=2, db_column=u'Deductible_Family__c', sf_read_only=models.READ_ONLY, max_digits=18, blank=True, null=True, verbose_name=u'Deductible - Family') # Field name made lowercase.
    office_visit__c = models.CharField(max_length=1300, verbose_name=u'Office Visit', sf_read_only=models.READ_ONLY, db_column=u'Office_Visit__c', blank=True) # Field name made lowercase.
    network__c = models.ForeignKey('Account', null=True, db_column=u'Network__c', blank=True) # Field name made lowercase.
    plan_type__c = models.CharField(max_length=1300, verbose_name=u'Plan Type', sf_read_only=models.READ_ONLY, db_column=u'Plan_Type__c', blank=True) # Field name made lowercase.
    active_date__c = models.DateField(null=True, verbose_name=u'Active Date', db_column=u'Active_Date__c', blank=True) # Field name made lowercase.
    plan_selected_hybrid__c = models.CharField(help_text=u'Use this field if the Plan Selected look-up does not have the needed plan. Please contact your system administrator to add the plan to products if applicable.', max_length=100, verbose_name=u'Plan Selected Hybrid', db_column=u'Plan_Selected_Hybrid__c', blank=True) # Field name made lowercase.
    plan_notes__c = models.TextField(help_text=u'Any extra details regarding this plan selected for the opportunity.', verbose_name=u'Plan Notes', db_column=u'Plan_Notes__c', blank=True) # Field name made lowercase.
    rx_coverage__c = models.CharField(max_length=1300, verbose_name=u'Rx Coverage', sf_read_only=models.READ_ONLY, db_column=u'Rx_Coverage__c', blank=True) # Field name made lowercase.
    exchange_details__c = models.CharField(blank=True, max_length=255, verbose_name=u'Exchange Details', db_column=u'Exchange_Details__c', choices=[(u'On Exchange', u'On Exchange'), (u'Off Exchange', u'Off Exchange')]) # Field name made lowercase.
    child_only_application__c = models.BooleanField(help_text=u'Check if related to child only application', verbose_name=u'Child Only Application', db_column=u'Child_Only_Application__c') # Field name made lowercase.
    optional_benefits__c = models.CharField(db_column=u'Optional_Benefits__c', choices=[(u'Accidental', u'Accidental'), (u'Accidental Death: Primary', u'Accidental Death: Primary'), (u'Accidental Death: Spouse', u'Accidental Death: Spouse'), (u'Accident-Spouse', u'Accident-Spouse'), (u'AD&D', u'AD&D'), (u'Dental', u'Dental'), (u'Life', u'Life'), (u'Life-Spouse', u'Life-Spouse'), (u'Mental Health', u'Mental Health'), (u'Substance Abuse', u'Substance Abuse'), (u'Upgrade', u'Upgrade'), (u'Vision', u'Vision')], max_length=4099, blank=True, help_text=u'If optional benefits are available, generally this will apply to On Exchange Plans, please select all applicable benefits from the list provided. If a benefit is not listed here, please inform your supervisor that an entry needs to be added to this list.', verbose_name=u'Optional Benefits') # Field name made lowercase.
    original_carrier_id__c = models.CharField(max_length=18, verbose_name=u'Original Carrier ID', db_column=u'Original_Carrier_ID__c', blank=True) # Field name made lowercase.
    original_owner_id__c = models.CharField(max_length=18, verbose_name=u'Original Owner ID', db_column=u'Original_Owner_ID__c', blank=True) # Field name made lowercase.
    original_object_id__c = models.CharField(max_length=18, verbose_name=u'Original Object ID', db_column=u'Original_Object_ID__c', blank=True) # Field name made lowercase.
    original_last_modified_by__c = models.CharField(max_length=100, verbose_name=u'Original Last Modified By', db_column=u'Original_Last_Modified_By__c', blank=True) # Field name made lowercase.
    original_last_modified_date__c = models.DateTimeField(null=True, verbose_name=u'Original Last Modified Date', db_column=u'Original_Last_Modified_Date__c', blank=True) # Field name made lowercase.
    plan_name__c = models.CharField(max_length=80, verbose_name=u'Plan Name', db_column=u'Plan_Name__c', blank=True) # Field name made lowercase.
    migrated__c = models.BooleanField(help_text=u'Was this record migrated from old tenant?', verbose_name=u'Migrated', db_column=u'Migrated__c') # Field name made lowercase.
    mkto_si__marketoanalyzer__c = models.CharField(max_length=1300, verbose_name=u'Marketo Opportunity Analysis', sf_read_only=models.READ_ONLY, db_column=u'mkto_si__MarketoAnalyzer__c', blank=True) # Field name made lowercase.
    subsidy_amount__c = models.DecimalField(db_column=u'Subsidy_Amount__c', decimal_places=2, max_digits=6, blank=True, null=True, verbose_name=u'Subsidy Amount') # Field name made lowercase.
    original_lead__c = models.ForeignKey('Lead', null=True, db_column=u'Original_Lead__c', blank=True) # Field name made lowercase.
    product_id_lookup__c = models.CharField(max_length=60, verbose_name=u'Product ID Lookup', db_column=u'Product_ID_Lookup__c', blank=True) # Field name made lowercase.
    plan_id_look_up__c = models.CharField(max_length=60, verbose_name=u'Plan ID Look Up', db_column=u'Plan_ID_Look_Up__c', blank=True) # Field name made lowercase.
    iscloned__c = models.BooleanField(verbose_name=u'isCloned', db_column=u'isCloned__c') # Field name made lowercase.
    cloned_from__c = models.ForeignKey('self', null=True, db_column=u'Cloned_From__c', blank=True) # Field name made lowercase.
    isvipaccount__c = models.BooleanField(verbose_name=u'isVIPAccount', db_column=u'isVIPAccount__c') # Field name made lowercase.
    clonecomments__c = models.CharField(max_length=50, verbose_name=u'cloneComments', db_column=u'cloneComments__c', blank=True) # Field name made lowercase.
    application_uuid__c = models.CharField(help_text=u'UUID generated by IM Platform During the Application Process', max_length=75, verbose_name=u'Application UUID', db_column=u'Application_UUID__c', blank=True) # Field name made lowercase.
    page_name__c = models.CharField(max_length=35, verbose_name=u'Page Name', db_column=u'Page_Name__c', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Opportunity'
        verbose_name = 'Opportunity'
        verbose_name_plural = 'Opportunities'
        # keyPrefix = '006'

class Opportunitycompetitor(models.Model):
    opportunityid = models.ForeignKey('Opportunity', db_column=u'OpportunityId') # Field name made lowercase.
    competitorname = models.CharField(max_length=40, verbose_name=u'Competitor Name', db_column=u'CompetitorName', blank=True) # Field name made lowercase.
    strengths = models.CharField(max_length=1000, verbose_name=u'Strengths', db_column=u'Strengths', blank=True) # Field name made lowercase.
    weaknesses = models.CharField(max_length=1000, verbose_name=u'Weaknesses', db_column=u'Weaknesses', blank=True) # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'OpportunityCompetitor'
        verbose_name = 'Opportunity: Competitor'
        verbose_name_plural = 'Opportunity: Competitor'
        # keyPrefix = '00J'

class Opportunitycontactrole(models.Model):
    opportunityid = models.ForeignKey('Opportunity', db_column=u'OpportunityId') # Field name made lowercase.
    contactid = models.ForeignKey('Contact', db_column=u'ContactId') # Field name made lowercase.
    role = models.CharField(blank=True, max_length=40, verbose_name=u'Role', db_column=u'Role', choices=[(u'Business User', u'Business User'), (u'Decision Maker', u'Decision Maker'), (u'Economic Buyer', u'Economic Buyer'), (u'Economic Decision Maker', u'Economic Decision Maker'), (u'Evaluator', u'Evaluator'), (u'Executive Sponsor', u'Executive Sponsor'), (u'Influencer', u'Influencer'), (u'Technical Buyer', u'Technical Buyer'), (u'Other', u'Other')]) # Field name made lowercase.
    isprimary = models.BooleanField(verbose_name=u'Primary', db_column=u'IsPrimary') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'OpportunityContactRole'
        verbose_name = 'Opportunity Contact Role'
        verbose_name_plural = 'Opportunity Contact Role'
        # keyPrefix = '00K'

class Opportunityfeed(models.Model):
    parentid = models.ForeignKey('Opportunity', db_column=u'ParentId') # Field name made lowercase.
    type = models.CharField(db_column=u'Type', choices=[(u'TrackedChange', u'Tracked Change'), (u'UserStatus', u'User Status'), (u'TextPost', u'Text Post'), (u'AdvancedTextPost', u'Advanced Text Post'), (u'LinkPost', u'Link Post'), (u'ContentPost', u'Content Post'), (u'PollPost', u'Poll'), (u'RypplePost', u'Work.com Thanks'), (u'ProfileSkillPost', u'Profile Skill Post'), (u'DashboardComponentSnapshot', u'Dashboard Component Snapshot'), (u'ApprovalPost', u'Approval Post'), (u'CaseCommentPost', u'Case Comment Feed'), (u'ReplyPost', u'Reply Post'), (u'EmailMessageEvent', u'Email Message Feed'), (u'CallLogPost', u'Call Log Feed'), (u'ChangeStatusPost', u'Change Status Feed'), (u'AttachArticleEvent', u'Attached Article'), (u'MilestoneEvent', u'Milestone Event'), (u'ActivityEvent', u'Activity Change'), (u'ChatTranscriptPost', u'Chat Transcript Post'), (u'CollaborationGroupCreated', u'Collaboration Group Created'), (u'CollaborationGroupUnarchived', u'Collaboration Group Reactivated'), (u'SocialPost', u'Social Post'), (u'QuestionPost', u'Question Post'), (u'FacebookPost', u'Facebook Post'), (u'BasicTemplateFeedItem', u'Basic Template Post'), (u'CreateRecordEvent', u'Created Record'), (u'CanvasPost', u'Canvas'), (u'AnnouncementPost', u'a')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Feed Item Type') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    commentcount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Comment Count', db_column=u'CommentCount') # Field name made lowercase.
    likecount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Like Count', db_column=u'LikeCount') # Field name made lowercase.
    title = models.CharField(max_length=255, verbose_name=u'Title', sf_read_only=models.READ_ONLY, db_column=u'Title', blank=True) # Field name made lowercase.
    body = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Body', db_column=u'Body', blank=True) # Field name made lowercase.
    linkurl = models.URLField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Link Url', db_column=u'LinkUrl', blank=True) # Field name made lowercase.
    relatedrecordid = models.ForeignKey('Contentversion', null=True, db_column=u'RelatedRecordId', blank=True) # Field name made lowercase.
    contentdata = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Content Data', db_column=u'ContentData', blank=True) # Field name made lowercase.
    contentfilename = models.CharField(max_length=255, verbose_name=u'Content File Name', sf_read_only=models.READ_ONLY, db_column=u'ContentFileName', blank=True) # Field name made lowercase.
    contentdescription = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Content Description', db_column=u'ContentDescription', blank=True) # Field name made lowercase.
    contenttype = models.CharField(max_length=120, verbose_name=u'Content File Type', sf_read_only=models.READ_ONLY, db_column=u'ContentType', blank=True) # Field name made lowercase.
    contentsize = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Content Size', db_column=u'ContentSize', blank=True) # Field name made lowercase.
    insertedbyid = models.ForeignKey('User', null=True, db_column=u'InsertedById', blank=True) # Field name made lowercase.
    networkscope = models.CharField(db_column=u'NetworkScope', choices=[(u'AllNetworks', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Network Scope') # Field name made lowercase.
    visibility = models.CharField(db_column=u'Visibility', choices=[(u'AllUsers', None), (u'InternalUsers', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Visibility') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'OpportunityFeed'
        verbose_name = 'Opportunity Feed'
        verbose_name_plural = 'Opportunity Feed'
        # keyPrefix = 'None'

class Opportunityfieldhistory(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    opportunityid = models.ForeignKey('Opportunity', db_column=u'OpportunityId') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    field = models.CharField(max_length=255, verbose_name=u'Changed Field', sf_read_only=models.READ_ONLY, db_column=u'Field', choices=[(u'Account', None), (u'Active_Date__c', None), (u'Amount', None), (u'Application_Completed_Date__c', None), (u'Application_Started__c', None), (u'Application_UUID__c', None), (u'Campaign', None), (u'Carrier__c', None), (u'Child_Only_Application__c', None), (u'cloneComments__c', None), (u'Cloned_From__c', None), (u'CloseDate', None), (u'Commission_Type_Agency__c', None), (u'Commission_Type_Producer__c', None), (u'Commission_Value_Agency__c', None), (u'Commission_Value_Producer__c', None), (u'Contract', None), (u'Coverage_Amount__c', None), (u'Coverage_Interests__c', None), (u'created', u'Created.'), (u'opportunityCreatedFromLead', u'Created by lead convert'), (u'Current_Carrier_s__c', None), (u'Current_Policy__c', None), (u'Current_Policy_Expiration_Date__c', None), (u'Depth__c', None), (u'Description', None), (u'Effective_Date_of_New_Policy__c', None), (u'Exchange_Details__c', None), (u'Expiration_Date_of_New_Policy__c', None), (u'feedEvent', u'Feed event'), (u'ForecastCategoryName', None), (u'isCloned__c', None), (u'IsPrivate', None), (u'isVIPAccount__c', None), (u'Lead_Type__c', None), (u'LeadSource', None), (u'Line_of_Business__c', None), (u'Migrated__c', None), (u'Monthly_Premium__c', None), (u'Name', None), (u'Network__c', None), (u'NextStep', None), (u'of_Members__c', None), (u'Optional_Benefits__c', None), (u'Original_Carrier_ID__c', None), (u'Original_Last_Modified_By__c', None), (u'Original_Last_Modified_Date__c', None), (u'Original_Lead__c', None), (u'Original_Object_ID__c', None), (u'Original_Owner_ID__c', None), (u'Out_of_Force_Date__c', None), (u'Owner', None), (u'ownerAccepted', u'Owner (Accepted)'), (u'ownerAssignment', u'Owner (Assignment)'), (u'Page_Name__c', None), (u'Payment_Mode__c', None), (u'Plan_ID_Look_Up__c', None), (u'Plan_Name__c', None), (u'Plan_Notes__c', None), (u'Plan_Selected__c', None), (u'Plan_Selected_Hybrid__c', None), (u'Policy_Holder__c', None), (u'Probability', None), (u'Producer__c', None), (u'Product_ID_Lookup__c', None), (u'Reason_Lost__c', None), (u'locked', u'Record locked.'), (u'RecordType', None), (u'unlocked', u'Record unlocked.'), (u'Selected_Carrier__c', None), (u'StageName', None), (u'Subsidy_Amount__c', None), (u'SyncedQuote', None), (u'Target_Annualized_Premium__c', None), (u'Total_Policy_Premium__c', None), (u'TotalOpportunityQuantity', None), (u'Type', None), (u'Underwriting_Status__c', None)]) # Field name made lowercase.
    oldvalue = models.CharField(max_length=255, verbose_name=u'Old Value', sf_read_only=models.READ_ONLY, db_column=u'OldValue', blank=True) # Field name made lowercase.
    newvalue = models.CharField(max_length=255, verbose_name=u'New Value', sf_read_only=models.READ_ONLY, db_column=u'NewValue', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'OpportunityFieldHistory'
        verbose_name = 'Opportunity Field History'
        verbose_name_plural = 'Opportunity Field History'
        # keyPrefix = 'None'

class Opportunityhistory(models.Model):
    opportunityid = models.ForeignKey('Opportunity', db_column=u'OpportunityId') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    stagename = models.CharField(max_length=40, verbose_name=u'Stage Name', sf_read_only=models.READ_ONLY, db_column=u'StageName', choices=[(u'Prospecting', u'Prospecting'), (u'Qualification', u'Qualification'), (u'Out To Market', u'Out To Market'), (u'Proposal To Customer', u'Proposal To Customer'), (u'Carrier Selected', u'Carrier Selected'), (u'Closed Won', u'Closed Won'), (u'Closed Lost', u'Closed Lost'), (u'App Pending', u'App Pending'), (u'In-Force', u'In-Force')]) # Field name made lowercase.
    amount = models.DecimalField(decimal_places=2, db_column=u'Amount', sf_read_only=models.READ_ONLY, max_digits=18, blank=True, null=True, verbose_name=u'Annualized Premium') # Field name made lowercase.
    expectedrevenue = models.DecimalField(decimal_places=2, db_column=u'ExpectedRevenue', sf_read_only=models.READ_ONLY, max_digits=18, blank=True, null=True, verbose_name=u'Expected Revenue') # Field name made lowercase.
    closedate = models.DateField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Close Date', db_column=u'CloseDate', blank=True) # Field name made lowercase.
    probability = models.DecimalField(decimal_places=0, db_column=u'Probability', sf_read_only=models.READ_ONLY, max_digits=3, blank=True, null=True, verbose_name=u'Probability') # Field name made lowercase.
    forecastcategory = models.CharField(db_column=u'ForecastCategory', choices=[(u'Omitted', u'Omitted'), (u'Pipeline', u'Pipeline'), (u'BestCase', u'Best Case'), (u'Forecast', u'Commit'), (u'Closed', u'Closed')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'To ForecastCategory') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'OpportunityHistory'
        verbose_name = 'Opportunity History'
        verbose_name_plural = 'Opportunity History'
        # keyPrefix = '008'

class Opportunitylineitem(models.Model):
    opportunityid = models.ForeignKey('Opportunity', db_column=u'OpportunityId') # Field name made lowercase.
    sortorder = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Sort Order', db_column=u'SortOrder', blank=True) # Field name made lowercase.
    pricebookentryid = models.ForeignKey('Pricebookentry', null=True, db_column=u'PricebookEntryId', blank=True) # Field name made lowercase.
    product2id = models.ForeignKey('Product2', null=True, db_column=u'Product2Id', blank=True) # Field name made lowercase.
    productcode = models.CharField(max_length=255, verbose_name=u'Product Code', sf_read_only=models.READ_ONLY, db_column=u'ProductCode', blank=True) # Field name made lowercase.
    name = models.CharField(max_length=376, verbose_name=u'Opportunity Product Name', sf_read_only=models.READ_ONLY, db_column=u'Name', blank=True) # Field name made lowercase.
    quantity = models.DecimalField(decimal_places=2, verbose_name=u'Quantity', max_digits=12, db_column=u'Quantity') # Field name made lowercase.
    totalprice = models.DecimalField(db_column=u'TotalPrice', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Total Price') # Field name made lowercase.
    unitprice = models.DecimalField(db_column=u'UnitPrice', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Sales Price') # Field name made lowercase.
    listprice = models.DecimalField(decimal_places=2, db_column=u'ListPrice', sf_read_only=models.READ_ONLY, max_digits=18, blank=True, null=True, verbose_name=u'List Price') # Field name made lowercase.
    servicedate = models.DateField(null=True, verbose_name=u'Date', db_column=u'ServiceDate', blank=True) # Field name made lowercase.
    description = models.CharField(max_length=255, verbose_name=u'Line Description', db_column=u'Description', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'OpportunityLineItem'
        verbose_name = 'Opportunity Product'
        verbose_name_plural = 'Opportunity Product'
        # keyPrefix = '00k'

class Opportunitypartner(models.Model):
    opportunityid = models.ForeignKey('Opportunity', db_column=u'OpportunityId') # Field name made lowercase.
    accounttoid = models.ForeignKey('Account', db_column=u'AccountToId') # Field name made lowercase.
    role = models.CharField(db_column=u'Role', choices=[(u'Advertiser', u'Advertiser'), (u'Agency', u'Agency'), (u'Broker', u'Broker'), (u'Consultant', u'Consultant'), (u'Dealer', u'Dealer'), (u'Developer', u'Developer'), (u'Distributor', u'Distributor'), (u'Institution', u'Institution'), (u'Lender', u'Lender'), (u'System Integrator', u'System Integrator'), (u'VAR/Reseller', u'VAR/Reseller')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Role') # Field name made lowercase.
    isprimary = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Primary', db_column=u'IsPrimary') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    reversepartnerid = models.ForeignKey('self', null=True, db_column=u'ReversePartnerId', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'OpportunityPartner'
        verbose_name = 'Opportunity Partner'
        verbose_name_plural = 'Opportunity Partner'
        # keyPrefix = 'None'

class Opportunityshare(models.Model):
    opportunityid = models.ForeignKey('Opportunity', db_column=u'OpportunityId') # Field name made lowercase.
    userorgroupid = models.ForeignKey('Group', db_column=u'UserOrGroupId') # Field name made lowercase.
    opportunityaccesslevel = models.CharField(max_length=40, verbose_name=u'Opportunity Access', db_column=u'OpportunityAccessLevel', choices=[(u'Read', u'Read Only'), (u'Edit', u'Read/Write'), (u'All', u'Owner')]) # Field name made lowercase.
    rowcause = models.CharField(db_column=u'RowCause', choices=[(u'Owner', u'Owner'), (u'Manual', u'Manual Sharing'), (u'Rule', u'Sharing Rule'), (u'ImplicitChild', u'Account Sharing'), (u'ImplicitParent', u'Associated record owner or sharing'), (u'Team', u'Sales Team'), (u'Territory', u'Territory Assignment Rule'), (u'TerritoryManual', u'Territory Manual'), (u'TerritoryRule', u'Territory Sharing Rule')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Row Cause') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'OpportunityShare'
        verbose_name = 'Opportunity Share'
        verbose_name_plural = 'Opportunity Share'
        # keyPrefix = '00t'

class Opportunitystage(models.Model):
    masterlabel = models.CharField(max_length=255, verbose_name=u'Master Label', sf_read_only=models.READ_ONLY, db_column=u'MasterLabel', blank=True) # Field name made lowercase.
    isactive = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Is Active', db_column=u'IsActive') # Field name made lowercase.
    sortorder = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Sort Order', db_column=u'SortOrder', blank=True) # Field name made lowercase.
    isclosed = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Closed', db_column=u'IsClosed') # Field name made lowercase.
    iswon = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Won', db_column=u'IsWon') # Field name made lowercase.
    forecastcategory = models.CharField(max_length=40, verbose_name=u'Forecast Category', sf_read_only=models.READ_ONLY, db_column=u'ForecastCategory', choices=[(u'Omitted', u'Omitted'), (u'Pipeline', u'Pipeline'), (u'BestCase', u'Best Case'), (u'Forecast', u'Commit'), (u'Closed', u'Closed')]) # Field name made lowercase.
    forecastcategoryname = models.CharField(max_length=40, verbose_name=u'Forecast Category Name', sf_read_only=models.READ_ONLY, db_column=u'ForecastCategoryName', choices=[(u'Omitted', u'Omitted'), (u'Pipeline', u'Pipeline'), (u'Best Case', u'Best Case'), (u'Commit', u'Commit'), (u'Closed', u'Closed')]) # Field name made lowercase.
    defaultprobability = models.DecimalField(decimal_places=0, db_column=u'DefaultProbability', sf_read_only=models.READ_ONLY, max_digits=3, blank=True, null=True, verbose_name=u'Probability (%)') # Field name made lowercase.
    description = models.CharField(max_length=255, verbose_name=u'Description', sf_read_only=models.READ_ONLY, db_column=u'Description', blank=True) # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'OpportunityStage'
        verbose_name = 'Opportunity Stage'
        verbose_name_plural = 'Opportunity Stage'
        # keyPrefix = 'None'

class Orgwideemailaddress(models.Model):
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    address = models.EmailField(verbose_name=u'Email Address', db_column=u'Address') # Field name made lowercase.
    displayname = models.CharField(max_length=300, verbose_name=u'Display Name', db_column=u'DisplayName') # Field name made lowercase.
    isallowallprofiles = models.BooleanField(verbose_name=u'Allow All Profiles', db_column=u'IsAllowAllProfiles') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'OrgWideEmailAddress'
        verbose_name = 'Organization-wide From Email Address'
        verbose_name_plural = 'Organization-wide From Email Addresses'
        # keyPrefix = '0D2'

class Organization(models.Model):
    name = models.CharField(max_length=80, verbose_name=u'Name', sf_read_only=models.NOT_CREATEABLE, db_column=u'Name') # Field name made lowercase.
    division = models.CharField(max_length=80, verbose_name=u'Division', sf_read_only=models.NOT_CREATEABLE, db_column=u'Division', blank=True) # Field name made lowercase.
    street = models.TextField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Street', db_column=u'Street', blank=True) # Field name made lowercase.
    city = models.CharField(max_length=40, verbose_name=u'City', sf_read_only=models.NOT_CREATEABLE, db_column=u'City', blank=True) # Field name made lowercase.
    state = models.CharField(max_length=80, verbose_name=u'State/Province', sf_read_only=models.NOT_CREATEABLE, db_column=u'State', blank=True) # Field name made lowercase.
    postalcode = models.CharField(max_length=20, verbose_name=u'Zip/Postal Code', sf_read_only=models.NOT_CREATEABLE, db_column=u'PostalCode', blank=True) # Field name made lowercase.
    country = models.CharField(max_length=80, verbose_name=u'Country', sf_read_only=models.READ_ONLY, db_column=u'Country', blank=True) # Field name made lowercase.
    latitude = models.DecimalField(decimal_places=15, db_column=u'Latitude', sf_read_only=models.NOT_CREATEABLE, max_digits=18, blank=True, null=True, verbose_name=u'Latitude') # Field name made lowercase.
    longitude = models.DecimalField(decimal_places=15, db_column=u'Longitude', sf_read_only=models.NOT_CREATEABLE, max_digits=18, blank=True, null=True, verbose_name=u'Longitude') # Field name made lowercase.
    address = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Address', db_column=u'Address', blank=True) # Field name made lowercase. This field type is a guess.
    phone = models.CharField(max_length=40, verbose_name=u'Phone', sf_read_only=models.NOT_CREATEABLE, db_column=u'Phone', blank=True) # Field name made lowercase.
    fax = models.CharField(max_length=40, verbose_name=u'Fax', sf_read_only=models.NOT_CREATEABLE, db_column=u'Fax', blank=True) # Field name made lowercase.
    primarycontact = models.CharField(max_length=80, verbose_name=u'Primary Contact', sf_read_only=models.NOT_CREATEABLE, db_column=u'PrimaryContact', blank=True) # Field name made lowercase.
    defaultlocalesidkey = models.CharField(max_length=40, verbose_name=u'Locale', sf_read_only=models.NOT_CREATEABLE, db_column=u'DefaultLocaleSidKey', choices=[(u'sq_AL', u'Albanian (Albania)'), (u'ar_BH', u'Arabic (Bahrain)'), (u'ar_EG', u'Arabic (Egypt)'), (u'ar_JO', u'Arabic (Jordan)'), (u'ar_KW', u'Arabic (Kuwait)'), (u'ar_LB', u'Arabic (Lebanon)'), (u'ar_QA', u'Arabic (Qatar)'), (u'ar_SA', u'Arabic (Saudi Arabia)'), (u'ar_AE', u'Arabic (United Arab Emirates)'), (u'hy_AM', u'Armenian (Armenia)'), (u'az_AZ', u'Azerbaijani (Azerbaijan)'), (u'eu_ES', u'Basque (Spain)'), (u'be_BY', u'Belarusian (Belarus)'), (u'bn_BD', u'Bengali (Bangladesh)'), (u'bs_BA', u'Bosnian (Bosnia and Herzegovina)'), (u'bg_BG', u'Bulgarian (Bulgaria)'), (u'ca_ES', u'Catalan (Spain)'), (u'zh_CN_PINYIN', u'Chinese (China, Pinyin Ordering)'), (u'zh_CN_STROKE', u'Chinese (China, Stroke Ordering)'), (u'zh_CN', u'Chinese (China)'), (u'zh_HK_STROKE', u'Chinese (Hong Kong SAR China, Stroke Ordering)'), (u'zh_HK', u'Chinese (Hong Kong SAR China)'), (u'zh_MO', u'Chinese (Macau SAR China)'), (u'zh_SG', u'Chinese (Singapore)'), (u'zh_TW_STROKE', u'Chinese (Taiwan, Stroke Ordering)'), (u'zh_TW', u'Chinese (Taiwan)'), (u'hr_HR', u'Croatian (Croatia)'), (u'cs_CZ', u'Czech (Czech Republic)'), (u'da_DK', u'Danish (Denmark)'), (u'nl_BE', u'Dutch (Belgium)'), (u'nl_NL', u'Dutch (Netherlands)'), (u'nl_SR', u'Dutch (Suriname)'), (u'en_AU', u'English (Australia)'), (u'en_BB', u'English (Barbados)'), (u'en_BM', u'English (Bermuda)'), (u'en_CA', u'English (Canada)'), (u'en_GH', u'English (Ghana)'), (u'en_IN', u'English (India)'), (u'en_ID', u'English (Indonesia)'), (u'en_IE', u'English (Ireland)'), (u'en_MY', u'English (Malaysia)'), (u'en_NZ', u'English (New Zealand)'), (u'en_NG', u'English (Nigeria)'), (u'en_PK', u'English (Pakistan)'), (u'en_PH', u'English (Philippines)'), (u'en_SG', u'English (Singapore)'), (u'en_ZA', u'English (South Africa)'), (u'en_GB', u'English (United Kingdom)'), (u'en_US', u'English (United States)'), (u'et_EE', u'Estonian (Estonia)'), (u'fi_FI', u'Finnish (Finland)'), (u'fr_BE', u'French (Belgium)'), (u'fr_CA', u'French (Canada)'), (u'fr_FR', u'French (France)'), (u'fr_LU', u'French (Luxembourg)'), (u'fr_MC', u'French (Monaco)'), (u'fr_CH', u'French (Switzerland)'), (u'ka_GE', u'Georgian (Georgia)'), (u'de_AT', u'German (Austria)'), (u'de_DE', u'German (Germany)'), (u'de_LU', u'German (Luxembourg)'), (u'de_CH', u'German (Switzerland)'), (u'el_GR', u'Greek (Greece)'), (u'iw_IL', u'Hebrew (Israel)'), (u'hi_IN', u'Hindi (India)'), (u'hu_HU', u'Hungarian (Hungary)'), (u'is_IS', u'Icelandic (Iceland)'), (u'in_ID', u'Indonesian (Indonesia)'), (u'ga_IE', u'Irish (Ireland)'), (u'it_IT', u'Italian (Italy)'), (u'it_CH', u'Italian (Switzerland)'), (u'ja_JP', u'Japanese (Japan)'), (u'kk_KZ', u'Kazakh (Kazakhstan)'), (u'km_KH', u'Khmer (Cambodia)'), (u'ky_KG', u'Kirghiz (Kyrgyzstan)'), (u'ko_KR', u'Korean (South Korea)'), (u'lv_LV', u'Latvian (Latvia)'), (u'lt_LT', u'Lithuanian (Lithuania)'), (u'lb_LU', u'Luxembourgish (Luxembourg)'), (u'mk_MK', u'Macedonian (Macedonia)'), (u'ms_BN', u'Malay (Brunei)'), (u'ms_MY', u'Malay (Malaysia)'), (u'mt_MT', u'Maltese (Malta)'), (u'sh_ME', u'Montenegrin (Montenegro)'), (u'no_NO', u'Norwegian (Norway)'), (u'pl_PL', u'Polish (Poland)'), (u'pt_AO', u'Portuguese (Angola)'), (u'pt_BR', u'Portuguese (Brazil)'), (u'pt_PT', u'Portuguese (Portugal)'), (u'ro_MD', u'Romanian (Moldova)'), (u'ro_RO', u'Romanian (Romania)'), (u'rm_CH', u'Romansh (Switzerland)'), (u'ru_RU', u'Russian (Russia)'), (u'sr_BA', u'Serbian (Bosnia and Herzegovina)'), (u'sh_BA', u'Serbian (Latin) (Bosnia and Herzegovina)'), (u'sh_CS', u'Serbian (Latin) (Serbia)'), (u'sr_CS', u'Serbian (Serbia and Montenegro)'), (u'sk_SK', u'Slovak (Slovakia)'), (u'sl_SI', u'Slovenian (Slovenia)'), (u'es_AR', u'Spanish (Argentina)'), (u'es_BO', u'Spanish (Bolivia)'), (u'es_CL', u'Spanish (Chile)'), (u'es_CO', u'Spanish (Colombia)'), (u'es_CR', u'Spanish (Costa Rica)'), (u'es_DO', u'Spanish (Dominican Republic)'), (u'es_EC', u'Spanish (Ecuador)'), (u'es_SV', u'Spanish (El Salvador)'), (u'es_GT', u'Spanish (Guatemala)'), (u'es_HN', u'Spanish (Honduras)'), (u'es_MX', u'Spanish (Mexico)'), (u'es_PA', u'Spanish (Panama)'), (u'es_PY', u'Spanish (Paraguay)'), (u'es_PE', u'Spanish (Peru)'), (u'es_PR', u'Spanish (Puerto Rico)'), (u'es_ES', u'Spanish (Spain)'), (u'es_UY', u'Spanish (Uruguay)'), (u'es_VE', u'Spanish (Venezuela)'), (u'sv_SE', u'Swedish (Sweden)'), (u'tl_PH', u'Tagalog (Philippines)'), (u'tg_TJ', u'Tajik (Tajikistan)'), (u'ta_IN', u'Tamil (India)'), (u'th_TH', u'Thai (Thailand)'), (u'tr_TR', u'Turkish (Turkey)'), (u'uk_UA', u'Ukrainian (Ukraine)'), (u'ur_PK', u'Urdu (Pakistan)'), (u'vi_VN', u'Vietnamese (Vietnam)'), (u'cy_GB', u'Welsh (United Kingdom)')]) # Field name made lowercase.
    languagelocalekey = models.CharField(max_length=40, verbose_name=u'Language', sf_read_only=models.NOT_CREATEABLE, db_column=u'LanguageLocaleKey', choices=[(u'en_US', u'English'), (u'de', u'German'), (u'es', u'Spanish'), (u'fr', u'French'), (u'it', u'Italian'), (u'ja', u'Japanese'), (u'sv', u'Swedish'), (u'ko', u'Korean'), (u'zh_TW', u'Chinese (Traditional)'), (u'zh_CN', u'Chinese (Simplified)'), (u'pt_BR', u'Portuguese (Brazilian)'), (u'nl_NL', u'Dutch'), (u'da', u'Danish'), (u'th', u'Thai'), (u'fi', u'Finnish'), (u'ru', u'Russian'), (u'es_MX', u'Spanish (Mexican)'), (u'no', u'Norwegian')]) # Field name made lowercase.
    receivesinfoemails = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Info Emails', db_column=u'ReceivesInfoEmails') # Field name made lowercase.
    receivesadmininfoemails = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Info Emails Admin', db_column=u'ReceivesAdminInfoEmails') # Field name made lowercase.
    preferencesrequireopportunityproducts = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'RequireOpportunityProducts', db_column=u'PreferencesRequireOpportunityProducts') # Field name made lowercase.
    fiscalyearstartmonth = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Fiscal Year Starts In', db_column=u'FiscalYearStartMonth', blank=True) # Field name made lowercase.
    usesstartdateasfiscalyearname = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Fiscal Year Name by Start', db_column=u'UsesStartDateAsFiscalYearName') # Field name made lowercase.
    defaultaccountaccess = models.CharField(db_column=u'DefaultAccountAccess', choices=[(u'None', u'Private'), (u'Read', u'Read Only'), (u'Edit', u'Read/Write')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Default Account Access') # Field name made lowercase.
    defaultcontactaccess = models.CharField(db_column=u'DefaultContactAccess', choices=[(u'None', u'Private'), (u'Read', u'Read Only'), (u'Edit', u'Read/Write'), (u'ControlledByParent', u'Controlled By Parent')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Default Contact Access') # Field name made lowercase.
    defaultopportunityaccess = models.CharField(db_column=u'DefaultOpportunityAccess', choices=[(u'None', u'Private'), (u'Read', u'Read Only'), (u'Edit', u'Read/Write')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Default Opportunity Access') # Field name made lowercase.
    defaultleadaccess = models.CharField(db_column=u'DefaultLeadAccess', choices=[(u'None', u'Private'), (u'Read', u'Read Only'), (u'Edit', u'Read/Write'), (u'ReadEditTransfer', u'Read/Write/Transfer')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Default Lead Access') # Field name made lowercase.
    defaultcaseaccess = models.CharField(db_column=u'DefaultCaseAccess', choices=[(u'None', u'Private'), (u'Read', u'Read Only'), (u'Edit', u'Read/Write'), (u'ReadEditTransfer', u'Read/Write/Transfer')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Default Case Access') # Field name made lowercase.
    defaultcalendaraccess = models.CharField(db_column=u'DefaultCalendarAccess', choices=[(u'HideDetails', u'Hide Details'), (u'HideDetailsInsert', u'Hide Details and Add Events'), (u'ShowDetails', u'Show Details'), (u'ShowDetailsInsert', u'Show Details and Add Events'), (u'AllowEdits', u'Full Access')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Default Calendar Access') # Field name made lowercase.
    defaultpricebookaccess = models.CharField(db_column=u'DefaultPricebookAccess', choices=[(u'None', u'No Access'), (u'Read', u'View Only'), (u'ReadSelect', u'Use')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Default Price Book Access') # Field name made lowercase.
    defaultcampaignaccess = models.CharField(db_column=u'DefaultCampaignAccess', choices=[(u'None', u'Private'), (u'Read', u'Read Only'), (u'Edit', u'Read/Write'), (u'All', u'Owner')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Default Campaign Access') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    compliancebccemail = models.EmailField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Compliance BCC Email', db_column=u'ComplianceBccEmail', blank=True) # Field name made lowercase.
    uiskin = models.CharField(db_column=u'UiSkin', choices=[(u'Theme1', u'salesforce.com Classic'), (u'Theme2', u'salesforce.com'), (u'PortalDefault', u'Portal Default'), (u'Webstore', u'Webstore'), (u'Theme3', u'Aloha')], max_length=40, blank=True, sf_read_only=models.NOT_CREATEABLE, verbose_name=u'UI Skin') # Field name made lowercase.
    trialexpirationdate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Trial Expiration Date', db_column=u'TrialExpirationDate', blank=True) # Field name made lowercase.
    organizationtype = models.CharField(db_column=u'OrganizationType', choices=[(u'Team Edition', None), (u'Professional Edition', None), (u'Enterprise Edition', None), (u'Developer Edition', None), (u'Personal Edition', None), (u'Unlimited Edition', None), (u'Contact Manager Edition', None), (u'Base Edition', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Edition') # Field name made lowercase.
    instancename = models.CharField(max_length=5, verbose_name=u'Instance Name', sf_read_only=models.READ_ONLY, db_column=u'InstanceName', blank=True) # Field name made lowercase.
    issandbox = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Is Sandbox', db_column=u'IsSandbox') # Field name made lowercase.
    webtocasedefaultorigin = models.CharField(max_length=40, verbose_name=u'Web to Cases Default Origin', sf_read_only=models.NOT_CREATEABLE, db_column=u'WebToCaseDefaultOrigin', blank=True) # Field name made lowercase.
    monthlypageviewsused = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Monthly Page Views Used', db_column=u'MonthlyPageViewsUsed', blank=True) # Field name made lowercase.
    monthlypageviewsentitlement = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Monthly Page Views Allowed', db_column=u'MonthlyPageViewsEntitlement', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Organization'
        verbose_name = 'Organization'
        verbose_name_plural = 'Organizations'
        # keyPrefix = '00D'

class Ownedcontentdocument(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    ownerid = models.ForeignKey('User', db_column=u'OwnerId') # Field name made lowercase.
    contentdocumentid = models.ForeignKey('Contentdocument', null=True, db_column=u'ContentDocumentId', blank=True) # Field name made lowercase.
    title = models.CharField(max_length=255, verbose_name=u'Title', sf_read_only=models.READ_ONLY, db_column=u'Title') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created', db_column=u'CreatedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Content Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    filetype = models.CharField(max_length=20, verbose_name=u'File Type', sf_read_only=models.READ_ONLY, db_column=u'FileType', blank=True) # Field name made lowercase.
    contentsize = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Content Size', db_column=u'ContentSize', blank=True) # Field name made lowercase.
    fileextension = models.CharField(max_length=40, verbose_name=u'File Extension', sf_read_only=models.READ_ONLY, db_column=u'FileExtension', blank=True) # Field name made lowercase.
    contenturl = models.URLField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Content URL', db_column=u'ContentUrl', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'OwnedContentDocument'
        verbose_name = 'User Owned File'
        verbose_name_plural = 'User Owned File'
        # keyPrefix = 'None'

class Packagelicense(models.Model):
    status = models.CharField(max_length=40, verbose_name=u'Status', sf_read_only=models.READ_ONLY, db_column=u'Status', choices=[(u'Trial', u'Trial'), (u'Free', u'Free'), (u'Active', u'Active')]) # Field name made lowercase.
    isprovisioned = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Is Provisioned', db_column=u'IsProvisioned') # Field name made lowercase.
    allowedlicenses = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Allowed Licenses', db_column=u'AllowedLicenses') # Field name made lowercase.
    usedlicenses = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Used Licenses', db_column=u'UsedLicenses') # Field name made lowercase.
    expirationdate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Expiration Date', db_column=u'ExpirationDate', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    namespaceprefix = models.CharField(max_length=40, verbose_name=u'Namespace Prefix', sf_read_only=models.READ_ONLY, db_column=u'NamespacePrefix') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'PackageLicense'
        verbose_name = 'Package License'
        verbose_name_plural = 'Package License'
        # keyPrefix = '050'

class Partner(models.Model):
    opportunityid = models.ForeignKey('Opportunity', null=True, db_column=u'OpportunityId', blank=True) # Field name made lowercase.
    accountfromid = models.ForeignKey('Account', null=True, db_column=u'AccountFromId', blank=True) # Field name made lowercase.
    accounttoid = models.ForeignKey('Account', db_column=u'AccountToId') # Field name made lowercase.
    role = models.CharField(db_column=u'Role', choices=[(u'Advertiser', u'Advertiser'), (u'Agency', u'Agency'), (u'Broker', u'Broker'), (u'Consultant', u'Consultant'), (u'Dealer', u'Dealer'), (u'Developer', u'Developer'), (u'Distributor', u'Distributor'), (u'Institution', u'Institution'), (u'Lender', u'Lender'), (u'System Integrator', u'System Integrator'), (u'VAR/Reseller', u'VAR/Reseller')], max_length=40, blank=True, sf_read_only=models.NOT_UPDATEABLE, verbose_name=u'Role') # Field name made lowercase.
    isprimary = models.BooleanField(sf_read_only=models.NOT_UPDATEABLE, verbose_name=u'Primary', db_column=u'IsPrimary') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    reversepartnerid = models.ForeignKey('self', null=True, db_column=u'ReversePartnerId', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Partner'
        verbose_name = 'Partner'
        verbose_name_plural = 'Partner'
        # keyPrefix = '00I'

class Partnerrole(models.Model):
    masterlabel = models.CharField(max_length=255, verbose_name=u'Master Label', sf_read_only=models.READ_ONLY, db_column=u'MasterLabel', blank=True) # Field name made lowercase.
    sortorder = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Sort Order', db_column=u'SortOrder', blank=True) # Field name made lowercase.
    reverserole = models.CharField(db_column=u'ReverseRole', choices=[(u'Advertiser', u'Advertiser'), (u'Agency', u'Agency'), (u'Broker', u'Broker'), (u'Consultant', u'Consultant'), (u'Dealer', u'Dealer'), (u'Developer', u'Developer'), (u'Distributor', u'Distributor'), (u'Institution', u'Institution'), (u'Lender', u'Lender'), (u'System Integrator', u'System Integrator'), (u'VAR/Reseller', u'VAR/Reseller')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Reverse Role') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'PartnerRole'
        verbose_name = 'Partner Role Value'
        verbose_name_plural = 'Partner Role Value'
        # keyPrefix = 'None'

class PaymentHistoryHistory(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    parentid = models.ForeignKey('PaymentHistoryC', db_column=u'ParentId') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    field = models.CharField(max_length=255, verbose_name=u'Changed Field', sf_read_only=models.READ_ONLY, db_column=u'Field', choices=[(u'Account_Name__c', None), (u'Account_Number__c', None), (u'AuthorizeNetTransactionId__c', None), (u'authResponse__c', None), (u'Bank_Account_Type__c', None), (u'Bank_Name__c', None), (u'Bank_Routing_Number__c', None), (u'Check_Number__c', None), (u'cloneComments__c', None), (u'Cloned_From__c', None), (u'Comments__c', None), (u'created', u'Created.'), (u'feedEvent', u'Feed event'), (u'Final_Payment__c', None), (u'id_in_Connectria__c', None), (u'Imported__c', None), (u'Imported_Source_Point__c', None), (u'isCloned__c', None), (u'IsETLUpdate__c', None), (u'isVIPAccount__c', None), (u'Last_4_Digits_of_Credit_Card__c', None), (u'Name', None), (u'Owner', None), (u'ownerAccepted', u'Owner (Accepted)'), (u'ownerAssignment', u'Owner (Assignment)'), (u'Payment_Action__c', None), (u'Payment_Amount__c', None), (u'Payment_Made_On__c', None), (u'Payment_Specification__c', None), (u'Payment_Type__c', None), (u'Plans__c', None), (u'locked', u'Record locked.'), (u'unlocked', u'Record unlocked.'), (u'uhh_update_at__c', None), (u'uhhApi_PaymentId__c', None), (u'uid__c', None)]) # Field name made lowercase.
    oldvalue = models.CharField(max_length=255, verbose_name=u'Old Value', sf_read_only=models.READ_ONLY, db_column=u'OldValue', blank=True) # Field name made lowercase.
    newvalue = models.CharField(max_length=255, verbose_name=u'New Value', sf_read_only=models.READ_ONLY, db_column=u'NewValue', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Payment_History__History'
        verbose_name = 'History: Payment History'
        verbose_name_plural = 'History: Payment History'
        # keyPrefix = 'None'

class PaymentHistoryC(models.Model):
    ownerid = models.ForeignKey('Group', db_column=u'OwnerId') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'Payment History Name', db_column=u'Name', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    lastactivitydate = models.DateField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Activity Date', db_column=u'LastActivityDate', blank=True) # Field name made lowercase.
    lastvieweddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Viewed Date', db_column=u'LastViewedDate', blank=True) # Field name made lowercase.
    lastreferenceddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Referenced Date', db_column=u'LastReferencedDate', blank=True) # Field name made lowercase.
    payment_made_on__c = models.DateTimeField(help_text=u'Use transaction information from Authorize.net, not the date and time the payment information is being recorded.', null=True, verbose_name=u'Payment Made On', db_column=u'Payment_Made_On__c', blank=True) # Field name made lowercase.
    account_name__c = models.ForeignKey('Account', null=True, db_column=u'Account_Name__c', blank=True) # Field name made lowercase.
    payment_type__c = models.CharField(db_column=u'Payment_Type__c', choices=[(u'Check', u'Check'), (u'Money Order', u'Money Order'), (u'Credit or Debit Card', u'Credit or Debit Card'), (u'EFT', u'EFT'), (u'Over/Short', u'Over/Short'), (u'Unposted Billing Credits', u'Unposted Billing Credits'), (u'Unapplied amount', u'Unapplied amount'), (u'Refund', u'Refund'), (u'Non-Sufficient Funds', u'Non-Sufficient Funds'), (u'Transfer To', u'Transfer To'), (u'Transfer From', u'Transfer From')], max_length=255, blank=True, help_text=u"Information regarding they type of payment made by the member or on the member's behave.", verbose_name=u'Payment Type') # Field name made lowercase.
    check_number__c = models.CharField(max_length=10, verbose_name=u'Check Number', db_column=u'Check_Number__c', blank=True) # Field name made lowercase.
    last_4_digits_of_credit_card__c = models.CharField(max_length=4, verbose_name=u'Last 4 Digits of Credit Card', db_column=u'Last_4_Digits_of_Credit_Card__c', blank=True) # Field name made lowercase.
    payment_amount__c = models.DecimalField(db_column=u'Payment_Amount__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Payment Amount') # Field name made lowercase.
    payment_action__c = models.CharField(blank=True, max_length=255, verbose_name=u'Payment Action', db_column=u'Payment_Action__c', choices=[(u'Payment', u'Payment'), (u'Void', u'Void'), (u'Refund', u'Refund')]) # Field name made lowercase.
    final_payment__c = models.CharField(blank=True, max_length=255, verbose_name=u'Final Payment Status', db_column=u'Final_Payment__c', choices=[(u'Accepted', u'Accepted'), (u'Declined', u'Declined')]) # Field name made lowercase.
    comments__c = models.TextField(verbose_name=u'Comments', db_column=u'Comments__c', blank=True) # Field name made lowercase.
    payment_specification__c = models.CharField(blank=True, max_length=255, verbose_name=u'Payment Specification', db_column=u'Payment_Specification__c', choices=[(u'One - Time', u'One - Time'), (u'Reoccurring', u'Reoccurring'), (u'Initial', u'Initial')]) # Field name made lowercase.
    uhhapi_paymentid__c = models.DecimalField(db_column=u'uhhApi_PaymentId__c', decimal_places=0, max_digits=11, blank=True, null=True, verbose_name=u'uhhApi_PaymentId') # Field name made lowercase.
    uhh_update_at__c = models.DateTimeField(null=True, verbose_name=u'uhh_update_at', blank=True)
    plans__c = models.CharField(max_length=40, verbose_name=u'Plans', db_column=u'Plans__c', blank=True) # Field name made lowercase.
    id_in_connectria__c = models.CharField(max_length=50, verbose_name=u'id_in_Connectria', db_column=u'id_in_Connectria__c', blank=True) # Field name made lowercase.
    imported_source_point__c = models.CharField(blank=True, max_length=255, verbose_name=u'Imported Source Point', db_column=u'Imported_Source_Point__c', choices=[(u'Dataloader', u'Dataloader'), (u'EDI', u'EDI'), (u'Web-Service', u'Web-Service')]) # Field name made lowercase.
    imported__c = models.CharField(blank=True, max_length=255, verbose_name=u'Imported', db_column=u'Imported__c', choices=[(u'Javalina', u'Javalina'), (u'Nevada Health Link', u'Nevada Health Link')]) # Field name made lowercase.
    uid__c = models.CharField(max_length=100, verbose_name=u'uid', blank=True)
    authorizenettransactionid__c = models.CharField(max_length=160, verbose_name=u'AuthorizeNetTransactionId', db_column=u'AuthorizeNetTransactionId__c', blank=True) # Field name made lowercase.
    authresponse__c = models.CharField(max_length=255, verbose_name=u'authResponse', db_column=u'authResponse__c', blank=True) # Field name made lowercase.
    bank_name__c = models.CharField(max_length=200, verbose_name=u'Bank Name', db_column=u'Bank_Name__c', blank=True) # Field name made lowercase.
    bank_routing_number__c = models.CharField(max_length=50, verbose_name=u'Bank Routing Number', db_column=u'Bank_Routing_Number__c', blank=True) # Field name made lowercase.
    account_number__c = models.CharField(max_length=50, verbose_name=u'Bank Account Number', db_column=u'Account_Number__c', blank=True) # Field name made lowercase.
    bank_account_type__c = models.CharField(blank=True, max_length=255, verbose_name=u'Bank Account Type', db_column=u'Bank_Account_Type__c', choices=[(u'CHECKING', u'CHECKING'), (u'BUSINESSCHECKING', u'BUSINESSCHECKING'), (u'SAVINGS', u'SAVINGS')]) # Field name made lowercase.
    iscloned__c = models.BooleanField(verbose_name=u'isCloned', db_column=u'isCloned__c') # Field name made lowercase.
    cloned_from__c = models.ForeignKey('self', null=True, db_column=u'Cloned_From__c', blank=True) # Field name made lowercase.
    isvipaccount__c = models.BooleanField(verbose_name=u'isVIPAccount', db_column=u'isVIPAccount__c') # Field name made lowercase.
    isetlupdate__c = models.BooleanField(verbose_name=u'IsETLUpdate', db_column=u'IsETLUpdate__c') # Field name made lowercase.
    clonecomments__c = models.CharField(max_length=50, verbose_name=u'cloneComments', db_column=u'cloneComments__c', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Payment_History__c'
        verbose_name = 'Payment History'
        verbose_name_plural = 'Payment Histories'
        # keyPrefix = 'a09'

class Period(models.Model):
    fiscalyearsettingsid = models.ForeignKey('Fiscalyearsettings', null=True, db_column=u'FiscalYearSettingsId', blank=True) # Field name made lowercase.
    type = models.CharField(db_column=u'Type', choices=[(u'Month', None), (u'Quarter', None), (u'Week', None), (u'Year', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Type') # Field name made lowercase.
    startdate = models.DateField(sf_read_only=models.READ_ONLY, verbose_name=u'Start Date', db_column=u'StartDate') # Field name made lowercase.
    enddate = models.DateField(sf_read_only=models.READ_ONLY, verbose_name=u'End Date', db_column=u'EndDate') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    isforecastperiod = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Is Forecast Period', db_column=u'IsForecastPeriod') # Field name made lowercase.
    quarterlabel = models.CharField(db_column=u'QuarterLabel', choices=[(u'Spring', u'Spring'), (u'Summer', u'Summer'), (u'Fall', u'Fall'), (u'Winter', u'Winter')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Quarter Name') # Field name made lowercase.
    periodlabel = models.CharField(max_length=40, verbose_name=u'Period Name', sf_read_only=models.READ_ONLY, db_column=u'PeriodLabel', blank=True) # Field name made lowercase.
    number = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Number', db_column=u'Number', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Period'
        verbose_name = 'Period'
        verbose_name_plural = 'Period'
        # keyPrefix = '026'

class Permissionset(models.Model):
    name = models.CharField(max_length=80, verbose_name=u'Permission Set Name', db_column=u'Name') # Field name made lowercase.
    label = models.CharField(max_length=80, verbose_name=u'Permission Set Label', db_column=u'Label') # Field name made lowercase.
    userlicenseid = models.ForeignKey('Userlicense', null=True, db_column=u'UserLicenseId', blank=True) # Field name made lowercase.
    profileid = models.ForeignKey('Profile', null=True, db_column=u'ProfileId', blank=True) # Field name made lowercase.
    isownedbyprofile = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Is Owned By Profile', db_column=u'IsOwnedByProfile') # Field name made lowercase.
    permissionsemailsingle = models.BooleanField(verbose_name=u'Send Email', db_column=u'PermissionsEmailSingle') # Field name made lowercase.
    permissionsemailmass = models.BooleanField(verbose_name=u'Mass Email', db_column=u'PermissionsEmailMass') # Field name made lowercase.
    permissionsedittask = models.BooleanField(verbose_name=u'Edit Tasks', db_column=u'PermissionsEditTask') # Field name made lowercase.
    permissionseditevent = models.BooleanField(verbose_name=u'Edit Events', db_column=u'PermissionsEditEvent') # Field name made lowercase.
    permissionsexportreport = models.BooleanField(verbose_name=u'Export Reports', db_column=u'PermissionsExportReport') # Field name made lowercase.
    permissionsimportpersonal = models.BooleanField(verbose_name=u'Import Personal Contacts', db_column=u'PermissionsImportPersonal') # Field name made lowercase.
    permissionsdataexport = models.BooleanField(verbose_name=u'Weekly Data Export', db_column=u'PermissionsDataExport') # Field name made lowercase.
    permissionsmanageusers = models.BooleanField(verbose_name=u'Manage Users', db_column=u'PermissionsManageUsers') # Field name made lowercase.
    permissionseditpublictemplates = models.BooleanField(verbose_name=u'Manage Public Templates', db_column=u'PermissionsEditPublicTemplates') # Field name made lowercase.
    permissionsmodifyalldata = models.BooleanField(verbose_name=u'Modify All Data', db_column=u'PermissionsModifyAllData') # Field name made lowercase.
    permissionsmanagecases = models.BooleanField(verbose_name=u'Manage Cases', db_column=u'PermissionsManageCases') # Field name made lowercase.
    permissionsmassinlineedit = models.BooleanField(verbose_name=u'Mass Edits from Lists', db_column=u'PermissionsMassInlineEdit') # Field name made lowercase.
    permissionseditknowledge = models.BooleanField(verbose_name=u'Manage Articles', db_column=u'PermissionsEditKnowledge') # Field name made lowercase.
    permissionsmanageknowledge = models.BooleanField(verbose_name=u'Manage Salesforce Knowledge', db_column=u'PermissionsManageKnowledge') # Field name made lowercase.
    permissionsmanagesolutions = models.BooleanField(verbose_name=u'Manage Published Solutions', db_column=u'PermissionsManageSolutions') # Field name made lowercase.
    permissionscustomizeapplication = models.BooleanField(verbose_name=u'Customize Application', db_column=u'PermissionsCustomizeApplication') # Field name made lowercase.
    permissionseditreadonlyfields = models.BooleanField(verbose_name=u'Edit Read Only Fields', db_column=u'PermissionsEditReadonlyFields') # Field name made lowercase.
    permissionsrunreports = models.BooleanField(verbose_name=u'Run Reports', db_column=u'PermissionsRunReports') # Field name made lowercase.
    permissionsviewsetup = models.BooleanField(verbose_name=u'View Setup and Configuration', db_column=u'PermissionsViewSetup') # Field name made lowercase.
    permissionstransferanyentity = models.BooleanField(verbose_name=u'Transfer Record', db_column=u'PermissionsTransferAnyEntity') # Field name made lowercase.
    permissionsnewreportbuilder = models.BooleanField(verbose_name=u'Report Builder', db_column=u'PermissionsNewReportBuilder') # Field name made lowercase.
    permissionsmanagecssusers = models.BooleanField(verbose_name=u'Edit Self-Service Users', db_column=u'PermissionsManageCssUsers') # Field name made lowercase.
    permissionsactivatecontract = models.BooleanField(verbose_name=u'Activate Contracts', db_column=u'PermissionsActivateContract') # Field name made lowercase.
    permissionsimportleads = models.BooleanField(verbose_name=u'Import Leads', db_column=u'PermissionsImportLeads') # Field name made lowercase.
    permissionsmanageleads = models.BooleanField(verbose_name=u'Manage Leads', db_column=u'PermissionsManageLeads') # Field name made lowercase.
    permissionstransferanylead = models.BooleanField(verbose_name=u'Transfer Leads', db_column=u'PermissionsTransferAnyLead') # Field name made lowercase.
    permissionsviewalldata = models.BooleanField(verbose_name=u'View All Data', db_column=u'PermissionsViewAllData') # Field name made lowercase.
    permissionseditpublicdocuments = models.BooleanField(verbose_name=u'Manage Public Documents', db_column=u'PermissionsEditPublicDocuments') # Field name made lowercase.
    permissionsviewencrypteddata = models.BooleanField(verbose_name=u'View Encrypted Data', db_column=u'PermissionsViewEncryptedData') # Field name made lowercase.
    permissionseditbrandtemplates = models.BooleanField(verbose_name=u'Manage Letterheads', db_column=u'PermissionsEditBrandTemplates') # Field name made lowercase.
    permissionsedithtmltemplates = models.BooleanField(verbose_name=u'Edit HTML Templates', db_column=u'PermissionsEditHtmlTemplates') # Field name made lowercase.
    permissionschatterinternaluser = models.BooleanField(verbose_name=u'Chatter Internal User', db_column=u'PermissionsChatterInternalUser') # Field name made lowercase.
    permissionsdeleteactivatedcontract = models.BooleanField(verbose_name=u'Delete Activated Contracts', db_column=u'PermissionsDeleteActivatedContract') # Field name made lowercase.
    permissionschatterinviteexternalusers = models.BooleanField(verbose_name=u'Invite Customers To Chatter', db_column=u'PermissionsChatterInviteExternalUsers') # Field name made lowercase.
    permissionssendsitrequests = models.BooleanField(verbose_name=u'Send Stay-in-Touch Requests', db_column=u'PermissionsSendSitRequests') # Field name made lowercase.
    permissionsoverrideforecasts = models.BooleanField(verbose_name=u'Override Forecasts', db_column=u'PermissionsOverrideForecasts') # Field name made lowercase.
    permissionsviewallforecasts = models.BooleanField(verbose_name=u'View All Forecasts', db_column=u'PermissionsViewAllForecasts') # Field name made lowercase.
    permissionsapiuseronly = models.BooleanField(verbose_name=u'Api Only User', db_column=u'PermissionsApiUserOnly') # Field name made lowercase.
    permissionsmanageremoteaccess = models.BooleanField(verbose_name=u'Manage Connected Apps', db_column=u'PermissionsManageRemoteAccess') # Field name made lowercase.
    permissionscanusenewdashboardbuilder = models.BooleanField(verbose_name=u'Drag-and-Drop Dashboard Builder', db_column=u'PermissionsCanUseNewDashboardBuilder') # Field name made lowercase.
    permissionsmanagecategories = models.BooleanField(verbose_name=u'Manage Categories', db_column=u'PermissionsManageCategories') # Field name made lowercase.
    permissionsconvertleads = models.BooleanField(verbose_name=u'Convert Leads', db_column=u'PermissionsConvertLeads') # Field name made lowercase.
    permissionspasswordneverexpires = models.BooleanField(verbose_name=u'Password Never Expires', db_column=u'PermissionsPasswordNeverExpires') # Field name made lowercase.
    permissionsuseteamreassignwizards = models.BooleanField(verbose_name=u'Use Team Reassignment Wizards', db_column=u'PermissionsUseTeamReassignWizards') # Field name made lowercase.
    permissionsinstallpackaging = models.BooleanField(verbose_name=u'Download AppExchange Packages', db_column=u'PermissionsInstallPackaging') # Field name made lowercase.
    permissionspublishpackaging = models.BooleanField(verbose_name=u'Upload AppExchange Packages', db_column=u'PermissionsPublishPackaging') # Field name made lowercase.
    permissionsmanagepartners = models.BooleanField(verbose_name=u'Manage External Users', db_column=u'PermissionsManagePartners') # Field name made lowercase.
    permissionschatterowngroups = models.BooleanField(verbose_name=u'Create and Own New Chatter Groups', db_column=u'PermissionsChatterOwnGroups') # Field name made lowercase.
    permissionseditopplineitemunitprice = models.BooleanField(verbose_name=u'Edit Opportunity Product Sales Price', db_column=u'PermissionsEditOppLineItemUnitPrice') # Field name made lowercase.
    permissionscreatepackaging = models.BooleanField(verbose_name=u'Create AppExchange Packages', db_column=u'PermissionsCreatePackaging') # Field name made lowercase.
    permissionsbulkapiharddelete = models.BooleanField(verbose_name=u'Bulk API Hard Delete', db_column=u'PermissionsBulkApiHardDelete') # Field name made lowercase.
    permissionsinboundmigrationtoolsuser = models.BooleanField(verbose_name=u'Deploy Change Sets', db_column=u'PermissionsInboundMigrationToolsUser') # Field name made lowercase.
    permissionssolutionimport = models.BooleanField(verbose_name=u'Import Solutions', db_column=u'PermissionsSolutionImport') # Field name made lowercase.
    permissionsmanagecallcenters = models.BooleanField(verbose_name=u'Manage Call Centers', db_column=u'PermissionsManageCallCenters') # Field name made lowercase.
    permissionsportalsuperuser = models.BooleanField(verbose_name=u'Portal Super User', db_column=u'PermissionsPortalSuperUser') # Field name made lowercase.
    permissionsmanagesynonyms = models.BooleanField(verbose_name=u'Manage Synonyms', db_column=u'PermissionsManageSynonyms') # Field name made lowercase.
    permissionsoutboundmigrationtoolsuser = models.BooleanField(verbose_name=u'Create and Upload Change Sets', db_column=u'PermissionsOutboundMigrationToolsUser') # Field name made lowercase.
    permissionsdelegatedportaluseradmin = models.BooleanField(verbose_name=u'Delegated External User Administrator', db_column=u'PermissionsDelegatedPortalUserAdmin') # Field name made lowercase.
    permissionsviewcontent = models.BooleanField(verbose_name=u'View Content in Portals', db_column=u'PermissionsViewContent') # Field name made lowercase.
    permissionsmanageemailclientconfig = models.BooleanField(verbose_name=u'Manage Email Client Configurations', db_column=u'PermissionsManageEmailClientConfig') # Field name made lowercase.
    permissionsenablenotifications = models.BooleanField(verbose_name=u'Send Outbound Messages', db_column=u'PermissionsEnableNotifications') # Field name made lowercase.
    permissionsmanagedataintegrations = models.BooleanField(verbose_name=u'Manage Data Integrations', db_column=u'PermissionsManageDataIntegrations') # Field name made lowercase.
    permissionsdistributefromperswksp = models.BooleanField(verbose_name=u'Deliver Uploaded Files and Personal Content', db_column=u'PermissionsDistributeFromPersWksp') # Field name made lowercase.
    permissionsviewdatacategories = models.BooleanField(verbose_name=u'View Data Categories', db_column=u'PermissionsViewDataCategories') # Field name made lowercase.
    permissionsmanagedatacategories = models.BooleanField(verbose_name=u'Manage Data Categories', db_column=u'PermissionsManageDataCategories') # Field name made lowercase.
    permissionsauthorapex = models.BooleanField(verbose_name=u'Author Apex', db_column=u'PermissionsAuthorApex') # Field name made lowercase.
    permissionsmanagemobile = models.BooleanField(verbose_name=u'Manage Mobile Configurations', db_column=u'PermissionsManageMobile') # Field name made lowercase.
    permissionsapienabled = models.BooleanField(verbose_name=u'API Enabled', db_column=u'PermissionsApiEnabled') # Field name made lowercase.
    permissionsmanagecustomreporttypes = models.BooleanField(verbose_name=u'Manage Custom Report Types', db_column=u'PermissionsManageCustomReportTypes') # Field name made lowercase.
    permissionseditcasecomments = models.BooleanField(verbose_name=u'Edit Case Comments', db_column=u'PermissionsEditCaseComments') # Field name made lowercase.
    permissionstransferanycase = models.BooleanField(verbose_name=u'Transfer Cases', db_column=u'PermissionsTransferAnyCase') # Field name made lowercase.
    permissionscontentadministrator = models.BooleanField(verbose_name=u'Manage Salesforce CRM Content', db_column=u'PermissionsContentAdministrator') # Field name made lowercase.
    permissionscreateworkspaces = models.BooleanField(verbose_name=u'Create Libraries', db_column=u'PermissionsCreateWorkspaces') # Field name made lowercase.
    permissionsmanagecontentpermissions = models.BooleanField(verbose_name=u'Manage Content Permissions', db_column=u'PermissionsManageContentPermissions') # Field name made lowercase.
    permissionsmanagecontentproperties = models.BooleanField(verbose_name=u'Manage Content Properties', db_column=u'PermissionsManageContentProperties') # Field name made lowercase.
    permissionsmanagecontenttypes = models.BooleanField(verbose_name=u'Manage Content Types', db_column=u'PermissionsManageContentTypes') # Field name made lowercase.
    permissionsschedulejob = models.BooleanField(verbose_name=u'Schedule Dashboards', db_column=u'PermissionsScheduleJob') # Field name made lowercase.
    permissionsmanageanalyticsnapshots = models.BooleanField(verbose_name=u'Manage Reporting Snapshots', db_column=u'PermissionsManageAnalyticSnapshots') # Field name made lowercase.
    permissionsschedulereports = models.BooleanField(verbose_name=u'Schedule Reports', db_column=u'PermissionsScheduleReports') # Field name made lowercase.
    permissionsmanagebusinesshourholidays = models.BooleanField(verbose_name=u'Manage Business Hours Holidays', db_column=u'PermissionsManageBusinessHourHolidays') # Field name made lowercase.
    permissionsmanagedynamicdashboards = models.BooleanField(verbose_name=u'Manage Dynamic Dashboards', db_column=u'PermissionsManageDynamicDashboards') # Field name made lowercase.
    permissionscustomsidebaronallpages = models.BooleanField(verbose_name=u'Show Custom Sidebar On All Pages', db_column=u'PermissionsCustomSidebarOnAllPages') # Field name made lowercase.
    permissionsmanageinteraction = models.BooleanField(verbose_name=u'Manage Force.com Flow', db_column=u'PermissionsManageInteraction') # Field name made lowercase.
    permissionsviewmyteamsdashboards = models.BooleanField(verbose_name=u"View My Team's Dashboards", db_column=u'PermissionsViewMyTeamsDashboards') # Field name made lowercase.
    permissionsmoderatechatter = models.BooleanField(verbose_name=u'Moderate Chatter', db_column=u'PermissionsModerateChatter') # Field name made lowercase.
    permissionsresetpasswords = models.BooleanField(verbose_name=u'Reset User Passwords and Unlock Users', db_column=u'PermissionsResetPasswords') # Field name made lowercase.
    permissionsflowuflrequired = models.BooleanField(verbose_name=u'Require Force.com Flow User Feature License', db_column=u'PermissionsFlowUFLRequired') # Field name made lowercase.
    permissionscaninsertfeedsystemfields = models.BooleanField(verbose_name=u'Insert System Field Values for Chatter Feeds', db_column=u'PermissionsCanInsertFeedSystemFields') # Field name made lowercase.
    permissionsmanageknowledgeimportexport = models.BooleanField(verbose_name=u'Manage Knowledge Article Import/Export', db_column=u'PermissionsManageKnowledgeImportExport') # Field name made lowercase.
    permissionsemailtemplatemanagement = models.BooleanField(verbose_name=u'Manage Email Templates', db_column=u'PermissionsEmailTemplateManagement') # Field name made lowercase.
    permissionsemailadministration = models.BooleanField(verbose_name=u'Email Administration', db_column=u'PermissionsEmailAdministration') # Field name made lowercase.
    permissionsmanagechattermessages = models.BooleanField(verbose_name=u'Manage Chatter Messages', db_column=u'PermissionsManageChatterMessages') # Field name made lowercase.
    permissionsallowemailic = models.BooleanField(verbose_name=u'Email-Based Identity Confirmation Option', db_column=u'PermissionsAllowEmailIC') # Field name made lowercase.
    permissionschatterfilelink = models.BooleanField(verbose_name=u'Create and Share Content Deliveries for Chatter Files', db_column=u'PermissionsChatterFileLink') # Field name made lowercase.
    permissionsforcetwofactor = models.BooleanField(verbose_name=u'Two-Factor Authentication for User Interface Logins', db_column=u'PermissionsForceTwoFactor') # Field name made lowercase.
    permissionsmanagenetworks = models.BooleanField(verbose_name=u'Create and Set Up Communities', db_column=u'PermissionsManageNetworks') # Field name made lowercase.
    permissionsmanageauthproviders = models.BooleanField(verbose_name=u'Manage Auth. Providers', db_column=u'PermissionsManageAuthProviders') # Field name made lowercase.
    permissionsrunflow = models.BooleanField(verbose_name=u'Run Flows', db_column=u'PermissionsRunFlow') # Field name made lowercase.
    permissionsviewglobalheader = models.BooleanField(verbose_name=u'View Global Header', db_column=u'PermissionsViewGlobalHeader') # Field name made lowercase.
    permissionsmanagequotas = models.BooleanField(verbose_name=u'Manage Quotas', db_column=u'PermissionsManageQuotas') # Field name made lowercase.
    permissionscreatecustomizedashboards = models.BooleanField(verbose_name=u'Create and Customize Dashboards', db_column=u'PermissionsCreateCustomizeDashboards') # Field name made lowercase.
    permissionscreatedashboardfolders = models.BooleanField(verbose_name=u'Create Dashboard Folders', db_column=u'PermissionsCreateDashboardFolders') # Field name made lowercase.
    permissionsviewpublicdashboards = models.BooleanField(verbose_name=u'View Dashboards in Public Folders', db_column=u'PermissionsViewPublicDashboards') # Field name made lowercase.
    permissionsmanagedashbdsinpubfolders = models.BooleanField(verbose_name=u'Manage Dashboards in Public Folders', db_column=u'PermissionsManageDashbdsInPubFolders') # Field name made lowercase.
    permissionscreatecustomizereports = models.BooleanField(verbose_name=u'Create and Customize Reports', db_column=u'PermissionsCreateCustomizeReports') # Field name made lowercase.
    permissionscreatereportfolders = models.BooleanField(verbose_name=u'Create Report Folders', db_column=u'PermissionsCreateReportFolders') # Field name made lowercase.
    permissionsviewpublicreports = models.BooleanField(verbose_name=u'View Reports in Public Folders', db_column=u'PermissionsViewPublicReports') # Field name made lowercase.
    permissionsmanagereportsinpubfolders = models.BooleanField(verbose_name=u'Manage Reports in Public Folders', db_column=u'PermissionsManageReportsInPubFolders') # Field name made lowercase.
    permissionseditmydashboards = models.BooleanField(verbose_name=u'Edit My Dashboards', db_column=u'PermissionsEditMyDashboards') # Field name made lowercase.
    permissionseditmyreports = models.BooleanField(verbose_name=u'Edit My Reports', db_column=u'PermissionsEditMyReports') # Field name made lowercase.
    permissionsviewallusers = models.BooleanField(verbose_name=u'View All Users', db_column=u'PermissionsViewAllUsers') # Field name made lowercase.
    permissionsallowuniversalsearch = models.BooleanField(verbose_name=u'Knowledge One', db_column=u'PermissionsAllowUniversalSearch') # Field name made lowercase.
    permissionsconnectorgtoenvironmenthub = models.BooleanField(verbose_name=u'Connect Organization to Environment Hub', db_column=u'PermissionsConnectOrgToEnvironmentHub') # Field name made lowercase.
    permissionsworkcalibrationuser = models.BooleanField(verbose_name=u'Enable Work.com Calibration', db_column=u'PermissionsWorkCalibrationUser') # Field name made lowercase.
    permissionscreatecustomizefilters = models.BooleanField(verbose_name=u'Create and Customize List Views', db_column=u'PermissionsCreateCustomizeFilters') # Field name made lowercase.
    permissionsworkdotcomuserperm = models.BooleanField(verbose_name=u'Enable Work.com', db_column=u'PermissionsWorkDotComUserPerm') # Field name made lowercase.
    permissionsmoderatenetworkfeeds = models.BooleanField(verbose_name=u'Moderate Communities Feeds', db_column=u'PermissionsModerateNetworkFeeds') # Field name made lowercase.
    permissionsmoderatenetworkfiles = models.BooleanField(verbose_name=u'Moderate Communities Files', db_column=u'PermissionsModerateNetworkFiles') # Field name made lowercase.
    permissionsgovernnetworks = models.BooleanField(verbose_name=u'Manage Communities', db_column=u'PermissionsGovernNetworks') # Field name made lowercase.
    permissionssalesconsole = models.BooleanField(verbose_name=u'Sales Console', db_column=u'PermissionsSalesConsole') # Field name made lowercase.
    permissionstwofactorapi = models.BooleanField(verbose_name=u'Two-Factor Authentication for API Logins', db_column=u'PermissionsTwoFactorApi') # Field name made lowercase.
    permissionsdeletetopics = models.BooleanField(verbose_name=u'Delete Topics', db_column=u'PermissionsDeleteTopics') # Field name made lowercase.
    permissionsedittopics = models.BooleanField(verbose_name=u'Edit Topics', db_column=u'PermissionsEditTopics') # Field name made lowercase.
    permissionscreatetopics = models.BooleanField(verbose_name=u'Create Topics', db_column=u'PermissionsCreateTopics') # Field name made lowercase.
    permissionsassigntopics = models.BooleanField(verbose_name=u'Assign Topics', db_column=u'PermissionsAssignTopics') # Field name made lowercase.
    permissionsidentityenabled = models.BooleanField(verbose_name=u'Use Identity Features', db_column=u'PermissionsIdentityEnabled') # Field name made lowercase.
    permissionsidentityconnect = models.BooleanField(verbose_name=u'Use Identity Connect', db_column=u'PermissionsIdentityConnect') # Field name made lowercase.
    permissionsallowviewknowledge = models.BooleanField(verbose_name=u'Allow View Knowledge', db_column=u'PermissionsAllowViewKnowledge') # Field name made lowercase.
    permissionscreateworkbadgedefinition = models.BooleanField(verbose_name=u'Create custom Badge Definitions', db_column=u'PermissionsCreateWorkBadgeDefinition') # Field name made lowercase.
    permissionsmanagesearchpromotionrules = models.BooleanField(verbose_name=u'Manage Promoted Search Terms', db_column=u'PermissionsManageSearchPromotionRules') # Field name made lowercase.
    permissionscustommobileappsaccess = models.BooleanField(verbose_name=u'Access Custom Mobile Apps', db_column=u'PermissionsCustomMobileAppsAccess') # Field name made lowercase.
    permissionsviewhelplink = models.BooleanField(verbose_name=u'View Help Link', db_column=u'PermissionsViewHelpLink') # Field name made lowercase.
    permissionsmanageprofilespermissionsets = models.BooleanField(verbose_name=u'Manage Profiles and Permission Sets', db_column=u'PermissionsManageProfilesPermissionsets') # Field name made lowercase.
    permissionsassignpermissionsets = models.BooleanField(verbose_name=u'Assign Permission Sets', db_column=u'PermissionsAssignPermissionSets') # Field name made lowercase.
    permissionsmanageroles = models.BooleanField(verbose_name=u'Manage Roles', db_column=u'PermissionsManageRoles') # Field name made lowercase.
    permissionsmanageipaddresses = models.BooleanField(verbose_name=u'Manage IP Addresses', db_column=u'PermissionsManageIpAddresses') # Field name made lowercase.
    permissionsmanagesharing = models.BooleanField(verbose_name=u'Manage Sharing', db_column=u'PermissionsManageSharing') # Field name made lowercase.
    permissionsmanageinternalusers = models.BooleanField(verbose_name=u'Manage Internal Users', db_column=u'PermissionsManageInternalUsers') # Field name made lowercase.
    permissionsmanagepasswordpolicies = models.BooleanField(verbose_name=u'Manage Password Policies', db_column=u'PermissionsManagePasswordPolicies') # Field name made lowercase.
    permissionsmanageloginaccesspolicies = models.BooleanField(verbose_name=u'Manage Login Access Policies', db_column=u'PermissionsManageLoginAccessPolicies') # Field name made lowercase.
    permissionsmanageunlistedgroups = models.BooleanField(verbose_name=u'Manage Unlisted Groups', db_column=u'PermissionsManageUnlistedGroups') # Field name made lowercase.
    description = models.CharField(max_length=255, verbose_name=u'Description', db_column=u'Description', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    namespaceprefix = models.CharField(max_length=15, verbose_name=u'Namespace Prefix', sf_read_only=models.READ_ONLY, db_column=u'NamespacePrefix', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'PermissionSet'
        verbose_name = 'Permission Set'
        verbose_name_plural = 'Permission Sets'
        # keyPrefix = '0PS'

class Permissionsetassignment(models.Model):
    permissionsetid = models.ForeignKey('Permissionset', db_column=u'PermissionSetId') # Field name made lowercase.
    assigneeid = models.ForeignKey('User', db_column=u'AssigneeId') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Date Assigned', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'PermissionSetAssignment'
        verbose_name = 'Permission Set Assignment'
        verbose_name_plural = 'Permission Set Assignments'
        # keyPrefix = '0Pa'

class Permissionsetlicense(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    developername = models.CharField(max_length=80, verbose_name=u'Developer Name', sf_read_only=models.READ_ONLY, db_column=u'DeveloperName') # Field name made lowercase.
    language = models.CharField(max_length=40, verbose_name=u'Master Language', sf_read_only=models.READ_ONLY, db_column=u'Language', choices=[(u'en_US', u'English'), (u'de', u'German'), (u'es', u'Spanish'), (u'fr', u'French'), (u'it', u'Italian'), (u'ja', u'Japanese'), (u'sv', u'Swedish'), (u'ko', u'Korean'), (u'zh_TW', u'Chinese (Traditional)'), (u'zh_CN', u'Chinese (Simplified)'), (u'pt_BR', u'Portuguese (Brazilian)'), (u'nl_NL', u'Dutch'), (u'da', u'Danish'), (u'th', u'Thai'), (u'fi', u'Finnish'), (u'ru', u'Russian'), (u'es_MX', u'Spanish (Mexican)'), (u'no', u'Norwegian')]) # Field name made lowercase.
    masterlabel = models.CharField(max_length=80, verbose_name=u'Permission Set License Label', sf_read_only=models.READ_ONLY, db_column=u'MasterLabel') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    permissionsetlicensekey = models.CharField(max_length=40, unique=True, verbose_name=u'Permission Set License Key', sf_read_only=models.READ_ONLY, db_column=u'PermissionSetLicenseKey') # Field name made lowercase.
    totallicenses = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Total Licenses', db_column=u'TotalLicenses') # Field name made lowercase.
    status = models.CharField(max_length=255, verbose_name=u'Status', sf_read_only=models.READ_ONLY, db_column=u'Status', choices=[(u'Active', u'Active'), (u'Disabled', u'Disabled')]) # Field name made lowercase.
    expirationdate = models.DateField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Expiration Date', db_column=u'ExpirationDate', blank=True) # Field name made lowercase.
    maximumpermissionsemailsingle = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Send Email', db_column=u'MaximumPermissionsEmailSingle') # Field name made lowercase.
    maximumpermissionsemailmass = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Mass Email', db_column=u'MaximumPermissionsEmailMass') # Field name made lowercase.
    maximumpermissionsedittask = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Edit Tasks', db_column=u'MaximumPermissionsEditTask') # Field name made lowercase.
    maximumpermissionseditevent = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Edit Events', db_column=u'MaximumPermissionsEditEvent') # Field name made lowercase.
    maximumpermissionsexportreport = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Export Reports', db_column=u'MaximumPermissionsExportReport') # Field name made lowercase.
    maximumpermissionsimportpersonal = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Import Personal Contacts', db_column=u'MaximumPermissionsImportPersonal') # Field name made lowercase.
    maximumpermissionsdataexport = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Weekly Data Export', db_column=u'MaximumPermissionsDataExport') # Field name made lowercase.
    maximumpermissionsmanageusers = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Manage Users', db_column=u'MaximumPermissionsManageUsers') # Field name made lowercase.
    maximumpermissionseditpublictemplates = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Manage Public Templates', db_column=u'MaximumPermissionsEditPublicTemplates') # Field name made lowercase.
    maximumpermissionsmodifyalldata = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Modify All Data', db_column=u'MaximumPermissionsModifyAllData') # Field name made lowercase.
    maximumpermissionsmanagecases = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Manage Cases', db_column=u'MaximumPermissionsManageCases') # Field name made lowercase.
    maximumpermissionsmassinlineedit = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Mass Edits from Lists', db_column=u'MaximumPermissionsMassInlineEdit') # Field name made lowercase.
    maximumpermissionseditknowledge = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Manage Articles', db_column=u'MaximumPermissionsEditKnowledge') # Field name made lowercase.
    maximumpermissionsmanageknowledge = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Manage Salesforce Knowledge', db_column=u'MaximumPermissionsManageKnowledge') # Field name made lowercase.
    maximumpermissionsmanagesolutions = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Manage Published Solutions', db_column=u'MaximumPermissionsManageSolutions') # Field name made lowercase.
    maximumpermissionscustomizeapplication = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Customize Application', db_column=u'MaximumPermissionsCustomizeApplication') # Field name made lowercase.
    maximumpermissionseditreadonlyfields = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Edit Read Only Fields', db_column=u'MaximumPermissionsEditReadonlyFields') # Field name made lowercase.
    maximumpermissionsrunreports = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Run Reports', db_column=u'MaximumPermissionsRunReports') # Field name made lowercase.
    maximumpermissionsviewsetup = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'View Setup and Configuration', db_column=u'MaximumPermissionsViewSetup') # Field name made lowercase.
    maximumpermissionstransferanyentity = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Transfer Record', db_column=u'MaximumPermissionsTransferAnyEntity') # Field name made lowercase.
    maximumpermissionsnewreportbuilder = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Report Builder', db_column=u'MaximumPermissionsNewReportBuilder') # Field name made lowercase.
    maximumpermissionsmanagecssusers = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Edit Self-Service Users', db_column=u'MaximumPermissionsManageCssUsers') # Field name made lowercase.
    maximumpermissionsactivatecontract = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Activate Contracts', db_column=u'MaximumPermissionsActivateContract') # Field name made lowercase.
    maximumpermissionsimportleads = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Import Leads', db_column=u'MaximumPermissionsImportLeads') # Field name made lowercase.
    maximumpermissionsmanageleads = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Manage Leads', db_column=u'MaximumPermissionsManageLeads') # Field name made lowercase.
    maximumpermissionstransferanylead = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Transfer Leads', db_column=u'MaximumPermissionsTransferAnyLead') # Field name made lowercase.
    maximumpermissionsviewalldata = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'View All Data', db_column=u'MaximumPermissionsViewAllData') # Field name made lowercase.
    maximumpermissionseditpublicdocuments = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Manage Public Documents', db_column=u'MaximumPermissionsEditPublicDocuments') # Field name made lowercase.
    maximumpermissionsviewencrypteddata = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'View Encrypted Data', db_column=u'MaximumPermissionsViewEncryptedData') # Field name made lowercase.
    maximumpermissionseditbrandtemplates = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Manage Letterheads', db_column=u'MaximumPermissionsEditBrandTemplates') # Field name made lowercase.
    maximumpermissionsedithtmltemplates = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Edit HTML Templates', db_column=u'MaximumPermissionsEditHtmlTemplates') # Field name made lowercase.
    maximumpermissionschatterinternaluser = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Chatter Internal User', db_column=u'MaximumPermissionsChatterInternalUser') # Field name made lowercase.
    maximumpermissionsdeleteactivatedcontract = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Delete Activated Contracts', db_column=u'MaximumPermissionsDeleteActivatedContract') # Field name made lowercase.
    maximumpermissionschatterinviteexternalusers = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Invite Customers To Chatter', db_column=u'MaximumPermissionsChatterInviteExternalUsers') # Field name made lowercase.
    maximumpermissionssendsitrequests = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Send Stay-in-Touch Requests', db_column=u'MaximumPermissionsSendSitRequests') # Field name made lowercase.
    maximumpermissionsoverrideforecasts = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Override Forecasts', db_column=u'MaximumPermissionsOverrideForecasts') # Field name made lowercase.
    maximumpermissionsviewallforecasts = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'View All Forecasts', db_column=u'MaximumPermissionsViewAllForecasts') # Field name made lowercase.
    maximumpermissionsapiuseronly = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Api Only User', db_column=u'MaximumPermissionsApiUserOnly') # Field name made lowercase.
    maximumpermissionsmanageremoteaccess = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Manage Connected Apps', db_column=u'MaximumPermissionsManageRemoteAccess') # Field name made lowercase.
    maximumpermissionscanusenewdashboardbuilder = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Drag-and-Drop Dashboard Builder', db_column=u'MaximumPermissionsCanUseNewDashboardBuilder') # Field name made lowercase.
    maximumpermissionsmanagecategories = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Manage Categories', db_column=u'MaximumPermissionsManageCategories') # Field name made lowercase.
    maximumpermissionsconvertleads = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Convert Leads', db_column=u'MaximumPermissionsConvertLeads') # Field name made lowercase.
    maximumpermissionspasswordneverexpires = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Password Never Expires', db_column=u'MaximumPermissionsPasswordNeverExpires') # Field name made lowercase.
    maximumpermissionsuseteamreassignwizards = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Use Team Reassignment Wizards', db_column=u'MaximumPermissionsUseTeamReassignWizards') # Field name made lowercase.
    maximumpermissionsinstallpackaging = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Download AppExchange Packages', db_column=u'MaximumPermissionsInstallPackaging') # Field name made lowercase.
    maximumpermissionspublishpackaging = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Upload AppExchange Packages', db_column=u'MaximumPermissionsPublishPackaging') # Field name made lowercase.
    maximumpermissionsmanagepartners = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Manage External Users', db_column=u'MaximumPermissionsManagePartners') # Field name made lowercase.
    maximumpermissionschatterowngroups = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Create and Own New Chatter Groups', db_column=u'MaximumPermissionsChatterOwnGroups') # Field name made lowercase.
    maximumpermissionseditopplineitemunitprice = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Edit Opportunity Product Sales Price', db_column=u'MaximumPermissionsEditOppLineItemUnitPrice') # Field name made lowercase.
    maximumpermissionscreatepackaging = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Create AppExchange Packages', db_column=u'MaximumPermissionsCreatePackaging') # Field name made lowercase.
    maximumpermissionsbulkapiharddelete = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Bulk API Hard Delete', db_column=u'MaximumPermissionsBulkApiHardDelete') # Field name made lowercase.
    maximumpermissionsinboundmigrationtoolsuser = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deploy Change Sets', db_column=u'MaximumPermissionsInboundMigrationToolsUser') # Field name made lowercase.
    maximumpermissionssolutionimport = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Import Solutions', db_column=u'MaximumPermissionsSolutionImport') # Field name made lowercase.
    maximumpermissionsmanagecallcenters = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Manage Call Centers', db_column=u'MaximumPermissionsManageCallCenters') # Field name made lowercase.
    maximumpermissionsportalsuperuser = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Portal Super User', db_column=u'MaximumPermissionsPortalSuperUser') # Field name made lowercase.
    maximumpermissionsmanagesynonyms = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Manage Synonyms', db_column=u'MaximumPermissionsManageSynonyms') # Field name made lowercase.
    maximumpermissionsoutboundmigrationtoolsuser = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Create and Upload Change Sets', db_column=u'MaximumPermissionsOutboundMigrationToolsUser') # Field name made lowercase.
    maximumpermissionsdelegatedportaluseradmin = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Delegated External User Administrator', db_column=u'MaximumPermissionsDelegatedPortalUserAdmin') # Field name made lowercase.
    maximumpermissionsviewcontent = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'View Content in Portals', db_column=u'MaximumPermissionsViewContent') # Field name made lowercase.
    maximumpermissionsmanageemailclientconfig = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Manage Email Client Configurations', db_column=u'MaximumPermissionsManageEmailClientConfig') # Field name made lowercase.
    maximumpermissionsenablenotifications = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Send Outbound Messages', db_column=u'MaximumPermissionsEnableNotifications') # Field name made lowercase.
    maximumpermissionsmanagedataintegrations = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Manage Data Integrations', db_column=u'MaximumPermissionsManageDataIntegrations') # Field name made lowercase.
    maximumpermissionsdistributefromperswksp = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deliver Uploaded Files and Personal Content', db_column=u'MaximumPermissionsDistributeFromPersWksp') # Field name made lowercase.
    maximumpermissionsviewdatacategories = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'View Data Categories', db_column=u'MaximumPermissionsViewDataCategories') # Field name made lowercase.
    maximumpermissionsmanagedatacategories = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Manage Data Categories', db_column=u'MaximumPermissionsManageDataCategories') # Field name made lowercase.
    maximumpermissionsauthorapex = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Author Apex', db_column=u'MaximumPermissionsAuthorApex') # Field name made lowercase.
    maximumpermissionsmanagemobile = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Manage Mobile Configurations', db_column=u'MaximumPermissionsManageMobile') # Field name made lowercase.
    maximumpermissionsapienabled = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'API Enabled', db_column=u'MaximumPermissionsApiEnabled') # Field name made lowercase.
    maximumpermissionsmanagecustomreporttypes = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Manage Custom Report Types', db_column=u'MaximumPermissionsManageCustomReportTypes') # Field name made lowercase.
    maximumpermissionseditcasecomments = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Edit Case Comments', db_column=u'MaximumPermissionsEditCaseComments') # Field name made lowercase.
    maximumpermissionstransferanycase = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Transfer Cases', db_column=u'MaximumPermissionsTransferAnyCase') # Field name made lowercase.
    maximumpermissionscontentadministrator = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Manage Salesforce CRM Content', db_column=u'MaximumPermissionsContentAdministrator') # Field name made lowercase.
    maximumpermissionscreateworkspaces = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Create Libraries', db_column=u'MaximumPermissionsCreateWorkspaces') # Field name made lowercase.
    maximumpermissionsmanagecontentpermissions = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Manage Content Permissions', db_column=u'MaximumPermissionsManageContentPermissions') # Field name made lowercase.
    maximumpermissionsmanagecontentproperties = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Manage Content Properties', db_column=u'MaximumPermissionsManageContentProperties') # Field name made lowercase.
    maximumpermissionsmanagecontenttypes = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Manage Content Types', db_column=u'MaximumPermissionsManageContentTypes') # Field name made lowercase.
    maximumpermissionsschedulejob = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Schedule Dashboards', db_column=u'MaximumPermissionsScheduleJob') # Field name made lowercase.
    maximumpermissionsmanageanalyticsnapshots = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Manage Reporting Snapshots', db_column=u'MaximumPermissionsManageAnalyticSnapshots') # Field name made lowercase.
    maximumpermissionsschedulereports = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Schedule Reports', db_column=u'MaximumPermissionsScheduleReports') # Field name made lowercase.
    maximumpermissionsmanagebusinesshourholidays = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Manage Business Hours Holidays', db_column=u'MaximumPermissionsManageBusinessHourHolidays') # Field name made lowercase.
    maximumpermissionsmanagedynamicdashboards = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Manage Dynamic Dashboards', db_column=u'MaximumPermissionsManageDynamicDashboards') # Field name made lowercase.
    maximumpermissionscustomsidebaronallpages = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Show Custom Sidebar On All Pages', db_column=u'MaximumPermissionsCustomSidebarOnAllPages') # Field name made lowercase.
    maximumpermissionsmanageinteraction = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Manage Force.com Flow', db_column=u'MaximumPermissionsManageInteraction') # Field name made lowercase.
    maximumpermissionsviewmyteamsdashboards = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u"View My Team's Dashboards", db_column=u'MaximumPermissionsViewMyTeamsDashboards') # Field name made lowercase.
    maximumpermissionsmoderatechatter = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Moderate Chatter', db_column=u'MaximumPermissionsModerateChatter') # Field name made lowercase.
    maximumpermissionsresetpasswords = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Reset User Passwords and Unlock Users', db_column=u'MaximumPermissionsResetPasswords') # Field name made lowercase.
    maximumpermissionsflowuflrequired = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Require Force.com Flow User Feature License', db_column=u'MaximumPermissionsFlowUFLRequired') # Field name made lowercase.
    maximumpermissionscaninsertfeedsystemfields = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Insert System Field Values for Chatter Feeds', db_column=u'MaximumPermissionsCanInsertFeedSystemFields') # Field name made lowercase.
    maximumpermissionsmanageknowledgeimportexport = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Manage Knowledge Article Import/Export', db_column=u'MaximumPermissionsManageKnowledgeImportExport') # Field name made lowercase.
    maximumpermissionsemailtemplatemanagement = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Manage Email Templates', db_column=u'MaximumPermissionsEmailTemplateManagement') # Field name made lowercase.
    maximumpermissionsemailadministration = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Email Administration', db_column=u'MaximumPermissionsEmailAdministration') # Field name made lowercase.
    maximumpermissionsmanagechattermessages = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Manage Chatter Messages', db_column=u'MaximumPermissionsManageChatterMessages') # Field name made lowercase.
    maximumpermissionsallowemailic = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Email-Based Identity Confirmation Option', db_column=u'MaximumPermissionsAllowEmailIC') # Field name made lowercase.
    maximumpermissionschatterfilelink = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Create and Share Content Deliveries for Chatter Files', db_column=u'MaximumPermissionsChatterFileLink') # Field name made lowercase.
    maximumpermissionsforcetwofactor = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Two-Factor Authentication for User Interface Logins', db_column=u'MaximumPermissionsForceTwoFactor') # Field name made lowercase.
    maximumpermissionsmanagenetworks = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Create and Set Up Communities', db_column=u'MaximumPermissionsManageNetworks') # Field name made lowercase.
    maximumpermissionsmanageauthproviders = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Manage Auth. Providers', db_column=u'MaximumPermissionsManageAuthProviders') # Field name made lowercase.
    maximumpermissionsrunflow = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Run Flows', db_column=u'MaximumPermissionsRunFlow') # Field name made lowercase.
    maximumpermissionsviewglobalheader = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'View Global Header', db_column=u'MaximumPermissionsViewGlobalHeader') # Field name made lowercase.
    maximumpermissionsmanagequotas = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Manage Quotas', db_column=u'MaximumPermissionsManageQuotas') # Field name made lowercase.
    maximumpermissionscreatecustomizedashboards = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Create and Customize Dashboards', db_column=u'MaximumPermissionsCreateCustomizeDashboards') # Field name made lowercase.
    maximumpermissionscreatedashboardfolders = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Create Dashboard Folders', db_column=u'MaximumPermissionsCreateDashboardFolders') # Field name made lowercase.
    maximumpermissionsviewpublicdashboards = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'View Dashboards in Public Folders', db_column=u'MaximumPermissionsViewPublicDashboards') # Field name made lowercase.
    maximumpermissionsmanagedashbdsinpubfolders = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Manage Dashboards in Public Folders', db_column=u'MaximumPermissionsManageDashbdsInPubFolders') # Field name made lowercase.
    maximumpermissionscreatecustomizereports = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Create and Customize Reports', db_column=u'MaximumPermissionsCreateCustomizeReports') # Field name made lowercase.
    maximumpermissionscreatereportfolders = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Create Report Folders', db_column=u'MaximumPermissionsCreateReportFolders') # Field name made lowercase.
    maximumpermissionsviewpublicreports = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'View Reports in Public Folders', db_column=u'MaximumPermissionsViewPublicReports') # Field name made lowercase.
    maximumpermissionsmanagereportsinpubfolders = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Manage Reports in Public Folders', db_column=u'MaximumPermissionsManageReportsInPubFolders') # Field name made lowercase.
    maximumpermissionseditmydashboards = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Edit My Dashboards', db_column=u'MaximumPermissionsEditMyDashboards') # Field name made lowercase.
    maximumpermissionseditmyreports = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Edit My Reports', db_column=u'MaximumPermissionsEditMyReports') # Field name made lowercase.
    maximumpermissionsviewallusers = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'View All Users', db_column=u'MaximumPermissionsViewAllUsers') # Field name made lowercase.
    maximumpermissionsallowuniversalsearch = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Knowledge One', db_column=u'MaximumPermissionsAllowUniversalSearch') # Field name made lowercase.
    maximumpermissionsconnectorgtoenvironmenthub = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Connect Organization to Environment Hub', db_column=u'MaximumPermissionsConnectOrgToEnvironmentHub') # Field name made lowercase.
    maximumpermissionsworkcalibrationuser = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Enable Work.com Calibration', db_column=u'MaximumPermissionsWorkCalibrationUser') # Field name made lowercase.
    maximumpermissionscreatecustomizefilters = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Create and Customize List Views', db_column=u'MaximumPermissionsCreateCustomizeFilters') # Field name made lowercase.
    maximumpermissionsworkdotcomuserperm = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Enable Work.com', db_column=u'MaximumPermissionsWorkDotComUserPerm') # Field name made lowercase.
    maximumpermissionsmoderatenetworkfeeds = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Moderate Communities Feeds', db_column=u'MaximumPermissionsModerateNetworkFeeds') # Field name made lowercase.
    maximumpermissionsmoderatenetworkfiles = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Moderate Communities Files', db_column=u'MaximumPermissionsModerateNetworkFiles') # Field name made lowercase.
    maximumpermissionsgovernnetworks = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Manage Communities', db_column=u'MaximumPermissionsGovernNetworks') # Field name made lowercase.
    maximumpermissionssalesconsole = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Sales Console', db_column=u'MaximumPermissionsSalesConsole') # Field name made lowercase.
    maximumpermissionstwofactorapi = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Two-Factor Authentication for API Logins', db_column=u'MaximumPermissionsTwoFactorApi') # Field name made lowercase.
    maximumpermissionsdeletetopics = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Delete Topics', db_column=u'MaximumPermissionsDeleteTopics') # Field name made lowercase.
    maximumpermissionsedittopics = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Edit Topics', db_column=u'MaximumPermissionsEditTopics') # Field name made lowercase.
    maximumpermissionscreatetopics = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Create Topics', db_column=u'MaximumPermissionsCreateTopics') # Field name made lowercase.
    maximumpermissionsassigntopics = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Assign Topics', db_column=u'MaximumPermissionsAssignTopics') # Field name made lowercase.
    maximumpermissionsidentityenabled = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Use Identity Features', db_column=u'MaximumPermissionsIdentityEnabled') # Field name made lowercase.
    maximumpermissionsidentityconnect = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Use Identity Connect', db_column=u'MaximumPermissionsIdentityConnect') # Field name made lowercase.
    maximumpermissionsallowviewknowledge = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Allow View Knowledge', db_column=u'MaximumPermissionsAllowViewKnowledge') # Field name made lowercase.
    maximumpermissionscreateworkbadgedefinition = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Create custom Badge Definitions', db_column=u'MaximumPermissionsCreateWorkBadgeDefinition') # Field name made lowercase.
    maximumpermissionsmanagesearchpromotionrules = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Manage Promoted Search Terms', db_column=u'MaximumPermissionsManageSearchPromotionRules') # Field name made lowercase.
    maximumpermissionscustommobileappsaccess = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Access Custom Mobile Apps', db_column=u'MaximumPermissionsCustomMobileAppsAccess') # Field name made lowercase.
    maximumpermissionsviewhelplink = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'View Help Link', db_column=u'MaximumPermissionsViewHelpLink') # Field name made lowercase.
    maximumpermissionsmanageprofilespermissionsets = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Manage Profiles and Permission Sets', db_column=u'MaximumPermissionsManageProfilesPermissionsets') # Field name made lowercase.
    maximumpermissionsassignpermissionsets = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Assign Permission Sets', db_column=u'MaximumPermissionsAssignPermissionSets') # Field name made lowercase.
    maximumpermissionsmanageroles = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Manage Roles', db_column=u'MaximumPermissionsManageRoles') # Field name made lowercase.
    maximumpermissionsmanageipaddresses = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Manage IP Addresses', db_column=u'MaximumPermissionsManageIpAddresses') # Field name made lowercase.
    maximumpermissionsmanagesharing = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Manage Sharing', db_column=u'MaximumPermissionsManageSharing') # Field name made lowercase.
    maximumpermissionsmanageinternalusers = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Manage Internal Users', db_column=u'MaximumPermissionsManageInternalUsers') # Field name made lowercase.
    maximumpermissionsmanagepasswordpolicies = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Manage Password Policies', db_column=u'MaximumPermissionsManagePasswordPolicies') # Field name made lowercase.
    maximumpermissionsmanageloginaccesspolicies = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Manage Login Access Policies', db_column=u'MaximumPermissionsManageLoginAccessPolicies') # Field name made lowercase.
    maximumpermissionsmanageunlistedgroups = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Manage Unlisted Groups', db_column=u'MaximumPermissionsManageUnlistedGroups') # Field name made lowercase.
    usedlicenses = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Used Licenses', db_column=u'UsedLicenses') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'PermissionSetLicense'
        verbose_name = 'Permission Set License'
        verbose_name_plural = 'Permission Set Licenses'
        # keyPrefix = '0PL'

class Permissionsetlicenseassign(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Date Assigned', db_column=u'SystemModstamp') # Field name made lowercase.
    permissionsetlicenseid = models.ForeignKey('Permissionsetlicense', db_column=u'PermissionSetLicenseId') # Field name made lowercase.
    assigneeid = models.ForeignKey('User', db_column=u'AssigneeId') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'PermissionSetLicenseAssign'
        verbose_name = 'Permission Set License Assignment'
        verbose_name_plural = 'Permission Set License Assignments'
        # keyPrefix = '2LA'

class PersonPaymentC(models.Model):
    ownerid = models.ForeignKey('Group', db_column=u'OwnerId') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'Person Payments Name', sf_read_only=models.READ_ONLY, db_column=u'Name') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    lastvieweddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Viewed Date', db_column=u'LastViewedDate', blank=True) # Field name made lowercase.
    lastreferenceddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Referenced Date', db_column=u'LastReferencedDate', blank=True) # Field name made lowercase.
    uhhapi_perpaymentid__c = models.DecimalField(db_column=u'uhhApi_perPaymentId__c', decimal_places=0, max_digits=18, blank=True, null=True, verbose_name=u'uhhApi_perPaymentId') # Field name made lowercase.
    uhhapi_personid__c = models.DecimalField(db_column=u'uhhApi_personId__c', decimal_places=0, max_digits=18, blank=True, null=True, verbose_name=u'uhhApi_personId') # Field name made lowercase.
    uhhapi_paymentsid__c = models.DecimalField(db_column=u'uhhApi_paymentsId__c', decimal_places=0, max_digits=18, blank=True, null=True, verbose_name=u'uhhApi_paymentsId') # Field name made lowercase.
    uhh_update_at__c = models.DateTimeField(null=True, verbose_name=u'uhh_update_at', blank=True)
    imported__c = models.CharField(blank=True, max_length=255, verbose_name=u'Imported', db_column=u'Imported__c', choices=[(u'Javalina', u'Javalina'), (u'Nevada Health Link', u'Nevada Health Link')]) # Field name made lowercase.
    imported_source_point__c = models.CharField(blank=True, max_length=255, verbose_name=u'Imported Source Point', db_column=u'Imported_Source_Point__c', choices=[(u'Dataloader', u'Dataloader'), (u'EDI', u'EDI'), (u'Web-Service', u'Web-Service')]) # Field name made lowercase.
    isetlupdate__c = models.BooleanField(verbose_name=u'IsETLUpdate', db_column=u'IsETLUpdate__c') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Person_Payment__c'
        verbose_name = 'Person Payment'
        verbose_name_plural = 'Person Payments'
        # keyPrefix = 'a0X'

class PolicyHistory(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    parentid = models.ForeignKey('PolicyC', db_column=u'ParentId') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    field = models.CharField(max_length=255, verbose_name=u'Changed Field', sf_read_only=models.READ_ONLY, db_column=u'Field', choices=[(u'Active_Date__c', None), (u'Agency_Commission__c', None), (u'Application_Completed_Date__c', None), (u'Application_Started__c', None), (u'Billing_Type__c', None), (u'Carrier__c', None), (u'Carrier_Policy_ID__c', None), (u'cloneComments__c', None), (u'Cloned_From__c', None), (u'Commission_Paydate__c', None), (u'created', u'Created.'), (u'Description__c', None), (u'Effective_Date__c', None), (u'Exchange_Details__c', None), (u'Expiration_Date__c', None), (u'feedEvent', u'Feed event'), (u'First_Written__c', None), (u'Insured_Entity_Legal_Name__c', None), (u'isCloned__c', None), (u'isVIPAccount__c', None), (u'Limit__c', None), (u'Max_OOP__c', None), (u'Migrated__c', None), (u'Monthly_Premium__c', None), (u'Name', None), (u'of_Members__c', None), (u'Original_Created_Date__c', None), (u'Original_Object_ID__c', None), (u'Out_of_Force_Date__c', None), (u'ownerAccepted', u'Owner (Accepted)'), (u'ownerAssignment', u'Owner (Assignment)'), (u'Payment_Policy__c', None), (u'Plan_Selected__c', None), (u'Policy_Held_with_Other_Agency__c', None), (u'Policy_Holder__c', None), (u'Policy_Holder_Name__c', None), (u'Policy_Type__c', None), (u'Premium__c', None), (u'Prior_Policy__c', None), (u'Producer__c', None), (u'Producer_Commission__c', None), (u'locked', u'Record locked.'), (u'RecordType', None), (u'unlocked', u'Record unlocked.'), (u'Related_Opportunity__c', None), (u'Renewed__c', None), (u'Status__c', None), (u'Subsidy_Amount__c', None), (u'Total_Policy_Premium__c', None)]) # Field name made lowercase.
    oldvalue = models.CharField(max_length=255, verbose_name=u'Old Value', sf_read_only=models.READ_ONLY, db_column=u'OldValue', blank=True) # Field name made lowercase.
    newvalue = models.CharField(max_length=255, verbose_name=u'New Value', sf_read_only=models.READ_ONLY, db_column=u'NewValue', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Policy__History'
        verbose_name = 'History: Policy'
        verbose_name_plural = 'History: Policy'
        # keyPrefix = 'None'

class PolicyC(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'Policy ID', db_column=u'Name', blank=True) # Field name made lowercase.
    recordtypeid = models.ForeignKey('Recordtype', null=True, db_column=u'RecordTypeId', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    lastactivitydate = models.DateField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Activity Date', db_column=u'LastActivityDate', blank=True) # Field name made lowercase.
    lastvieweddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Viewed Date', db_column=u'LastViewedDate', blank=True) # Field name made lowercase.
    lastreferenceddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Referenced Date', db_column=u'LastReferencedDate', blank=True) # Field name made lowercase.
    agency_commission__c = models.DecimalField(db_column=u'Agency_Commission__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Agency Commission') # Field name made lowercase.
    billing_type__c = models.CharField(blank=True, max_length=255, verbose_name=u'Billing Type', db_column=u'Billing_Type__c', choices=[(u'Agency', u'Agency'), (u'Direct', u'Direct')]) # Field name made lowercase.
    carrier__c = models.ForeignKey('CarrierC', db_column=u'Carrier__c') # Field name made lowercase.
    status__c = models.CharField(blank=True, max_length=255, verbose_name=u'Status', db_column=u'Status__c', choices=[(u'Cancelled - Carrier', u'Cancelled - Carrier'), (u'Cancelled - Customer', u'Cancelled - Customer'), (u'Expired', u'Expired'), (u'In Force', u'In Force'), (u'Pending', u'Pending'), (u'Bad Data', u'Bad Data'), (u'Terminated - Unknown', u'Terminated - Unknown')]) # Field name made lowercase.
    carrier_policy_id__c = models.CharField(max_length=255, verbose_name=u'Carrier Policy ID', db_column=u'Carrier_Policy_ID__c', blank=True) # Field name made lowercase.
    commission_paydate__c = models.DateField(null=True, verbose_name=u'Commission Paydate', db_column=u'Commission_Paydate__c', blank=True) # Field name made lowercase.
    effective_date__c = models.DateField(null=True, verbose_name=u'Effective Date', db_column=u'Effective_Date__c', blank=True) # Field name made lowercase.
    expiration_date__c = models.DateField(null=True, verbose_name=u'Expiration Date', db_column=u'Expiration_Date__c', blank=True) # Field name made lowercase.
    first_written__c = models.DateField(null=True, verbose_name=u'First Written', db_column=u'First_Written__c', blank=True) # Field name made lowercase.
    insured_entity_legal_name__c = models.CharField(max_length=255, verbose_name=u'Insured Entity Legal Name', db_column=u'Insured_Entity_Legal_Name__c', blank=True) # Field name made lowercase.
    limit__c = models.DecimalField(db_column=u'Limit__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Limit') # Field name made lowercase.
    payment_policy__c = models.CharField(blank=True, max_length=255, verbose_name=u'Payment Policy', db_column=u'Payment_Policy__c', choices=[(u'Annually', u'Annually'), (u'Financed by Insurance Company', u'Financed by Insurance Company'), (u'Financed Outside', u'Financed Outside'), (u'Installment + Monthly', u'Installment + Monthly'), (u'Monthly', u'Monthly'), (u'Six Pay', u'Six Pay'), (u'Quarterly', u'Quarterly'), (u'Reporting Form', u'Reporting Form'), (u'Semi Annually', u'Semi Annually')]) # Field name made lowercase.
    policy_held_with_other_agency__c = models.BooleanField(verbose_name=u'Policy Held with Other Agency', db_column=u'Policy_Held_with_Other_Agency__c') # Field name made lowercase.
    premium__c = models.DecimalField(db_column=u'Premium__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Premium') # Field name made lowercase.
    prior_policy__c = models.ForeignKey('self', null=True, db_column=u'Prior_Policy__c', blank=True) # Field name made lowercase.
    producer__c = models.ForeignKey('User', null=True, db_column=u'Producer__c', blank=True) # Field name made lowercase.
    producer_commission__c = models.DecimalField(db_column=u'Producer_Commission__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Producer Commission') # Field name made lowercase.
    related_opportunity__c = models.ForeignKey('Opportunity', null=True, db_column=u'Related_Opportunity__c', blank=True) # Field name made lowercase.
    renewed__c = models.BooleanField(verbose_name=u'Renewed', db_column=u'Renewed__c') # Field name made lowercase.
    total_policy_premium__c = models.DecimalField(db_column=u'Total_Policy_Premium__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Total Policy Premium') # Field name made lowercase.
    policy_holder__c = models.ForeignKey('Contact', null=True, db_column=u'Policy_Holder__c', blank=True) # Field name made lowercase.
    policy_holder_name__c = models.ForeignKey('Account', null=True, db_column=u'Policy_Holder_Name__c', blank=True) # Field name made lowercase.
    policy_type__c = models.CharField(blank=True, max_length=255, verbose_name=u'Policy Type', db_column=u'Policy_Type__c', choices=[(u'Commercial Auto', u'Commercial Auto'), (u'Businesss Owners', u'Businesss Owners'), (u'General Liability', u'General Liability'), (u'Commercial Umbrella', u'Commercial Umbrella'), (u'Workers Compensation', u'Workers Compensation'), (u'Commercial Property', u'Commercial Property'), (u'Package', u'Package'), (u'Personal Auto', u'Personal Auto'), (u'Inland Marine', u'Inland Marine'), (u'Homeowners', u'Homeowners'), (u'Umbrella', u'Umbrella'), (u'Watercraft', u'Watercraft')]) # Field name made lowercase.
    monthly_premium__c = models.DecimalField(db_column=u'Monthly_Premium__c', decimal_places=2, max_digits=7, blank=True, null=True, verbose_name=u'Monthly Premium') # Field name made lowercase.
    of_members__c = models.DecimalField(db_column=u'of_Members__c', decimal_places=0, max_digits=2, blank=True, null=True, verbose_name=u'# of Members') # Field name made lowercase.
    active_date__c = models.DateField(null=True, verbose_name=u'Active Date', db_column=u'Active_Date__c', blank=True) # Field name made lowercase.
    application_started__c = models.DateField(null=True, verbose_name=u'Application Started', db_column=u'Application_Started__c', blank=True) # Field name made lowercase.
    application_completed_date__c = models.DateField(null=True, verbose_name=u'Application Completed Date', db_column=u'Application_Completed_Date__c', blank=True) # Field name made lowercase.
    original_created_date__c = models.DateField(null=True, verbose_name=u'Original Created Date', db_column=u'Original_Created_Date__c', blank=True) # Field name made lowercase.
    max_oop__c = models.DecimalField(db_column=u'Max_OOP__c', decimal_places=0, max_digits=18, blank=True, null=True, verbose_name=u'Max OOP') # Field name made lowercase.
    out_of_force_date__c = models.DateField(null=True, verbose_name=u'Out of Force Date', db_column=u'Out_of_Force_Date__c', blank=True) # Field name made lowercase.
    description__c = models.TextField(verbose_name=u'Description', db_column=u'Description__c', blank=True) # Field name made lowercase.
    original_object_id__c = models.CharField(max_length=18, verbose_name=u'Original Object ID', db_column=u'Original_Object_ID__c', blank=True) # Field name made lowercase.
    migrated__c = models.BooleanField(help_text=u'Was this record migrated from old tenant?', verbose_name=u'Migrated', db_column=u'Migrated__c') # Field name made lowercase.
    subsidy_amount__c = models.DecimalField(db_column=u'Subsidy_Amount__c', decimal_places=2, max_digits=6, blank=True, null=True, verbose_name=u'Subsidy Amount') # Field name made lowercase.
    plan_selected__c = models.ForeignKey('Product2', null=True, db_column=u'Plan_Selected__c', blank=True) # Field name made lowercase.
    plan_type__c = models.CharField(max_length=1300, verbose_name=u'Plan Type', sf_read_only=models.READ_ONLY, db_column=u'Plan_Type__c', blank=True) # Field name made lowercase.
    deductible_member__c = models.DecimalField(decimal_places=2, db_column=u'Deductible_Member__c', sf_read_only=models.READ_ONLY, max_digits=18, blank=True, null=True, verbose_name=u'Deductible - Member') # Field name made lowercase.
    deductible_family__c = models.DecimalField(decimal_places=2, db_column=u'Deductible_Family__c', sf_read_only=models.READ_ONLY, max_digits=18, blank=True, null=True, verbose_name=u'Deductible - Family') # Field name made lowercase.
    co_insurance__c = models.CharField(max_length=1300, verbose_name=u'Co-Insurance', sf_read_only=models.READ_ONLY, db_column=u'Co_Insurance__c', blank=True) # Field name made lowercase.
    office_visit__c = models.CharField(max_length=1300, verbose_name=u'Office Visit', sf_read_only=models.READ_ONLY, db_column=u'Office_Visit__c', blank=True) # Field name made lowercase.
    max_out_of_pocket_member__c = models.DecimalField(decimal_places=2, db_column=u'Max_Out_of_Pocket_Member__c', sf_read_only=models.READ_ONLY, max_digits=18, blank=True, null=True, verbose_name=u'Max Out of Pocket - Member') # Field name made lowercase.
    max_out_of_pocket_family__c = models.DecimalField(decimal_places=2, db_column=u'Max_Out_of_Pocket_Family__c', sf_read_only=models.READ_ONLY, max_digits=18, blank=True, null=True, verbose_name=u'Max Out of Pocket - Family') # Field name made lowercase.
    rx_coverage__c = models.CharField(max_length=1300, verbose_name=u'Rx Coverage', sf_read_only=models.READ_ONLY, db_column=u'Rx_Coverage__c', blank=True) # Field name made lowercase.
    exchange_details__c = models.CharField(blank=True, max_length=255, verbose_name=u'Exchange Details', db_column=u'Exchange_Details__c', choices=[(u'On Exchange', u'On Exchange'), (u'Off Exchange', u'Off Exchange')]) # Field name made lowercase.
    iscloned__c = models.BooleanField(verbose_name=u'isCloned', db_column=u'isCloned__c') # Field name made lowercase.
    cloned_from__c = models.ForeignKey('self', null=True, db_column=u'Cloned_From__c', blank=True) # Field name made lowercase.
    isvipaccount__c = models.BooleanField(verbose_name=u'isVIPAccount', db_column=u'isVIPAccount__c') # Field name made lowercase.
    clonecomments__c = models.CharField(max_length=50, verbose_name=u'cloneComments', db_column=u'cloneComments__c', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Policy__c'
        verbose_name = 'Policy'
        verbose_name_plural = 'Policies'
        # keyPrefix = 'a00'

class Pricebook2(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=255, verbose_name=u'Price Book Name', db_column=u'Name') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    lastvieweddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Viewed Date', db_column=u'LastViewedDate', blank=True) # Field name made lowercase.
    lastreferenceddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Referenced Date', db_column=u'LastReferencedDate', blank=True) # Field name made lowercase.
    isactive = models.BooleanField(verbose_name=u'Active', db_column=u'IsActive') # Field name made lowercase.
    description = models.CharField(max_length=255, verbose_name=u'Description', db_column=u'Description', blank=True) # Field name made lowercase.
    isstandard = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Is Standard Price Book', db_column=u'IsStandard') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Pricebook2'
        verbose_name = 'Price Book'
        verbose_name_plural = 'Price Books'
        # keyPrefix = '01s'

class Pricebook2History(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    pricebook2id = models.ForeignKey('Pricebook2', db_column=u'Pricebook2Id') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    field = models.CharField(max_length=255, verbose_name=u'Changed Field', sf_read_only=models.READ_ONLY, db_column=u'Field', choices=[(u'created', u'Created.'), (u'Description', None), (u'feedEvent', u'Feed event'), (u'IsActive', None), (u'IsArchived', None), (u'IsStandard', None), (u'Name', None), (u'ownerAccepted', u'Owner (Accepted)'), (u'ownerAssignment', u'Owner (Assignment)'), (u'locked', u'Record locked.'), (u'unlocked', u'Record unlocked.')]) # Field name made lowercase.
    oldvalue = models.CharField(max_length=255, verbose_name=u'Old Value', sf_read_only=models.READ_ONLY, db_column=u'OldValue', blank=True) # Field name made lowercase.
    newvalue = models.CharField(max_length=255, verbose_name=u'New Value', sf_read_only=models.READ_ONLY, db_column=u'NewValue', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Pricebook2History'
        verbose_name = 'Price Book History'
        verbose_name_plural = 'Price Book History'
        # keyPrefix = 'None'

class Pricebookentry(models.Model):
    name = models.CharField(max_length=255, verbose_name=u'Product Name', sf_read_only=models.READ_ONLY, db_column=u'Name', blank=True) # Field name made lowercase.
    pricebook2id = models.ForeignKey('Pricebook2', db_column=u'Pricebook2Id') # Field name made lowercase.
    product2id = models.ForeignKey('Product2', db_column=u'Product2Id') # Field name made lowercase.
    unitprice = models.DecimalField(decimal_places=2, verbose_name=u'List Price', max_digits=18, db_column=u'UnitPrice') # Field name made lowercase.
    isactive = models.BooleanField(verbose_name=u'Active', db_column=u'IsActive') # Field name made lowercase.
    usestandardprice = models.BooleanField(verbose_name=u'Use Standard Price', db_column=u'UseStandardPrice') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    productcode = models.CharField(max_length=255, verbose_name=u'Product Code', sf_read_only=models.READ_ONLY, db_column=u'ProductCode', blank=True) # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'PricebookEntry'
        verbose_name = 'Price Book Entry'
        verbose_name_plural = 'Price Book Entries'
        # keyPrefix = '01u'

class Processdefinition(models.Model):
    name = models.CharField(max_length=40, verbose_name=u'Name', sf_read_only=models.READ_ONLY, db_column=u'Name') # Field name made lowercase.
    developername = models.CharField(max_length=80, verbose_name=u'Unique Name', sf_read_only=models.READ_ONLY, db_column=u'DeveloperName') # Field name made lowercase.
    type = models.CharField(max_length=40, verbose_name=u'Process Definition Type', sf_read_only=models.READ_ONLY, db_column=u'Type', choices=[(u'Approval', u'Approval Process'), (u'State', u'State-based Process')]) # Field name made lowercase.
    description = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Description', db_column=u'Description', blank=True) # Field name made lowercase.
    tableenumorid = models.CharField(max_length=40, verbose_name=u'Custom Object Definition ID', sf_read_only=models.READ_ONLY, db_column=u'TableEnumOrId', choices=[(u'Account', None), (u'Asset', None), (u'Campaign', None), (u'Case', None), (u'Contact', None), (u'Contract', None), (u'KnowledgeArticle', None), (u'KnowledgeArticleVersion', None), (u'Lead', None), (u'Opportunity', None), (u'Product2', None), (u'Quote', None), (u'Solution', None), (u'WorkCoaching', None), (u'WorkFeedback', None), (u'WorkFeedbackQuestion', None), (u'WorkFeedbackQuestionSet', None), (u'WorkFeedbackRequest', None), (u'WorkGoal', None), (u'WorkPerformanceCycle', None)]) # Field name made lowercase.
    locktype = models.CharField(max_length=40, verbose_name=u'Lock Type', sf_read_only=models.READ_ONLY, db_column=u'LockType', choices=[(u'Total', None), (u'Admin', None), (u'Owner', None), (u'Workitem', None), (u'Node', None), (u'none', None)]) # Field name made lowercase.
    state = models.CharField(max_length=40, verbose_name=u'State', sf_read_only=models.READ_ONLY, db_column=u'State', choices=[(u'Active', u'Active'), (u'Inactive', u'Inactive'), (u'Obsolete', u'Obsolete')]) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'ProcessDefinition'
        verbose_name = 'Process Definition'
        verbose_name_plural = 'Process Definition'
        # keyPrefix = '04a'

class Processinstance(models.Model):
    processdefinitionid = models.ForeignKey('Processdefinition', db_column=u'ProcessDefinitionId') # Field name made lowercase.
    targetobjectid = models.ForeignKey('Account', db_column=u'TargetObjectId') # Field name made lowercase.
    status = models.CharField(max_length=40, verbose_name=u'Status', sf_read_only=models.READ_ONLY, db_column=u'Status', choices=[(u'Approved', u'Approved'), (u'Rejected', u'Rejected'), (u'Removed', u'Recalled'), (u'Fault', u'Fault'), (u'Pending', u'Pending'), (u'Held', u'Hold'), (u'Reassigned', u'Reassigned'), (u'Started', u'Submitted'), (u'NoResponse', u'NoResponse')]) # Field name made lowercase.
    completeddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Completed Date', db_column=u'CompletedDate', blank=True) # Field name made lowercase.
    lastactorid = models.ForeignKey('User', null=True, db_column=u'LastActorId', blank=True) # Field name made lowercase.
    elapsedtimeindays = models.DecimalField(decimal_places=3, db_column=u'ElapsedTimeInDays', sf_read_only=models.READ_ONLY, max_digits=7, blank=True, null=True, verbose_name=u'Elapsed Time in Days') # Field name made lowercase.
    elapsedtimeinhours = models.DecimalField(decimal_places=2, db_column=u'ElapsedTimeInHours', sf_read_only=models.READ_ONLY, max_digits=7, blank=True, null=True, verbose_name=u'Elapsed Time in Hours') # Field name made lowercase.
    elapsedtimeinminutes = models.DecimalField(decimal_places=0, db_column=u'ElapsedTimeInMinutes', sf_read_only=models.READ_ONLY, max_digits=8, blank=True, null=True, verbose_name=u'Elapsed Time in Minutes') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'ProcessInstance'
        verbose_name = 'Process Instance'
        verbose_name_plural = 'Process Instance'
        # keyPrefix = '04g'

class Processinstancehistory(models.Model):
    ispending = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Is Pending', db_column=u'IsPending') # Field name made lowercase.
    processinstanceid = models.ForeignKey('Processinstance', db_column=u'ProcessInstanceId') # Field name made lowercase.
    targetobjectid = models.ForeignKey('Account', null=True, db_column=u'TargetObjectId', blank=True) # Field name made lowercase.
    stepstatus = models.CharField(db_column=u'StepStatus', choices=[(u'Approved', u'Approved'), (u'Rejected', u'Rejected'), (u'Removed', u'Recalled'), (u'Fault', u'Fault'), (u'Pending', u'Pending'), (u'Held', u'Hold'), (u'Reassigned', u'Reassigned'), (u'Started', u'Submitted'), (u'NoResponse', u'NoResponse')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Status') # Field name made lowercase.
    originalactorid = models.ForeignKey('Group', db_column=u'OriginalActorId') # Field name made lowercase.
    actorid = models.ForeignKey('Group', db_column=u'ActorId') # Field name made lowercase.
    reminderssent = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'RemindersSent', db_column=u'RemindersSent', blank=True) # Field name made lowercase.
    elapsedtimeindays = models.DecimalField(decimal_places=0, db_column=u'ElapsedTimeInDays', sf_read_only=models.READ_ONLY, max_digits=18, blank=True, null=True, verbose_name=u'Elapsed Time in Days') # Field name made lowercase.
    elapsedtimeinhours = models.DecimalField(decimal_places=2, db_column=u'ElapsedTimeInHours', sf_read_only=models.READ_ONLY, max_digits=7, blank=True, null=True, verbose_name=u'Elapsed Time in Hours') # Field name made lowercase.
    elapsedtimeinminutes = models.DecimalField(decimal_places=0, db_column=u'ElapsedTimeInMinutes', sf_read_only=models.READ_ONLY, max_digits=8, blank=True, null=True, verbose_name=u'Elapsed Time in Minutes') # Field name made lowercase.
    comments = models.CharField(max_length=4000, verbose_name=u'Comments', sf_read_only=models.READ_ONLY, db_column=u'Comments', blank=True) # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'ProcessInstanceHistory'
        verbose_name = 'Process Instance History'
        verbose_name_plural = 'Process Instance History'
        # keyPrefix = 'None'

class Processinstancenode(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    processinstanceid = models.ForeignKey('Processinstance', db_column=u'ProcessInstanceId') # Field name made lowercase.
    processnodeid = models.ForeignKey('Processnode', db_column=u'ProcessNodeId') # Field name made lowercase.
    nodestatus = models.CharField(db_column=u'NodeStatus', choices=[(u'Approved', u'Approved'), (u'Rejected', u'Rejected'), (u'Removed', u'Recalled'), (u'Fault', u'Fault'), (u'Pending', u'Pending'), (u'Held', u'Hold'), (u'Reassigned', u'Reassigned'), (u'Started', u'Submitted'), (u'NoResponse', u'NoResponse')], max_length=255, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Node Status') # Field name made lowercase.
    completeddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Completed Date', db_column=u'CompletedDate', blank=True) # Field name made lowercase.
    lastactorid = models.ForeignKey('User', null=True, db_column=u'LastActorId', blank=True) # Field name made lowercase.
    processnodename = models.CharField(max_length=255, verbose_name=u'Name', sf_read_only=models.READ_ONLY, db_column=u'ProcessNodeName', blank=True) # Field name made lowercase.
    elapsedtimeindays = models.DecimalField(decimal_places=3, db_column=u'ElapsedTimeInDays', sf_read_only=models.READ_ONLY, max_digits=7, blank=True, null=True, verbose_name=u'Elapsed Time in Days') # Field name made lowercase.
    elapsedtimeinhours = models.DecimalField(decimal_places=2, db_column=u'ElapsedTimeInHours', sf_read_only=models.READ_ONLY, max_digits=7, blank=True, null=True, verbose_name=u'Elapsed Time in Hours') # Field name made lowercase.
    elapsedtimeinminutes = models.DecimalField(decimal_places=0, db_column=u'ElapsedTimeInMinutes', sf_read_only=models.READ_ONLY, max_digits=8, blank=True, null=True, verbose_name=u'Elapsed Time in Minutes') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'ProcessInstanceNode'
        verbose_name = 'Process Instance Node'
        verbose_name_plural = 'Process Instance Node'
        # keyPrefix = '0OO'

class Processinstancestep(models.Model):
    processinstanceid = models.ForeignKey('Processinstance', db_column=u'ProcessInstanceId') # Field name made lowercase.
    stepstatus = models.CharField(db_column=u'StepStatus', choices=[(u'Approved', u'Approved'), (u'Rejected', u'Rejected'), (u'Removed', u'Recalled'), (u'Fault', u'Fault'), (u'Pending', u'Pending'), (u'Held', u'Hold'), (u'Reassigned', u'Reassigned'), (u'Started', u'Submitted'), (u'NoResponse', u'NoResponse')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Step Status') # Field name made lowercase.
    originalactorid = models.ForeignKey('Group', db_column=u'OriginalActorId') # Field name made lowercase.
    actorid = models.ForeignKey('Group', db_column=u'ActorId') # Field name made lowercase.
    comments = models.CharField(max_length=4000, verbose_name=u'Comments', sf_read_only=models.READ_ONLY, db_column=u'Comments', blank=True) # Field name made lowercase.
    stepnodeid = models.ForeignKey('Processnode', null=True, db_column=u'StepNodeId', blank=True) # Field name made lowercase.
    elapsedtimeindays = models.DecimalField(decimal_places=0, db_column=u'ElapsedTimeInDays', sf_read_only=models.READ_ONLY, max_digits=18, blank=True, null=True, verbose_name=u'Elapsed Time in Days') # Field name made lowercase.
    elapsedtimeinhours = models.DecimalField(decimal_places=2, db_column=u'ElapsedTimeInHours', sf_read_only=models.READ_ONLY, max_digits=7, blank=True, null=True, verbose_name=u'Elapsed Time in Hours') # Field name made lowercase.
    elapsedtimeinminutes = models.DecimalField(decimal_places=0, db_column=u'ElapsedTimeInMinutes', sf_read_only=models.READ_ONLY, max_digits=8, blank=True, null=True, verbose_name=u'Elapsed Time in Minutes') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'ProcessInstanceStep'
        verbose_name = 'Process Instance Step'
        verbose_name_plural = 'Process Instance Step'
        # keyPrefix = '04h'

class Processinstanceworkitem(models.Model):
    processinstanceid = models.ForeignKey('Processinstance', db_column=u'ProcessInstanceId') # Field name made lowercase.
    originalactorid = models.ForeignKey('Group', db_column=u'OriginalActorId') # Field name made lowercase.
    actorid = models.ForeignKey('Group', db_column=u'ActorId') # Field name made lowercase.
    elapsedtimeindays = models.DecimalField(decimal_places=3, db_column=u'ElapsedTimeInDays', sf_read_only=models.READ_ONLY, max_digits=7, blank=True, null=True, verbose_name=u'Elapsed Time in Days') # Field name made lowercase.
    elapsedtimeinhours = models.DecimalField(decimal_places=2, db_column=u'ElapsedTimeInHours', sf_read_only=models.READ_ONLY, max_digits=7, blank=True, null=True, verbose_name=u'Elapsed Time in Hours') # Field name made lowercase.
    elapsedtimeinminutes = models.DecimalField(decimal_places=0, db_column=u'ElapsedTimeInMinutes', sf_read_only=models.READ_ONLY, max_digits=8, blank=True, null=True, verbose_name=u'Elapsed Time in Minutes') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'ProcessInstanceWorkitem'
        verbose_name = 'Approval Request'
        verbose_name_plural = 'Approval Requests'
        # keyPrefix = '04i'

class Processnode(models.Model):
    name = models.CharField(max_length=255, verbose_name=u'Name', sf_read_only=models.READ_ONLY, db_column=u'Name') # Field name made lowercase.
    developername = models.CharField(max_length=80, verbose_name=u'Unique Name', sf_read_only=models.READ_ONLY, db_column=u'DeveloperName') # Field name made lowercase.
    processdefinitionid = models.ForeignKey('Processdefinition', db_column=u'ProcessDefinitionId') # Field name made lowercase.
    description = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Description', db_column=u'Description', blank=True) # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'ProcessNode'
        verbose_name = 'Process Node'
        verbose_name_plural = 'Process Node'
        # keyPrefix = '04b'

class Product2(models.Model):
    name = models.CharField(max_length=255, verbose_name=u'Product Name', db_column=u'Name') # Field name made lowercase.
    productcode = models.CharField(max_length=255, verbose_name=u'Product Code', db_column=u'ProductCode', blank=True) # Field name made lowercase.
    description = models.TextField(verbose_name=u'Product Description', db_column=u'Description', blank=True) # Field name made lowercase.
    isactive = models.BooleanField(verbose_name=u'Active', db_column=u'IsActive') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    family = models.CharField(blank=True, max_length=40, verbose_name=u'Product Family', db_column=u'Family', choices=[(u'Southern Simple', u'Southern Simple'), (u'Northern Simple', u'Northern Simple'), (u'Frontier Simple', u'Frontier Simple'), (u'Southern Star', u'Southern Star'), (u'Union Star', u'Union Star'), (u'Neighborhood', u'Neighborhood')]) # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    plan_details__c = models.URLField(help_text=u'Link to plan details', null=True, verbose_name=u'Plan Details', db_column=u'Plan_Details__c', blank=True) # Field name made lowercase.
    exchange_details__c = models.CharField(blank=True, max_length=255, verbose_name=u'Exchange Details', db_column=u'Exchange_Details__c', choices=[(u'On Exchange', u'On Exchange'), (u'Off Exchange', u'Off Exchange')]) # Field name made lowercase.
    co_insurance__c = models.CharField(db_column=u'Co_Insurance__c', choices=[(u'90/10', u'90/10'), (u'80/20', u'80/20'), (u'70/30', u'70/30'), (u'60/40', u'60/40'), (u'50/50', u'50/50')], max_length=255, blank=True, help_text=u'Co-insurance information relative the plan being reviewed.', verbose_name=u'Co-Insurance') # Field name made lowercase.
    max_out_of_pocket_member__c = models.DecimalField(db_column=u'Max_Out_Of_Pocket_Member__c', decimal_places=2, max_digits=18, blank=True, help_text=u'Max out-of-pocket expenditures for the plan in question.', null=True, verbose_name=u'Max Out Of Pocket - Member') # Field name made lowercase.
    office_visit__c = models.CharField(blank=True, max_length=255, verbose_name=u'Office Visit', db_column=u'Office_Visit__c', choices=[(u'$15', u'$15'), (u'$20', u'$20'), (u'$25', u'$25'), (u'$30', u'$30'), (u'$35', u'$35'), (u'$40', u'$40'), (u'$45', u'$45'), (u'$50', u'$50'), (u'$55', u'$55'), (u'$60', u'$60'), (u'$65', u'$65'), (u'$70', u'$70'), (u'$75', u'$75'), (u'$80', u'$80'), (u'$85', u'$85'), (u'$90', u'$90'), (u'Ded & Co-Ins', u'Ded & Co-Ins'), (u'None', u'None')]) # Field name made lowercase.
    deductible__c = models.DecimalField(db_column=u'Deductible__c', decimal_places=2, max_digits=18, blank=True, help_text=u'Deductible for the plan in question.', null=True, verbose_name=u'Deductible - Member') # Field name made lowercase.
    max_out_of_pocket_family__c = models.DecimalField(db_column=u'Max_Out_of_Pocket_Family__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Max Out of Pocket - Family') # Field name made lowercase.
    deductible_family__c = models.DecimalField(db_column=u'Deductible_Family__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Deductible - Family') # Field name made lowercase.
    plan_type__c = models.CharField(blank=True, max_length=255, verbose_name=u'Plan Type', db_column=u'Plan_Type__c', choices=[(u'HMO', u'HMO'), (u'PPO', u'PPO'), (u'HSA', u'HSA'), (u'POS', u'POS'), (u'MCO', u'MCO'), (u'Indemnity', u'Indemnity')]) # Field name made lowercase.
    rx_coverage__c = models.CharField(blank=True, max_length=255, verbose_name=u'Rx Coverage', db_column=u'Rx_Coverage__c', choices=[(u'Comprehensive', u'Comprehensive'), (u'Discount Card', u'Discount Card'), (u'Generic', u'Generic'), (u'None', u'None')]) # Field name made lowercase.
    benefit_plan_name__c = models.CharField(blank=True, max_length=255, verbose_name=u'Benefit Plan Name', db_column=u'Benefit_Plan_Name__c', choices=[(u'POS-South w/Ped Den', u'POS-South w/Ped Den'), (u'POS-North w/Ped Den', u'POS-North w/Ped Den'), (u'POS-Frontier w/Ped Den', u'POS-Frontier w/Ped Den'), (u'POS-South-Union w/Ped Den', u'POS-South-Union w/Ped Den'), (u'POS-South-Concierge w/Ped Den', u'POS-South-Concierge w/Ped Den')]) # Field name made lowercase.
    benefit_package__c = models.CharField(blank=True, max_length=255, verbose_name=u'Benefit Package', db_column=u'Benefit_Package__c', choices=[(u'1', u'1'), (u'2', u'2'), (u'3', u'3'), (u'4', u'4'), (u'5', u'5')]) # Field name made lowercase.
    milliman_benefit_design__c = models.CharField(blank=True, max_length=255, verbose_name=u'Milliman Benefit Design', db_column=u'Milliman_Benefit_Design__c', choices=[(u'POS - Las Vegas (Indiv.)', u'POS - Las Vegas (Indiv.)'), (u'POS - N. Nevada (Indiv.)', u'POS - N. Nevada (Indiv.)'), (u'POS (Indiv.)', u'POS (Indiv.)'), (u'Concierge (Indiv.)', u'Concierge (Indiv.)')]) # Field name made lowercase.
    service_area_id__c = models.CharField(blank=True, max_length=255, verbose_name=u'Service Area ID', db_column=u'Service_Area_ID__c', choices=[(u'NVS001', u'NVS001'), (u'NVS002', u'NVS002'), (u'NVS003', u'NVS003')]) # Field name made lowercase.
    formulary_id__c = models.CharField(blank=True, max_length=255, verbose_name=u'Formulary ID', db_column=u'Formulary_ID__c', choices=[(u'NVF001', u'NVF001'), (u'NVF003', u'NVF003'), (u'NVF006', u'NVF006'), (u'NVF018', u'NVF018'), (u'NVF019', u'NVF019'), (u'NVF007', u'NVF007'), (u'NVF009', u'NVF009'), (u'NVF008', u'NVF008'), (u'NVF013', u'NVF013')]) # Field name made lowercase.
    schedule_document_id__c = models.CharField(blank=True, max_length=255, verbose_name=u'Schedule Document ID#', db_column=u'Schedule_Document_ID__c', choices=[(u'10530227.1', u'10530227.1'), (u'10530228.1', u'10530228.1'), (u'10530234.1', u'10530234.1'), (u'10530232.1', u'10530232.1'), (u'10530240.1', u'10530240.1'), (u'10530238.1', u'10530238.1'), (u'10530241.2', u'10530241.2'), (u'10530239.2', u'10530239.2'), (u'10530246.1', u'10530246.1'), (u'10530243.1', u'10530243.1'), (u'10530244.2', u'10530244.2'), (u'10530249.2', u'10530249.2'), (u'10530250.1', u'10530250.1'), (u'10530251.2', u'10530251.2'), (u'10530252.1', u'10530252.1'), (u'10530256.1', u'10530256.1'), (u'10530257.3', u'10530257.3'), (u'10530261.1', u'10530261.1'), (u'10530267.1', u'10530267.1'), (u'10530268.1', u'10530268.1')]) # Field name made lowercase.
    eoc_document_id__c = models.CharField(blank=True, max_length=255, verbose_name=u'EOC Document ID #', db_column=u'EOC_Document_ID__c', choices=[(u'10531361.2', u'10531361.2'), (u'10531364.2', u'10531364.2'), (u'10531367.2', u'10531367.2'), (u'10531370.2', u'10531370.2'), (u'10531371.2', u'10531371.2'), (u'10531372.2', u'10531372.2')]) # Field name made lowercase.
    cost_share__c = models.CharField(blank=True, max_length=255, verbose_name=u'Cost Share', db_column=u'Cost_Share__c', choices=[(u'Co-pay', u'Co-pay'), (u'Ded/Co-ins', u'Ded/Co-ins'), (u'Mixed', u'Mixed')]) # Field name made lowercase.
    product_id__c = models.CharField(blank=True, max_length=255, verbose_name=u'Product ID', db_column=u'Product_ID__c', choices=[(u'34996NV009', u'34996NV009'), (u'34996NV010', u'34996NV010'), (u'34996NV011', u'34996NV011'), (u'34996NV012', u'34996NV012')]) # Field name made lowercase.
    plan_id__c = models.CharField(blank=True, max_length=255, verbose_name=u'Plan ID', db_column=u'Plan_ID__c', choices=[(u'0001-01', u'0001-01'), (u'0002-01', u'0002-01'), (u'0003-01', u'0003-01'), (u'0004-01', u'0004-01'), (u'0005-01', u'0005-01'), (u'0006-01', u'0006-01'), (u'0007-01', u'0007-01'), (u'0008-01', u'0008-01')]) # Field name made lowercase.
    tier_1_network_id__c = models.CharField(blank=True, max_length=255, verbose_name=u'Tier 1 Network ID', db_column=u'Tier_1_Network_ID__c', choices=[(u'N/A', u'N/A'), (u'NVN001', u'NVN001'), (u'NVN002', u'NVN002'), (u'NVN003', u'NVN003'), (u'NVN004', u'NVN004')]) # Field name made lowercase.
    tier_2_network_id__c = models.CharField(blank=True, max_length=255, verbose_name=u'Tier 2 Network ID', db_column=u'Tier_2_Network_ID__c', choices=[(u'NVN001', u'NVN001'), (u'N/A', u'N/A')]) # Field name made lowercase.
    benefit_type__c = models.CharField(blank=True, max_length=255, verbose_name=u'Benefit Type', db_column=u'Benefit_Type__c', choices=[(u'Gold (Standard)', u'Gold (Standard)'), (u'Silver (Standard)', u'Silver (Standard)'), (u'Bronze (Standard)', u'Bronze (Standard)'), (u'Catastrophic (Standard)', u'Catastrophic (Standard)'), (u'Platinum (Standard)', u'Platinum (Standard)')]) # Field name made lowercase.
    full_id__c = models.CharField(max_length=1300, verbose_name=u'Full ID', sf_read_only=models.READ_ONLY, db_column=u'Full_ID__c', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Product2'
        verbose_name = 'Product'
        verbose_name_plural = 'Products'
        # keyPrefix = '01t'

class Product2Feed(models.Model):
    parentid = models.ForeignKey('Product2', db_column=u'ParentId') # Field name made lowercase.
    type = models.CharField(db_column=u'Type', choices=[(u'TrackedChange', u'Tracked Change'), (u'UserStatus', u'User Status'), (u'TextPost', u'Text Post'), (u'AdvancedTextPost', u'Advanced Text Post'), (u'LinkPost', u'Link Post'), (u'ContentPost', u'Content Post'), (u'PollPost', u'Poll'), (u'RypplePost', u'Work.com Thanks'), (u'ProfileSkillPost', u'Profile Skill Post'), (u'DashboardComponentSnapshot', u'Dashboard Component Snapshot'), (u'ApprovalPost', u'Approval Post'), (u'CaseCommentPost', u'Case Comment Feed'), (u'ReplyPost', u'Reply Post'), (u'EmailMessageEvent', u'Email Message Feed'), (u'CallLogPost', u'Call Log Feed'), (u'ChangeStatusPost', u'Change Status Feed'), (u'AttachArticleEvent', u'Attached Article'), (u'MilestoneEvent', u'Milestone Event'), (u'ActivityEvent', u'Activity Change'), (u'ChatTranscriptPost', u'Chat Transcript Post'), (u'CollaborationGroupCreated', u'Collaboration Group Created'), (u'CollaborationGroupUnarchived', u'Collaboration Group Reactivated'), (u'SocialPost', u'Social Post'), (u'QuestionPost', u'Question Post'), (u'FacebookPost', u'Facebook Post'), (u'BasicTemplateFeedItem', u'Basic Template Post'), (u'CreateRecordEvent', u'Created Record'), (u'CanvasPost', u'Canvas'), (u'AnnouncementPost', u'a')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Feed Item Type') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    commentcount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Comment Count', db_column=u'CommentCount') # Field name made lowercase.
    likecount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Like Count', db_column=u'LikeCount') # Field name made lowercase.
    title = models.CharField(max_length=255, verbose_name=u'Title', sf_read_only=models.READ_ONLY, db_column=u'Title', blank=True) # Field name made lowercase.
    body = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Body', db_column=u'Body', blank=True) # Field name made lowercase.
    linkurl = models.URLField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Link Url', db_column=u'LinkUrl', blank=True) # Field name made lowercase.
    relatedrecordid = models.ForeignKey('Contentversion', null=True, db_column=u'RelatedRecordId', blank=True) # Field name made lowercase.
    contentdata = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Content Data', db_column=u'ContentData', blank=True) # Field name made lowercase.
    contentfilename = models.CharField(max_length=255, verbose_name=u'Content File Name', sf_read_only=models.READ_ONLY, db_column=u'ContentFileName', blank=True) # Field name made lowercase.
    contentdescription = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Content Description', db_column=u'ContentDescription', blank=True) # Field name made lowercase.
    contenttype = models.CharField(max_length=120, verbose_name=u'Content File Type', sf_read_only=models.READ_ONLY, db_column=u'ContentType', blank=True) # Field name made lowercase.
    contentsize = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Content Size', db_column=u'ContentSize', blank=True) # Field name made lowercase.
    insertedbyid = models.ForeignKey('User', null=True, db_column=u'InsertedById', blank=True) # Field name made lowercase.
    networkscope = models.CharField(db_column=u'NetworkScope', choices=[(u'AllNetworks', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Network Scope') # Field name made lowercase.
    visibility = models.CharField(db_column=u'Visibility', choices=[(u'AllUsers', None), (u'InternalUsers', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Visibility') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Product2Feed'
        verbose_name = 'Product Feed'
        verbose_name_plural = 'Product Feed'
        # keyPrefix = 'None'

class Profile(models.Model):
    name = models.CharField(max_length=255, verbose_name=u'Name', sf_read_only=models.NOT_CREATEABLE, db_column=u'Name') # Field name made lowercase.
    permissionsemailsingle = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Send Email', db_column=u'PermissionsEmailSingle') # Field name made lowercase.
    permissionsemailmass = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Mass Email', db_column=u'PermissionsEmailMass') # Field name made lowercase.
    permissionsedittask = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Edit Tasks', db_column=u'PermissionsEditTask') # Field name made lowercase.
    permissionseditevent = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Edit Events', db_column=u'PermissionsEditEvent') # Field name made lowercase.
    permissionsexportreport = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Export Reports', db_column=u'PermissionsExportReport') # Field name made lowercase.
    permissionsimportpersonal = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Import Personal Contacts', db_column=u'PermissionsImportPersonal') # Field name made lowercase.
    permissionsdataexport = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Weekly Data Export', db_column=u'PermissionsDataExport') # Field name made lowercase.
    permissionsmanageusers = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Manage Users', db_column=u'PermissionsManageUsers') # Field name made lowercase.
    permissionseditpublictemplates = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Manage Public Templates', db_column=u'PermissionsEditPublicTemplates') # Field name made lowercase.
    permissionsmodifyalldata = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Modify All Data', db_column=u'PermissionsModifyAllData') # Field name made lowercase.
    permissionsmanagecases = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Manage Cases', db_column=u'PermissionsManageCases') # Field name made lowercase.
    permissionsmassinlineedit = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Mass Edits from Lists', db_column=u'PermissionsMassInlineEdit') # Field name made lowercase.
    permissionseditknowledge = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Manage Articles', db_column=u'PermissionsEditKnowledge') # Field name made lowercase.
    permissionsmanageknowledge = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Manage Salesforce Knowledge', db_column=u'PermissionsManageKnowledge') # Field name made lowercase.
    permissionsmanagesolutions = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Manage Published Solutions', db_column=u'PermissionsManageSolutions') # Field name made lowercase.
    permissionscustomizeapplication = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Customize Application', db_column=u'PermissionsCustomizeApplication') # Field name made lowercase.
    permissionseditreadonlyfields = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Edit Read Only Fields', db_column=u'PermissionsEditReadonlyFields') # Field name made lowercase.
    permissionsrunreports = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Run Reports', db_column=u'PermissionsRunReports') # Field name made lowercase.
    permissionsviewsetup = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'View Setup and Configuration', db_column=u'PermissionsViewSetup') # Field name made lowercase.
    permissionstransferanyentity = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Transfer Record', db_column=u'PermissionsTransferAnyEntity') # Field name made lowercase.
    permissionsnewreportbuilder = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Report Builder', db_column=u'PermissionsNewReportBuilder') # Field name made lowercase.
    permissionsmanagecssusers = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Edit Self-Service Users', db_column=u'PermissionsManageCssUsers') # Field name made lowercase.
    permissionsactivatecontract = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Activate Contracts', db_column=u'PermissionsActivateContract') # Field name made lowercase.
    permissionsimportleads = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Import Leads', db_column=u'PermissionsImportLeads') # Field name made lowercase.
    permissionsmanageleads = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Manage Leads', db_column=u'PermissionsManageLeads') # Field name made lowercase.
    permissionstransferanylead = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Transfer Leads', db_column=u'PermissionsTransferAnyLead') # Field name made lowercase.
    permissionsviewalldata = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'View All Data', db_column=u'PermissionsViewAllData') # Field name made lowercase.
    permissionseditpublicdocuments = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Manage Public Documents', db_column=u'PermissionsEditPublicDocuments') # Field name made lowercase.
    permissionsviewencrypteddata = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'View Encrypted Data', db_column=u'PermissionsViewEncryptedData') # Field name made lowercase.
    permissionseditbrandtemplates = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Manage Letterheads', db_column=u'PermissionsEditBrandTemplates') # Field name made lowercase.
    permissionsedithtmltemplates = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Edit HTML Templates', db_column=u'PermissionsEditHtmlTemplates') # Field name made lowercase.
    permissionschatterinternaluser = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Chatter Internal User', db_column=u'PermissionsChatterInternalUser') # Field name made lowercase.
    permissionsdeleteactivatedcontract = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Delete Activated Contracts', db_column=u'PermissionsDeleteActivatedContract') # Field name made lowercase.
    permissionschatterinviteexternalusers = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Invite Customers To Chatter', db_column=u'PermissionsChatterInviteExternalUsers') # Field name made lowercase.
    permissionssendsitrequests = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Send Stay-in-Touch Requests', db_column=u'PermissionsSendSitRequests') # Field name made lowercase.
    permissionsoverrideforecasts = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Override Forecasts', db_column=u'PermissionsOverrideForecasts') # Field name made lowercase.
    permissionsviewallforecasts = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'View All Forecasts', db_column=u'PermissionsViewAllForecasts') # Field name made lowercase.
    permissionsapiuseronly = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Api Only User', db_column=u'PermissionsApiUserOnly') # Field name made lowercase.
    permissionsmanageremoteaccess = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Manage Connected Apps', db_column=u'PermissionsManageRemoteAccess') # Field name made lowercase.
    permissionscanusenewdashboardbuilder = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Drag-and-Drop Dashboard Builder', db_column=u'PermissionsCanUseNewDashboardBuilder') # Field name made lowercase.
    permissionsmanagecategories = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Manage Categories', db_column=u'PermissionsManageCategories') # Field name made lowercase.
    permissionsconvertleads = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Convert Leads', db_column=u'PermissionsConvertLeads') # Field name made lowercase.
    permissionspasswordneverexpires = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Password Never Expires', db_column=u'PermissionsPasswordNeverExpires') # Field name made lowercase.
    permissionsuseteamreassignwizards = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Use Team Reassignment Wizards', db_column=u'PermissionsUseTeamReassignWizards') # Field name made lowercase.
    permissionsinstallmultiforce = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Download AppExchange Packages', db_column=u'PermissionsInstallMultiforce') # Field name made lowercase.
    permissionspublishmultiforce = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Upload AppExchange Packages', db_column=u'PermissionsPublishMultiforce') # Field name made lowercase.
    permissionsmanagepartners = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Manage External Users', db_column=u'PermissionsManagePartners') # Field name made lowercase.
    permissionschatterowngroups = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Create and Own New Chatter Groups', db_column=u'PermissionsChatterOwnGroups') # Field name made lowercase.
    permissionseditopplineitemunitprice = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Edit Opportunity Product Sales Price', db_column=u'PermissionsEditOppLineItemUnitPrice') # Field name made lowercase.
    permissionscreatemultiforce = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Create AppExchange Packages', db_column=u'PermissionsCreateMultiforce') # Field name made lowercase.
    permissionsbulkapiharddelete = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Bulk API Hard Delete', db_column=u'PermissionsBulkApiHardDelete') # Field name made lowercase.
    permissionsinboundmigrationtoolsuser = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Deploy Change Sets', db_column=u'PermissionsInboundMigrationToolsUser') # Field name made lowercase.
    permissionssolutionimport = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Import Solutions', db_column=u'PermissionsSolutionImport') # Field name made lowercase.
    permissionsmanagecallcenters = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Manage Call Centers', db_column=u'PermissionsManageCallCenters') # Field name made lowercase.
    permissionsportalsuperuser = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Portal Super User', db_column=u'PermissionsPortalSuperUser') # Field name made lowercase.
    permissionsmanagesynonyms = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Manage Synonyms', db_column=u'PermissionsManageSynonyms') # Field name made lowercase.
    permissionsoutboundmigrationtoolsuser = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Create and Upload Change Sets', db_column=u'PermissionsOutboundMigrationToolsUser') # Field name made lowercase.
    permissionsdelegatedportaluseradmin = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Delegated External User Administrator', db_column=u'PermissionsDelegatedPortalUserAdmin') # Field name made lowercase.
    permissionsviewcontent = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'View Content in Portals', db_column=u'PermissionsViewContent') # Field name made lowercase.
    permissionsmanageemailclientconfig = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Manage Email Client Configurations', db_column=u'PermissionsManageEmailClientConfig') # Field name made lowercase.
    permissionsenablenotifications = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Send Outbound Messages', db_column=u'PermissionsEnableNotifications') # Field name made lowercase.
    permissionsmanagedataintegrations = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Manage Data Integrations', db_column=u'PermissionsManageDataIntegrations') # Field name made lowercase.
    permissionsdistributefromperswksp = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Deliver Uploaded Files and Personal Content', db_column=u'PermissionsDistributeFromPersWksp') # Field name made lowercase.
    permissionsviewdatacategories = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'View Data Categories', db_column=u'PermissionsViewDataCategories') # Field name made lowercase.
    permissionsmanagedatacategories = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Manage Data Categories', db_column=u'PermissionsManageDataCategories') # Field name made lowercase.
    permissionsauthorapex = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Author Apex', db_column=u'PermissionsAuthorApex') # Field name made lowercase.
    permissionsmanagemobile = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Manage Mobile Configurations', db_column=u'PermissionsManageMobile') # Field name made lowercase.
    permissionsapienabled = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'API Enabled', db_column=u'PermissionsApiEnabled') # Field name made lowercase.
    permissionsmanagecustomreporttypes = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Manage Custom Report Types', db_column=u'PermissionsManageCustomReportTypes') # Field name made lowercase.
    permissionseditcasecomments = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Edit Case Comments', db_column=u'PermissionsEditCaseComments') # Field name made lowercase.
    permissionstransferanycase = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Transfer Cases', db_column=u'PermissionsTransferAnyCase') # Field name made lowercase.
    permissionscontentadministrator = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Manage Salesforce CRM Content', db_column=u'PermissionsContentAdministrator') # Field name made lowercase.
    permissionscreateworkspaces = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Create Libraries', db_column=u'PermissionsCreateWorkspaces') # Field name made lowercase.
    permissionsmanagecontentpermissions = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Manage Content Permissions', db_column=u'PermissionsManageContentPermissions') # Field name made lowercase.
    permissionsmanagecontentproperties = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Manage Content Properties', db_column=u'PermissionsManageContentProperties') # Field name made lowercase.
    permissionsmanagecontenttypes = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Manage Content Types', db_column=u'PermissionsManageContentTypes') # Field name made lowercase.
    permissionsschedulejob = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Schedule Dashboards', db_column=u'PermissionsScheduleJob') # Field name made lowercase.
    permissionsmanageanalyticsnapshots = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Manage Reporting Snapshots', db_column=u'PermissionsManageAnalyticSnapshots') # Field name made lowercase.
    permissionsschedulereports = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Schedule Reports', db_column=u'PermissionsScheduleReports') # Field name made lowercase.
    permissionsmanagebusinesshourholidays = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Manage Business Hours Holidays', db_column=u'PermissionsManageBusinessHourHolidays') # Field name made lowercase.
    permissionsmanagedynamicdashboards = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Manage Dynamic Dashboards', db_column=u'PermissionsManageDynamicDashboards') # Field name made lowercase.
    permissionscustomsidebaronallpages = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Show Custom Sidebar On All Pages', db_column=u'PermissionsCustomSidebarOnAllPages') # Field name made lowercase.
    permissionsmanageinteraction = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Manage Force.com Flow', db_column=u'PermissionsManageInteraction') # Field name made lowercase.
    permissionsviewmyteamsdashboards = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u"View My Team's Dashboards", db_column=u'PermissionsViewMyTeamsDashboards') # Field name made lowercase.
    permissionsmoderatechatter = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Moderate Chatter', db_column=u'PermissionsModerateChatter') # Field name made lowercase.
    permissionsresetpasswords = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Reset User Passwords and Unlock Users', db_column=u'PermissionsResetPasswords') # Field name made lowercase.
    permissionsflowuflrequired = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Require Force.com Flow User Feature License', db_column=u'PermissionsFlowUFLRequired') # Field name made lowercase.
    permissionscaninsertfeedsystemfields = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Insert System Field Values for Chatter Feeds', db_column=u'PermissionsCanInsertFeedSystemFields') # Field name made lowercase.
    permissionsmanageknowledgeimportexport = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Manage Knowledge Article Import/Export', db_column=u'PermissionsManageKnowledgeImportExport') # Field name made lowercase.
    permissionsemailtemplatemanagement = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Manage Email Templates', db_column=u'PermissionsEmailTemplateManagement') # Field name made lowercase.
    permissionsemailadministration = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Email Administration', db_column=u'PermissionsEmailAdministration') # Field name made lowercase.
    permissionsmanagechattermessages = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Manage Chatter Messages', db_column=u'PermissionsManageChatterMessages') # Field name made lowercase.
    permissionsallowemailic = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Email-Based Identity Confirmation Option', db_column=u'PermissionsAllowEmailIC') # Field name made lowercase.
    permissionschatterfilelink = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Create and Share Content Deliveries for Chatter Files', db_column=u'PermissionsChatterFileLink') # Field name made lowercase.
    permissionsforcetwofactor = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Two-Factor Authentication for User Interface Logins', db_column=u'PermissionsForceTwoFactor') # Field name made lowercase.
    permissionsmanagenetworks = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Create and Set Up Communities', db_column=u'PermissionsManageNetworks') # Field name made lowercase.
    permissionsmanageauthproviders = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Manage Auth. Providers', db_column=u'PermissionsManageAuthProviders') # Field name made lowercase.
    permissionsrunflow = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Run Flows', db_column=u'PermissionsRunFlow') # Field name made lowercase.
    permissionsviewglobalheader = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'View Global Header', db_column=u'PermissionsViewGlobalHeader') # Field name made lowercase.
    permissionsmanagequotas = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Manage Quotas', db_column=u'PermissionsManageQuotas') # Field name made lowercase.
    permissionscreatecustomizedashboards = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Create and Customize Dashboards', db_column=u'PermissionsCreateCustomizeDashboards') # Field name made lowercase.
    permissionscreatedashboardfolders = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Create Dashboard Folders', db_column=u'PermissionsCreateDashboardFolders') # Field name made lowercase.
    permissionsviewpublicdashboards = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'View Dashboards in Public Folders', db_column=u'PermissionsViewPublicDashboards') # Field name made lowercase.
    permissionsmanagedashbdsinpubfolders = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Manage Dashboards in Public Folders', db_column=u'PermissionsManageDashbdsInPubFolders') # Field name made lowercase.
    permissionscreatecustomizereports = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Create and Customize Reports', db_column=u'PermissionsCreateCustomizeReports') # Field name made lowercase.
    permissionscreatereportfolders = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Create Report Folders', db_column=u'PermissionsCreateReportFolders') # Field name made lowercase.
    permissionsviewpublicreports = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'View Reports in Public Folders', db_column=u'PermissionsViewPublicReports') # Field name made lowercase.
    permissionsmanagereportsinpubfolders = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Manage Reports in Public Folders', db_column=u'PermissionsManageReportsInPubFolders') # Field name made lowercase.
    permissionseditmydashboards = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Edit My Dashboards', db_column=u'PermissionsEditMyDashboards') # Field name made lowercase.
    permissionseditmyreports = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Edit My Reports', db_column=u'PermissionsEditMyReports') # Field name made lowercase.
    permissionsviewallusers = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'View All Users', db_column=u'PermissionsViewAllUsers') # Field name made lowercase.
    permissionsallowuniversalsearch = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Knowledge One', db_column=u'PermissionsAllowUniversalSearch') # Field name made lowercase.
    permissionsconnectorgtoenvironmenthub = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Connect Organization to Environment Hub', db_column=u'PermissionsConnectOrgToEnvironmentHub') # Field name made lowercase.
    permissionsworkcalibrationuser = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Enable Work.com Calibration', db_column=u'PermissionsWorkCalibrationUser') # Field name made lowercase.
    permissionscreatecustomizefilters = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Create and Customize List Views', db_column=u'PermissionsCreateCustomizeFilters') # Field name made lowercase.
    permissionsworkdotcomuserperm = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Enable Work.com', db_column=u'PermissionsWorkDotComUserPerm') # Field name made lowercase.
    permissionsmoderatenetworkfeeds = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Moderate Communities Feeds', db_column=u'PermissionsModerateNetworkFeeds') # Field name made lowercase.
    permissionsmoderatenetworkfiles = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Moderate Communities Files', db_column=u'PermissionsModerateNetworkFiles') # Field name made lowercase.
    permissionsgovernnetworks = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Manage Communities', db_column=u'PermissionsGovernNetworks') # Field name made lowercase.
    permissionssalesconsole = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Sales Console', db_column=u'PermissionsSalesConsole') # Field name made lowercase.
    permissionstwofactorapi = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Two-Factor Authentication for API Logins', db_column=u'PermissionsTwoFactorApi') # Field name made lowercase.
    permissionsdeletetopics = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Delete Topics', db_column=u'PermissionsDeleteTopics') # Field name made lowercase.
    permissionsedittopics = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Edit Topics', db_column=u'PermissionsEditTopics') # Field name made lowercase.
    permissionscreatetopics = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Create Topics', db_column=u'PermissionsCreateTopics') # Field name made lowercase.
    permissionsassigntopics = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Assign Topics', db_column=u'PermissionsAssignTopics') # Field name made lowercase.
    permissionsidentityenabled = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Use Identity Features', db_column=u'PermissionsIdentityEnabled') # Field name made lowercase.
    permissionsidentityconnect = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Use Identity Connect', db_column=u'PermissionsIdentityConnect') # Field name made lowercase.
    permissionsallowviewknowledge = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Allow View Knowledge', db_column=u'PermissionsAllowViewKnowledge') # Field name made lowercase.
    permissionscreateworkbadgedefinition = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Create custom Badge Definitions', db_column=u'PermissionsCreateWorkBadgeDefinition') # Field name made lowercase.
    permissionsmanagesearchpromotionrules = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Manage Promoted Search Terms', db_column=u'PermissionsManageSearchPromotionRules') # Field name made lowercase.
    permissionscustommobileappsaccess = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Access Custom Mobile Apps', db_column=u'PermissionsCustomMobileAppsAccess') # Field name made lowercase.
    permissionsviewhelplink = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'View Help Link', db_column=u'PermissionsViewHelpLink') # Field name made lowercase.
    permissionsmanageprofilespermissionsets = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Manage Profiles and Permission Sets', db_column=u'PermissionsManageProfilesPermissionsets') # Field name made lowercase.
    permissionsassignpermissionsets = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Assign Permission Sets', db_column=u'PermissionsAssignPermissionSets') # Field name made lowercase.
    permissionsmanageroles = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Manage Roles', db_column=u'PermissionsManageRoles') # Field name made lowercase.
    permissionsmanageipaddresses = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Manage IP Addresses', db_column=u'PermissionsManageIpAddresses') # Field name made lowercase.
    permissionsmanagesharing = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Manage Sharing', db_column=u'PermissionsManageSharing') # Field name made lowercase.
    permissionsmanageinternalusers = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Manage Internal Users', db_column=u'PermissionsManageInternalUsers') # Field name made lowercase.
    permissionsmanagepasswordpolicies = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Manage Password Policies', db_column=u'PermissionsManagePasswordPolicies') # Field name made lowercase.
    permissionsmanageloginaccesspolicies = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Manage Login Access Policies', db_column=u'PermissionsManageLoginAccessPolicies') # Field name made lowercase.
    permissionsmanageunlistedgroups = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Manage Unlisted Groups', db_column=u'PermissionsManageUnlistedGroups') # Field name made lowercase.
    userlicenseid = models.ForeignKey('Userlicense', db_column=u'UserLicenseId') # Field name made lowercase.
    usertype = models.CharField(db_column=u'UserType', choices=[(u'Standard', u'Standard'), (u'PowerPartner', u'Partner'), (u'PowerCustomerSuccess', u'Customer Portal Manager'), (u'CustomerSuccess', u'Customer Portal User'), (u'Guest', u'Guest'), (u'CspLitePortal', u'High Volume Portal'), (u'CsnOnly', u'CSN Only'), (u'SelfService', u'Self Service')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'User Type') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    description = models.CharField(max_length=255, verbose_name=u'Description', sf_read_only=models.NOT_CREATEABLE, db_column=u'Description', blank=True) # Field name made lowercase.
    lastvieweddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Viewed Date', db_column=u'LastViewedDate', blank=True) # Field name made lowercase.
    lastreferenceddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Referenced Date', db_column=u'LastReferencedDate', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Profile'
        verbose_name = 'Profile'
        verbose_name_plural = 'Profile'
        # keyPrefix = '00e'

class Pushtopic(models.Model):
    name = models.CharField(max_length=25, verbose_name=u'Topic Name', db_column=u'Name') # Field name made lowercase.
    query = models.CharField(max_length=1300, verbose_name=u'SOQL Query', db_column=u'Query') # Field name made lowercase.
    apiversion = models.DecimalField(decimal_places=1, verbose_name=u'API Version', max_digits=18, db_column=u'ApiVersion') # Field name made lowercase.
    isactive = models.BooleanField(verbose_name=u'Is Active', db_column=u'IsActive') # Field name made lowercase.
    notifyforfields = models.CharField(max_length=40, verbose_name=u'Notify For Fields', db_column=u'NotifyForFields', choices=[(u'Select', None), (u'Where', None), (u'Referenced', None), (u'All', None)]) # Field name made lowercase.
    notifyforoperations = models.CharField(max_length=40, verbose_name=u'Notify For Operations', sf_read_only=models.READ_ONLY, db_column=u'NotifyForOperations', choices=[(u'Create', None), (u'Update', None), (u'All', None), (u'Extended', None)]) # Field name made lowercase.
    description = models.CharField(max_length=400, verbose_name=u'Description', db_column=u'Description', blank=True) # Field name made lowercase.
    notifyforoperationcreate = models.BooleanField(verbose_name=u'Create', db_column=u'NotifyForOperationCreate') # Field name made lowercase.
    notifyforoperationupdate = models.BooleanField(verbose_name=u'Update', db_column=u'NotifyForOperationUpdate') # Field name made lowercase.
    notifyforoperationdelete = models.BooleanField(verbose_name=u'Delete', db_column=u'NotifyForOperationDelete') # Field name made lowercase.
    notifyforoperationundelete = models.BooleanField(verbose_name=u'Undelete', db_column=u'NotifyForOperationUndelete') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'PushTopic'
        verbose_name = 'Push Topic'
        verbose_name_plural = 'Push Topics'
        # keyPrefix = '0IF'

class Queuesobject(models.Model):
    queueid = models.ForeignKey('Group', db_column=u'QueueId') # Field name made lowercase.
    sobjecttype = models.CharField(max_length=40, verbose_name=u'Sobject Type', sf_read_only=models.NOT_UPDATEABLE, db_column=u'SobjectType', choices=[(u'Accumulators__c', None), (u'AdditionalUserData__c', None), (u'Appeal__c', None), (u'Authorized_Representative__c', None), (u'AutoPayOptions__c', None), (u'Carrier__c', None), (u'Case', None), (u'DataMigration__c', None), (u'Employer_Payments__c', None), (u'Family__c', None), (u'Group_Member__c', None), (u'Group_Quote__c', None), (u'IM_834_IN__c', None), (u'Lead', None), (u'legacyAccountsDedupResults__c', None), (u'mkto_si__Best_Bets_View__c', None), (u'mkto_si__BestBetsCache__c', None), (u'mkto_si__EmailActivityCache__c', None), (u'mkto_si__Get_Method_Argus__c', None), (u'mkto_si__GroupedWebActivityCache__c', None), (u'mkto_si__InterestingMomentsCache__c', None), (u'mkto_si__Marketo_Sales_Insight_Config__c', None), (u'mkto_si__ScoringCache__c', None), (u'mkto_si__Value__c', None), (u'mkto_si__WebActivityCache__c', None), (u'Payment_History__c', None), (u'Person_Payment__c', None), (u'Record_Audit__c', None), (u'Survey__c', None), (u'Survey_Choices__c', None), (u'Survey_Members__c', None), (u'Survey_Response__c', None), (u'SurveyQuestions__c', None), (u'WorkCoaching', None), (u'WorkFeedback', None), (u'WorkFeedbackQuestion', None), (u'WorkFeedbackQuestionSet', None), (u'WorkFeedbackRequest', None), (u'WorkGoal', None), (u'WorkPerformanceCycle', None)]) # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'QueueSobject'
        verbose_name = 'Queue Sobject'
        verbose_name_plural = 'Queue Sobjects'
        # keyPrefix = '03g'

class Quote(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=255, verbose_name=u'Quote Name', db_column=u'Name') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    lastvieweddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Viewed Date', db_column=u'LastViewedDate', blank=True) # Field name made lowercase.
    lastreferenceddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Referenced Date', db_column=u'LastReferencedDate', blank=True) # Field name made lowercase.
    opportunityid = models.ForeignKey('Opportunity', db_column=u'OpportunityId') # Field name made lowercase.
    pricebook2id = models.ForeignKey('Pricebook2', null=True, db_column=u'Pricebook2Id', blank=True) # Field name made lowercase.
    contactid = models.ForeignKey('Contact', null=True, db_column=u'ContactId', blank=True) # Field name made lowercase.
    quotenumber = models.CharField(max_length=30, verbose_name=u'Quote Number', sf_read_only=models.READ_ONLY, db_column=u'QuoteNumber') # Field name made lowercase.
    issyncing = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Syncing', db_column=u'IsSyncing') # Field name made lowercase.
    shippinghandling = models.DecimalField(db_column=u'ShippingHandling', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Shipping and Handling') # Field name made lowercase.
    tax = models.DecimalField(db_column=u'Tax', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Tax') # Field name made lowercase.
    status = models.CharField(blank=True, max_length=40, verbose_name=u'Status', db_column=u'Status', choices=[(u'Draft', u'Draft'), (u'Needs Review', u'Needs Review'), (u'In Review', u'In Review'), (u'Approved', u'Approved'), (u'Rejected', u'Rejected'), (u'Presented', u'Presented'), (u'Accepted', u'Accepted'), (u'Denied', u'Denied')]) # Field name made lowercase.
    expirationdate = models.DateField(null=True, verbose_name=u'Expiration Date', db_column=u'ExpirationDate', blank=True) # Field name made lowercase.
    description = models.TextField(verbose_name=u'Description', db_column=u'Description', blank=True) # Field name made lowercase.
    subtotal = models.DecimalField(decimal_places=2, db_column=u'Subtotal', sf_read_only=models.READ_ONLY, max_digits=18, blank=True, null=True, verbose_name=u'Subtotal') # Field name made lowercase.
    totalprice = models.DecimalField(decimal_places=2, db_column=u'TotalPrice', sf_read_only=models.READ_ONLY, max_digits=18, blank=True, null=True, verbose_name=u'Total Price') # Field name made lowercase.
    lineitemcount = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Line Items', db_column=u'LineItemCount', blank=True) # Field name made lowercase.
    billingstreet = models.TextField(verbose_name=u'Bill To Street', db_column=u'BillingStreet', blank=True) # Field name made lowercase.
    billingcity = models.CharField(max_length=40, verbose_name=u'Bill To City', db_column=u'BillingCity', blank=True) # Field name made lowercase.
    billingstate = models.CharField(max_length=80, verbose_name=u'Bill To State/Province', db_column=u'BillingState', blank=True) # Field name made lowercase.
    billingpostalcode = models.CharField(max_length=20, verbose_name=u'Bill To Zip/Postal Code', db_column=u'BillingPostalCode', blank=True) # Field name made lowercase.
    billingcountry = models.CharField(max_length=80, verbose_name=u'Bill To Country', db_column=u'BillingCountry', blank=True) # Field name made lowercase.
    billinglatitude = models.DecimalField(db_column=u'BillingLatitude', decimal_places=15, max_digits=18, blank=True, null=True, verbose_name=u'Bill To Latitude') # Field name made lowercase.
    billinglongitude = models.DecimalField(db_column=u'BillingLongitude', decimal_places=15, max_digits=18, blank=True, null=True, verbose_name=u'Bill To Longitude') # Field name made lowercase.
    billingaddress = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Bill To', db_column=u'BillingAddress', blank=True) # Field name made lowercase. This field type is a guess.
    shippingstreet = models.TextField(verbose_name=u'Ship To Street', db_column=u'ShippingStreet', blank=True) # Field name made lowercase.
    shippingcity = models.CharField(max_length=40, verbose_name=u'Ship To City', db_column=u'ShippingCity', blank=True) # Field name made lowercase.
    shippingstate = models.CharField(max_length=80, verbose_name=u'Ship To State/Province', db_column=u'ShippingState', blank=True) # Field name made lowercase.
    shippingpostalcode = models.CharField(max_length=20, verbose_name=u'Ship To Zip/Postal Code', db_column=u'ShippingPostalCode', blank=True) # Field name made lowercase.
    shippingcountry = models.CharField(max_length=80, verbose_name=u'Ship To Country', db_column=u'ShippingCountry', blank=True) # Field name made lowercase.
    shippinglatitude = models.DecimalField(db_column=u'ShippingLatitude', decimal_places=15, max_digits=18, blank=True, null=True, verbose_name=u'Ship To Latitude') # Field name made lowercase.
    shippinglongitude = models.DecimalField(db_column=u'ShippingLongitude', decimal_places=15, max_digits=18, blank=True, null=True, verbose_name=u'Ship To Longitude') # Field name made lowercase.
    shippingaddress = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Ship To', db_column=u'ShippingAddress', blank=True) # Field name made lowercase. This field type is a guess.
    quotetostreet = models.TextField(verbose_name=u'Quote To Street', db_column=u'QuoteToStreet', blank=True) # Field name made lowercase.
    quotetocity = models.CharField(max_length=40, verbose_name=u'Quote To City', db_column=u'QuoteToCity', blank=True) # Field name made lowercase.
    quotetostate = models.CharField(max_length=80, verbose_name=u'Quote To State/Province', db_column=u'QuoteToState', blank=True) # Field name made lowercase.
    quotetopostalcode = models.CharField(max_length=20, verbose_name=u'Quote To Zip/Postal Code', db_column=u'QuoteToPostalCode', blank=True) # Field name made lowercase.
    quotetocountry = models.CharField(max_length=80, verbose_name=u'Quote To Country', db_column=u'QuoteToCountry', blank=True) # Field name made lowercase.
    quotetolatitude = models.DecimalField(db_column=u'QuoteToLatitude', decimal_places=15, max_digits=18, blank=True, null=True, verbose_name=u'Quote To Latitude') # Field name made lowercase.
    quotetolongitude = models.DecimalField(db_column=u'QuoteToLongitude', decimal_places=15, max_digits=18, blank=True, null=True, verbose_name=u'Quote To Longitude') # Field name made lowercase.
    quotetoaddress = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Quote To', db_column=u'QuoteToAddress', blank=True) # Field name made lowercase. This field type is a guess.
    additionalstreet = models.TextField(verbose_name=u'Additional To Street', db_column=u'AdditionalStreet', blank=True) # Field name made lowercase.
    additionalcity = models.CharField(max_length=40, verbose_name=u'Additional To City', db_column=u'AdditionalCity', blank=True) # Field name made lowercase.
    additionalstate = models.CharField(max_length=80, verbose_name=u'Additional To State/Province', db_column=u'AdditionalState', blank=True) # Field name made lowercase.
    additionalpostalcode = models.CharField(max_length=20, verbose_name=u'Additional To Zip/Postal Code', db_column=u'AdditionalPostalCode', blank=True) # Field name made lowercase.
    additionalcountry = models.CharField(max_length=80, verbose_name=u'Additional To Country', db_column=u'AdditionalCountry', blank=True) # Field name made lowercase.
    additionallatitude = models.DecimalField(db_column=u'AdditionalLatitude', decimal_places=15, max_digits=18, blank=True, null=True, verbose_name=u'Additional To Latitude') # Field name made lowercase.
    additionallongitude = models.DecimalField(db_column=u'AdditionalLongitude', decimal_places=15, max_digits=18, blank=True, null=True, verbose_name=u'Additional To Longitude') # Field name made lowercase.
    additionaladdress = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Additional To', db_column=u'AdditionalAddress', blank=True) # Field name made lowercase. This field type is a guess.
    billingname = models.CharField(max_length=255, verbose_name=u'Bill To Name', db_column=u'BillingName', blank=True) # Field name made lowercase.
    shippingname = models.CharField(max_length=255, verbose_name=u'Ship To Name', db_column=u'ShippingName', blank=True) # Field name made lowercase.
    quotetoname = models.CharField(max_length=255, verbose_name=u'Quote To Name', db_column=u'QuoteToName', blank=True) # Field name made lowercase.
    additionalname = models.CharField(max_length=255, verbose_name=u'Additional To Name', db_column=u'AdditionalName', blank=True) # Field name made lowercase.
    email = models.EmailField(null=True, verbose_name=u'Email', db_column=u'Email', blank=True) # Field name made lowercase.
    phone = models.CharField(max_length=40, verbose_name=u'Phone', db_column=u'Phone', blank=True) # Field name made lowercase.
    fax = models.CharField(max_length=40, verbose_name=u'Fax', db_column=u'Fax', blank=True) # Field name made lowercase.
    contractid = models.ForeignKey('Contract', null=True, db_column=u'ContractId', blank=True) # Field name made lowercase.
    accountid = models.ForeignKey('Account', null=True, db_column=u'AccountId', blank=True) # Field name made lowercase.
    discount = models.DecimalField(decimal_places=2, db_column=u'Discount', sf_read_only=models.READ_ONLY, max_digits=5, blank=True, null=True, verbose_name=u'Discount') # Field name made lowercase.
    grandtotal = models.DecimalField(decimal_places=2, db_column=u'GrandTotal', sf_read_only=models.READ_ONLY, max_digits=18, blank=True, null=True, verbose_name=u'Grand Total') # Field name made lowercase.
    original_lead__c = models.ForeignKey('Lead', null=True, db_column=u'Original_Lead__c', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Quote'
        verbose_name = 'Quote'
        verbose_name_plural = 'Quotes'
        # keyPrefix = '0Q0'

class Quotedocument(models.Model):
    name = models.CharField(max_length=270, verbose_name=u'Name', sf_read_only=models.READ_ONLY, db_column=u'Name') # Field name made lowercase.
    quoteid = models.ForeignKey('Quote', db_column=u'QuoteId') # Field name made lowercase.
    document = models.TextField(sf_read_only=models.NOT_UPDATEABLE, verbose_name=u'PDF Document', db_column=u'Document', blank=True) # Field name made lowercase.
    grandtotal = models.DecimalField(decimal_places=2, db_column=u'GrandTotal', sf_read_only=models.READ_ONLY, max_digits=18, blank=True, null=True, verbose_name=u'Grand Total') # Field name made lowercase.
    discount = models.DecimalField(decimal_places=2, db_column=u'Discount', sf_read_only=models.READ_ONLY, max_digits=5, blank=True, null=True, verbose_name=u'Discount') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'QuoteDocument'
        verbose_name = 'Quote PDF'
        verbose_name_plural = 'Quote PDFs'
        # keyPrefix = '0QD'

class Quotefeed(models.Model):
    parentid = models.ForeignKey('Quote', db_column=u'ParentId') # Field name made lowercase.
    type = models.CharField(db_column=u'Type', choices=[(u'TrackedChange', u'Tracked Change'), (u'UserStatus', u'User Status'), (u'TextPost', u'Text Post'), (u'AdvancedTextPost', u'Advanced Text Post'), (u'LinkPost', u'Link Post'), (u'ContentPost', u'Content Post'), (u'PollPost', u'Poll'), (u'RypplePost', u'Work.com Thanks'), (u'ProfileSkillPost', u'Profile Skill Post'), (u'DashboardComponentSnapshot', u'Dashboard Component Snapshot'), (u'ApprovalPost', u'Approval Post'), (u'CaseCommentPost', u'Case Comment Feed'), (u'ReplyPost', u'Reply Post'), (u'EmailMessageEvent', u'Email Message Feed'), (u'CallLogPost', u'Call Log Feed'), (u'ChangeStatusPost', u'Change Status Feed'), (u'AttachArticleEvent', u'Attached Article'), (u'MilestoneEvent', u'Milestone Event'), (u'ActivityEvent', u'Activity Change'), (u'ChatTranscriptPost', u'Chat Transcript Post'), (u'CollaborationGroupCreated', u'Collaboration Group Created'), (u'CollaborationGroupUnarchived', u'Collaboration Group Reactivated'), (u'SocialPost', u'Social Post'), (u'QuestionPost', u'Question Post'), (u'FacebookPost', u'Facebook Post'), (u'BasicTemplateFeedItem', u'Basic Template Post'), (u'CreateRecordEvent', u'Created Record'), (u'CanvasPost', u'Canvas'), (u'AnnouncementPost', u'a')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Feed Item Type') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    commentcount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Comment Count', db_column=u'CommentCount') # Field name made lowercase.
    likecount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Like Count', db_column=u'LikeCount') # Field name made lowercase.
    title = models.CharField(max_length=255, verbose_name=u'Title', sf_read_only=models.READ_ONLY, db_column=u'Title', blank=True) # Field name made lowercase.
    body = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Body', db_column=u'Body', blank=True) # Field name made lowercase.
    linkurl = models.URLField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Link Url', db_column=u'LinkUrl', blank=True) # Field name made lowercase.
    relatedrecordid = models.ForeignKey('Contentversion', null=True, db_column=u'RelatedRecordId', blank=True) # Field name made lowercase.
    contentdata = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Content Data', db_column=u'ContentData', blank=True) # Field name made lowercase.
    contentfilename = models.CharField(max_length=255, verbose_name=u'Content File Name', sf_read_only=models.READ_ONLY, db_column=u'ContentFileName', blank=True) # Field name made lowercase.
    contentdescription = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Content Description', db_column=u'ContentDescription', blank=True) # Field name made lowercase.
    contenttype = models.CharField(max_length=120, verbose_name=u'Content File Type', sf_read_only=models.READ_ONLY, db_column=u'ContentType', blank=True) # Field name made lowercase.
    contentsize = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Content Size', db_column=u'ContentSize', blank=True) # Field name made lowercase.
    insertedbyid = models.ForeignKey('User', null=True, db_column=u'InsertedById', blank=True) # Field name made lowercase.
    networkscope = models.CharField(db_column=u'NetworkScope', choices=[(u'AllNetworks', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Network Scope') # Field name made lowercase.
    visibility = models.CharField(db_column=u'Visibility', choices=[(u'AllUsers', None), (u'InternalUsers', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Visibility') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'QuoteFeed'
        verbose_name = 'Quote Feed'
        verbose_name_plural = 'Quote Feed'
        # keyPrefix = 'None'

class Quotelineitem(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    linenumber = models.CharField(max_length=255, verbose_name=u'Line Item Number', sf_read_only=models.READ_ONLY, db_column=u'LineNumber') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    quoteid = models.ForeignKey('Quote', db_column=u'QuoteId') # Field name made lowercase.
    pricebookentryid = models.ForeignKey('Pricebookentry', db_column=u'PricebookEntryId') # Field name made lowercase.
    quantity = models.DecimalField(decimal_places=2, verbose_name=u'Quantity', max_digits=12, db_column=u'Quantity') # Field name made lowercase.
    unitprice = models.DecimalField(decimal_places=2, verbose_name=u'Sales Price', max_digits=18, db_column=u'UnitPrice') # Field name made lowercase.
    discount = models.DecimalField(db_column=u'Discount', decimal_places=2, max_digits=5, blank=True, null=True, verbose_name=u'Discount') # Field name made lowercase.
    description = models.CharField(max_length=255, verbose_name=u'Line Item Description', db_column=u'Description', blank=True) # Field name made lowercase.
    product2id = models.ForeignKey('Product2', db_column=u'Product2Id') # Field name made lowercase.
    sortorder = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Sort Order', db_column=u'SortOrder', blank=True) # Field name made lowercase.
    listprice = models.DecimalField(decimal_places=2, db_column=u'ListPrice', sf_read_only=models.READ_ONLY, max_digits=18, blank=True, null=True, verbose_name=u'List Price') # Field name made lowercase.
    subtotal = models.DecimalField(decimal_places=2, db_column=u'Subtotal', sf_read_only=models.READ_ONLY, max_digits=18, blank=True, null=True, verbose_name=u'Subtotal ') # Field name made lowercase.
    totalprice = models.DecimalField(decimal_places=2, db_column=u'TotalPrice', sf_read_only=models.READ_ONLY, max_digits=18, blank=True, null=True, verbose_name=u'Total Price') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'QuoteLineItem'
        verbose_name = 'Quote Line Item'
        verbose_name_plural = 'Quote Line Items'
        # keyPrefix = '0QL'

class Quotetemplaterichtextdata(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=255, verbose_name=u'Quote Template Rich Text Data', sf_read_only=models.READ_ONLY, db_column=u'Name') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    data = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Data', db_column=u'Data', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'QuoteTemplateRichTextData'
        verbose_name = 'Quote Template Rich Text Data'
        verbose_name_plural = 'Quote Template Rich Text Data'
        # keyPrefix = '0QR'

class Recentlyviewed(models.Model):
    name = models.CharField(max_length=255, verbose_name=u'Name', sf_read_only=models.READ_ONLY, db_column=u'Name', blank=True) # Field name made lowercase.
    lastname = models.CharField(max_length=80, verbose_name=u'Last Name', sf_read_only=models.READ_ONLY, db_column=u'LastName', blank=True) # Field name made lowercase.
    firstname = models.CharField(max_length=40, verbose_name=u'First Name', sf_read_only=models.READ_ONLY, db_column=u'FirstName', blank=True) # Field name made lowercase.
    type = models.CharField(db_column=u'Type', choices=[(u'Account', None), (u'Accumulators__c', None), (u'AdditionalUserData__c', None), (u'Appeal__c', None), (u'Authorized_Representative__c', None), (u'AutoPayOptions__c', None), (u'Campaign', None), (u'Carrier__c', None), (u'Case', None), (u'Claim__c', None), (u'CollaborationGroup', None), (u'Contact', None), (u'ContentDocument', None), (u'Contract', None), (u'Dashboard', None), (u'DataMigration__c', None), (u'DataMigrationItem__c', None), (u'Document', None), (u'Employer_Payments__c', None), (u'Family__c', None), (u'FollowUp__c', None), (u'Group_Member__c', None), (u'Group_Member_Dependent__c', None), (u'Group_Quote__c', None), (u'IM_834_IN__c', None), (u'Lead', None), (u'legacyAccountsDedupResults__c', None), (u'Medical_Management__c', None), (u'Medication__c', None), (u'mkto_si__Best_Bets_View__c', None), (u'mkto_si__Best_Bets_View_Detail__c', None), (u'mkto_si__BestBetsCache__c', None), (u'mkto_si__EmailActivityCache__c', None), (u'mkto_si__Get_Method_Argus__c', None), (u'mkto_si__GroupedWebActivityCache__c', None), (u'mkto_si__InterestingMomentsCache__c', None), (u'mkto_si__Marketo_Sales_Insight_Config__c', None), (u'mkto_si__ScoringCache__c', None), (u'mkto_si__Value__c', None), (u'mkto_si__WebActivityCache__c', None), (u'Opportunity', None), (u'Payment_History__c', None), (u'Person_Payment__c', None), (u'Policy__c', None), (u'Pricebook2', None), (u'Profile', None), (u'Quote', None), (u'Record_Audit__c', None), (u'Report', None), (u'Solution', None), (u'Survey__c', None), (u'Survey_Choices__c', None), (u'Survey_Members__c', None), (u'Survey_Response__c', None), (u'SurveyQuestions__c', None), (u'Topic', None), (u'User', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Type') # Field name made lowercase.
    alias = models.CharField(max_length=8, verbose_name=u'Alias', sf_read_only=models.READ_ONLY, db_column=u'Alias', blank=True) # Field name made lowercase.
    userroleid = models.ForeignKey('Userrole', null=True, db_column=u'UserRoleId', blank=True) # Field name made lowercase.
    recordtypeid = models.ForeignKey('Recordtype', null=True, db_column=u'RecordTypeId', blank=True) # Field name made lowercase.
    isactive = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Active', db_column=u'IsActive') # Field name made lowercase.
    profileid = models.ForeignKey('Profile', null=True, db_column=u'ProfileId', blank=True) # Field name made lowercase.
    title = models.CharField(max_length=80, verbose_name=u'Title', sf_read_only=models.READ_ONLY, db_column=u'Title', blank=True) # Field name made lowercase.
    email = models.EmailField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'E-mail', db_column=u'Email', blank=True) # Field name made lowercase.
    phone = models.CharField(max_length=40, verbose_name=u'Phone', sf_read_only=models.READ_ONLY, db_column=u'Phone', blank=True) # Field name made lowercase.
    lastvieweddate = models.DateTimeField(null=True, sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Last Viewed Date', db_column=u'LastViewedDate', blank=True) # Field name made lowercase.
    lastreferenceddate = models.DateTimeField(null=True, sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Last Referenced Date', db_column=u'LastReferencedDate', blank=True) # Field name made lowercase.
    networkid = models.ForeignKey('Network', null=True, db_column=u'NetworkId', blank=True) # Field name made lowercase.
    language = models.CharField(db_column=u'Language', choices=[(u'en_US', u'English'), (u'de', u'German'), (u'es', u'Spanish'), (u'fr', u'French'), (u'it', u'Italian'), (u'ja', u'Japanese'), (u'sv', u'Swedish'), (u'ko', u'Korean'), (u'zh_TW', u'Chinese (Traditional)'), (u'zh_CN', u'Chinese (Simplified)'), (u'pt_BR', u'Portuguese (Brazilian)'), (u'nl_NL', u'Dutch'), (u'da', u'Danish'), (u'th', u'Thai'), (u'fi', u'Finnish'), (u'ru', u'Russian'), (u'es_MX', u'Spanish (Mexican)'), (u'no', u'Norwegian')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Language') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'RecentlyViewed'
        verbose_name = 'Recently Viewed'
        verbose_name_plural = 'Recently Viewed'
        # keyPrefix = 'None'

class Recordtype(models.Model):
    name = models.CharField(max_length=80, verbose_name=u'Name', db_column=u'Name') # Field name made lowercase.
    developername = models.CharField(max_length=80, verbose_name=u'Record Type Name', db_column=u'DeveloperName') # Field name made lowercase.
    namespaceprefix = models.CharField(max_length=15, verbose_name=u'Namespace Prefix', sf_read_only=models.READ_ONLY, db_column=u'NamespacePrefix', blank=True) # Field name made lowercase.
    description = models.CharField(max_length=255, verbose_name=u'Description', db_column=u'Description', blank=True) # Field name made lowercase.
    businessprocessid = models.ForeignKey('Businessprocess', null=True, db_column=u'BusinessProcessId', blank=True) # Field name made lowercase.
    sobjecttype = models.CharField(max_length=40, verbose_name=u'Sobject Type Name', sf_read_only=models.NOT_UPDATEABLE, db_column=u'SobjectType', choices=[(u'Account', None), (u'Accumulators__c', None), (u'AdditionalUserData__c', None), (u'Announcement', None), (u'Appeal__c', None), (u'Authorized_Representative__c', None), (u'AutoPayOptions__c', None), (u'Campaign', None), (u'CampaignMember', None), (u'Carrier__c', None), (u'Case', None), (u'Claim__c', None), (u'CollaborationFolder', None), (u'CollaborationFolderMember', None), (u'Contact', None), (u'ContentVersion', None), (u'Contract', None), (u'DataMigration__c', None), (u'DataMigrationItem__c', None), (u'Employer_Payments__c', None), (u'Event', None), (u'Family__c', None), (u'FollowUp__c', None), (u'Group_Member__c', None), (u'Group_Member_Dependent__c', None), (u'Group_Quote__c', None), (u'IM_834_IN__c', None), (u'InboundSocialPost', None), (u'Lead', None), (u'legacyAccountsDedupResults__c', None), (u'Medical_Management__c', None), (u'Medication__c', None), (u'mkto_si__Best_Bets_View__c', None), (u'mkto_si__Best_Bets_View_Detail__c', None), (u'mkto_si__BestBetsCache__c', None), (u'mkto_si__EmailActivityCache__c', None), (u'mkto_si__Get_Method_Argus__c', None), (u'mkto_si__GroupedWebActivityCache__c', None), (u'mkto_si__InterestingMomentsCache__c', None), (u'mkto_si__Marketo_Sales_Insight_Config__c', None), (u'mkto_si__ScoringCache__c', None), (u'mkto_si__Value__c', None), (u'mkto_si__WebActivityCache__c', None), (u'Opportunity', None), (u'Payment_History__c', None), (u'Person_Payment__c', None), (u'PersonAccount', None), (u'Policy__c', None), (u'Pricebook2', None), (u'Product2', None), (u'Quote', None), (u'Record_Audit__c', None), (u'RecordOrigin', None), (u'SearchActivity', None), (u'SearchPromotionRule', None), (u'Solution', None), (u'Survey__c', None), (u'Survey_Choices__c', None), (u'Survey_Members__c', None), (u'Survey_Response__c', None), (u'SurveyQuestions__c', None), (u'Task', None), (u'WorkCoaching', None), (u'WorkFeedback', None), (u'WorkFeedbackQuestion', None), (u'WorkFeedbackQuestionSet', None), (u'WorkFeedbackRequest', None), (u'WorkGoal', None), (u'WorkGoalCollaborator', None), (u'WorkGoalLink', None), (u'WorkPerformanceCycle', None)]) # Field name made lowercase.
    isactive = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Active', db_column=u'IsActive') # Field name made lowercase.
    ispersontype = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Is Person Type', db_column=u'IsPersonType') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'RecordType'
        verbose_name = 'Record Type'
        verbose_name_plural = 'Record Types'
        # keyPrefix = '012'

class RecordAuditC(models.Model):
    ownerid = models.ForeignKey('Group', db_column=u'OwnerId') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'Record Audit Number', sf_read_only=models.READ_ONLY, db_column=u'Name') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    lastvieweddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Viewed Date', db_column=u'LastViewedDate', blank=True) # Field name made lowercase.
    lastreferenceddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Referenced Date', db_column=u'LastReferencedDate', blank=True) # Field name made lowercase.
    accessreasondetail__c = models.TextField(help_text=u'The reason details provided by this user for accessing the parent record.', verbose_name=u'Access Reason Detail', db_column=u'AccessReasonDetail__c', blank=True) # Field name made lowercase.
    accessreasontype__c = models.CharField(db_column=u'AccessReasonType__c', choices=[(u'Client Permission', u'Client Permission'), (u'Research', u'Research'), (u'Follow-up', u'Follow-up'), (u'Marketing', u'Marketing'), (u'Auto Bypass Enabled', u'Auto Bypass Enabled')], max_length=255, blank=True, help_text=u'The primary reason that the parent record was accessed by the user.', verbose_name=u'Access Reason Type') # Field name made lowercase.
    accesstype__c = models.CharField(db_column=u'AccessType__c', choices=[(u'Create', u'Create'), (u'Read', u'Read'), (u'Update', u'Update'), (u'Delete', u'Delete')], max_length=255, blank=True, help_text=u'The type of access the user made to the parent record that caused the audit entry.', verbose_name=u'Access Type') # Field name made lowercase.
    account__c = models.ForeignKey('Account', null=True, db_column=u'Account__c', blank=True) # Field name made lowercase.
    authorizedrepresentative__c = models.ForeignKey('AuthorizedRepresentativeC', null=True, db_column=u'AuthorizedRepresentative__c', blank=True) # Field name made lowercase.
    lead__c = models.ForeignKey('Lead', null=True, db_column=u'Lead__c', blank=True) # Field name made lowercase.
    parentrecordid__c = models.CharField(help_text=u'Record id for the parent object (eg: Account, Lead etc)', max_length=18, verbose_name=u'Parent Record Id', db_column=u'ParentRecordId__c', blank=True) # Field name made lowercase.
    parentrecordname__c = models.CharField(help_text=u'Record name for parent object (eg: Account, Lead etc)', max_length=255, verbose_name=u'Parent Record Name', db_column=u'ParentRecordName__c', blank=True) # Field name made lowercase.
    user__c = models.ForeignKey('User', null=True, db_column=u'User__c', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Record_Audit__c'
        verbose_name = 'Record Audit'
        verbose_name_plural = 'Record Audits'
        # keyPrefix = 'a0V'

class Report(models.Model):
    ownerid = models.ForeignKey('Folder', db_column=u'OwnerId') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=40, verbose_name=u'Report Name', sf_read_only=models.READ_ONLY, db_column=u'Name') # Field name made lowercase.
    description = models.CharField(max_length=255, verbose_name=u'Description', sf_read_only=models.READ_ONLY, db_column=u'Description', blank=True) # Field name made lowercase.
    developername = models.CharField(max_length=80, verbose_name=u'Report Unique Name', sf_read_only=models.READ_ONLY, db_column=u'DeveloperName') # Field name made lowercase.
    namespaceprefix = models.CharField(max_length=15, verbose_name=u'Namespace Prefix', sf_read_only=models.READ_ONLY, db_column=u'NamespacePrefix', blank=True) # Field name made lowercase.
    lastrundate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Run', db_column=u'LastRunDate', blank=True) # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    format = models.CharField(max_length=40, verbose_name=u'Format', sf_read_only=models.READ_ONLY, db_column=u'Format', choices=[(u'MultiBlock', u'Joined'), (u'Matrix', u'Matrix'), (u'Summary', u'Summary'), (u'Tabular', u'Tabular')]) # Field name made lowercase.
    lastvieweddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Viewed Date', db_column=u'LastViewedDate', blank=True) # Field name made lowercase.
    lastreferenceddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Referenced Date', db_column=u'LastReferencedDate', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Report'
        verbose_name = 'Report'
        verbose_name_plural = 'Reports'
        # keyPrefix = '00O'

class Reportfeed(models.Model):
    parentid = models.ForeignKey('Report', db_column=u'ParentId') # Field name made lowercase.
    type = models.CharField(db_column=u'Type', choices=[(u'TrackedChange', u'Tracked Change'), (u'UserStatus', u'User Status'), (u'TextPost', u'Text Post'), (u'AdvancedTextPost', u'Advanced Text Post'), (u'LinkPost', u'Link Post'), (u'ContentPost', u'Content Post'), (u'PollPost', u'Poll'), (u'RypplePost', u'Work.com Thanks'), (u'ProfileSkillPost', u'Profile Skill Post'), (u'DashboardComponentSnapshot', u'Dashboard Component Snapshot'), (u'ApprovalPost', u'Approval Post'), (u'CaseCommentPost', u'Case Comment Feed'), (u'ReplyPost', u'Reply Post'), (u'EmailMessageEvent', u'Email Message Feed'), (u'CallLogPost', u'Call Log Feed'), (u'ChangeStatusPost', u'Change Status Feed'), (u'AttachArticleEvent', u'Attached Article'), (u'MilestoneEvent', u'Milestone Event'), (u'ActivityEvent', u'Activity Change'), (u'ChatTranscriptPost', u'Chat Transcript Post'), (u'CollaborationGroupCreated', u'Collaboration Group Created'), (u'CollaborationGroupUnarchived', u'Collaboration Group Reactivated'), (u'SocialPost', u'Social Post'), (u'QuestionPost', u'Question Post'), (u'FacebookPost', u'Facebook Post'), (u'BasicTemplateFeedItem', u'Basic Template Post'), (u'CreateRecordEvent', u'Created Record'), (u'CanvasPost', u'Canvas'), (u'AnnouncementPost', u'a')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Feed Item Type') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    commentcount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Comment Count', db_column=u'CommentCount') # Field name made lowercase.
    likecount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Like Count', db_column=u'LikeCount') # Field name made lowercase.
    title = models.CharField(max_length=255, verbose_name=u'Title', sf_read_only=models.READ_ONLY, db_column=u'Title', blank=True) # Field name made lowercase.
    body = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Body', db_column=u'Body', blank=True) # Field name made lowercase.
    linkurl = models.URLField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Link Url', db_column=u'LinkUrl', blank=True) # Field name made lowercase.
    relatedrecordid = models.ForeignKey('Contentversion', null=True, db_column=u'RelatedRecordId', blank=True) # Field name made lowercase.
    contentdata = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Content Data', db_column=u'ContentData', blank=True) # Field name made lowercase.
    contentfilename = models.CharField(max_length=255, verbose_name=u'Content File Name', sf_read_only=models.READ_ONLY, db_column=u'ContentFileName', blank=True) # Field name made lowercase.
    contentdescription = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Content Description', db_column=u'ContentDescription', blank=True) # Field name made lowercase.
    contenttype = models.CharField(max_length=120, verbose_name=u'Content File Type', sf_read_only=models.READ_ONLY, db_column=u'ContentType', blank=True) # Field name made lowercase.
    contentsize = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Content Size', db_column=u'ContentSize', blank=True) # Field name made lowercase.
    insertedbyid = models.ForeignKey('User', null=True, db_column=u'InsertedById', blank=True) # Field name made lowercase.
    networkscope = models.CharField(db_column=u'NetworkScope', choices=[(u'AllNetworks', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Network Scope') # Field name made lowercase.
    visibility = models.CharField(db_column=u'Visibility', choices=[(u'AllUsers', None), (u'InternalUsers', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Visibility') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'ReportFeed'
        verbose_name = 'Report Feed'
        verbose_name_plural = 'Report Feed'
        # keyPrefix = 'None'

class Scontrol(models.Model):
    name = models.CharField(max_length=80, verbose_name=u'Label', sf_read_only=models.NOT_CREATEABLE, db_column=u'Name') # Field name made lowercase.
    developername = models.CharField(max_length=80, verbose_name=u'S-Control Name', sf_read_only=models.NOT_CREATEABLE, db_column=u'DeveloperName') # Field name made lowercase.
    description = models.CharField(max_length=255, verbose_name=u'Description', sf_read_only=models.NOT_CREATEABLE, db_column=u'Description', blank=True) # Field name made lowercase.
    encodingkey = models.CharField(max_length=40, verbose_name=u'Encoding', sf_read_only=models.NOT_CREATEABLE, db_column=u'EncodingKey', choices=[(u'UTF-8', u'Unicode (UTF-8)'), (u'ISO-8859-1', u'General US & Western Europe (ISO-8859-1, ISO-LATIN-1)'), (u'Shift_JIS', u'Japanese (Shift-JIS)'), (u'ISO-2022-JP', u'Japanese (JIS)'), (u'EUC-JP', u'Japanese (EUC)'), (u'ks_c_5601-1987', u'Korean (ks_c_5601-1987)'), (u'Big5', u'Traditional Chinese (Big5)'), (u'GB2312', u'Simplified Chinese (GB2312)'), (u'Big5-HKSCS', u'Traditional Chinese Hong Kong (Big5-HKSCS)'), (u'x-SJIS_0213', u'Japanese (Shift-JIS_2004)')]) # Field name made lowercase.
    htmlwrapper = models.TextField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'HTML Body', db_column=u'HtmlWrapper') # Field name made lowercase.
    filename = models.CharField(max_length=255, verbose_name=u'Filename', sf_read_only=models.NOT_CREATEABLE, db_column=u'Filename', blank=True) # Field name made lowercase.
    bodylength = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Binary Length', db_column=u'BodyLength') # Field name made lowercase.
    binary = models.TextField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Binary', db_column=u'Binary', blank=True) # Field name made lowercase.
    contentsource = models.CharField(db_column=u'ContentSource', choices=[(u'HTML', u'HTML'), (u'URL', u'URL'), (u'Snippet', u'Snippet')], max_length=40, blank=True, sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Type') # Field name made lowercase.
    supportscaching = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Prebuild In Page', db_column=u'SupportsCaching') # Field name made lowercase.
    namespaceprefix = models.CharField(max_length=15, verbose_name=u'Namespace Prefix', sf_read_only=models.READ_ONLY, db_column=u'NamespacePrefix', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Scontrol'
        verbose_name = 'Custom S-Control'
        verbose_name_plural = 'Custom S-Controls'
        # keyPrefix = '01N'

class Searchpromotionrule(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    query = models.CharField(max_length=100, verbose_name=u'Term', db_column=u'Query') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'SearchPromotionRule'
        verbose_name = 'Promoted Search Term'
        verbose_name_plural = 'Promoted Search Terms'
        # keyPrefix = '0MD'

class Setupentityaccess(models.Model):
    parentid = models.ForeignKey('Permissionset', db_column=u'ParentId') # Field name made lowercase.
    setupentityid = models.ForeignKey('Apexclass', db_column=u'SetupEntityId') # Field name made lowercase.
    setupentitytype = models.CharField(db_column=u'SetupEntityType', choices=[(u'ApexClass', None), (u'ApexPage', None), (u'ConnectedApplication', None), (u'CustomPermission', None), (u'ExternalDataSource', None), (u'ServiceProvider', None), (u'TabSet', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Setup Entity Type') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'SetupEntityAccess'
        verbose_name = 'Setup Entity Access'
        verbose_name_plural = 'Setup Entity Access'
        # keyPrefix = '0J0'

class Site(models.Model):
    name = models.CharField(max_length=80, verbose_name=u'Site Name', sf_read_only=models.READ_ONLY, db_column=u'Name') # Field name made lowercase.
    subdomain = models.CharField(max_length=80, verbose_name=u'Site Subdomain Prefix', sf_read_only=models.READ_ONLY, db_column=u'Subdomain', blank=True) # Field name made lowercase.
    urlpathprefix = models.CharField(max_length=40, verbose_name=u'Default Web Address', sf_read_only=models.READ_ONLY, db_column=u'UrlPathPrefix', blank=True) # Field name made lowercase.
    guestuserid = models.ForeignKey('User', null=True, db_column=u'GuestUserId', blank=True) # Field name made lowercase.
    status = models.CharField(max_length=40, verbose_name=u'Site Status', sf_read_only=models.READ_ONLY, db_column=u'Status', choices=[(u'Active', u'Active'), (u'Inactive', u'In Maintenance')]) # Field name made lowercase.
    adminid = models.ForeignKey('User', db_column=u'AdminId') # Field name made lowercase.
    optionsenablefeeds = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Enable Feeds', db_column=u'OptionsEnableFeeds') # Field name made lowercase.
    optionsallowhomepage = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Enable Standard Home Page', db_column=u'OptionsAllowHomePage') # Field name made lowercase.
    optionsallowstandardideaspages = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Enable Standard Ideas Pages', db_column=u'OptionsAllowStandardIdeasPages') # Field name made lowercase.
    optionsallowstandardsearch = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Enable Standard Lookup Pages', db_column=u'OptionsAllowStandardSearch') # Field name made lowercase.
    optionsallowstandardlookups = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Enable Standard Search Pages', db_column=u'OptionsAllowStandardLookups') # Field name made lowercase.
    optionsallowstandardanswerspages = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Enable Standard Answers Pages', db_column=u'OptionsAllowStandardAnswersPages') # Field name made lowercase.
    description = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Site Description', db_column=u'Description', blank=True) # Field name made lowercase.
    masterlabel = models.CharField(max_length=255, verbose_name=u'Site Label', sf_read_only=models.READ_ONLY, db_column=u'MasterLabel') # Field name made lowercase.
    analyticstrackingcode = models.CharField(max_length=40, verbose_name=u'Analytics Tracking Code', sf_read_only=models.READ_ONLY, db_column=u'AnalyticsTrackingCode', blank=True) # Field name made lowercase.
    sitetype = models.CharField(max_length=40, verbose_name=u'Site Type', sf_read_only=models.READ_ONLY, db_column=u'SiteType', choices=[(u'Siteforce', u'Site.com'), (u'Visualforce', u'Force.com'), (u'ChatterNetwork', u'Force.com Community'), (u'ChatterNetworkPicasso', u'Site.com Community'), (u'User', u'User')]) # Field name made lowercase.
    clickjackprotectionlevel = models.CharField(max_length=40, verbose_name=u'Clickjack Protection Level', sf_read_only=models.READ_ONLY, db_column=u'ClickjackProtectionLevel', choices=[(u'AllowAllFraming', u'Allow framing by any page (no protection)'), (u'SameOriginOnly', u'Allow framing by the same origin only (recommended)'), (u'NoFraming', u"Don't allow framing by any page (most protection)")]) # Field name made lowercase.
    dailybandwidthlimit = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Daily Bandwidth Limit (MB)', db_column=u'DailyBandwidthLimit', blank=True) # Field name made lowercase.
    dailybandwidthused = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Daily Bandwidth Used', db_column=u'DailyBandwidthUsed', blank=True) # Field name made lowercase.
    dailyrequesttimelimit = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Daily Request Time Limit (min)', db_column=u'DailyRequestTimeLimit', blank=True) # Field name made lowercase.
    dailyrequesttimeused = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Daily Request Time Used', db_column=u'DailyRequestTimeUsed', blank=True) # Field name made lowercase.
    monthlypageviewsentitlement = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Monthly Page Views Allowed', db_column=u'MonthlyPageViewsEntitlement', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Site'
        verbose_name = 'Site'
        verbose_name_plural = 'Sites'
        # keyPrefix = '0DM'

class Sitefeed(models.Model):
    parentid = models.ForeignKey('Site', db_column=u'ParentId') # Field name made lowercase.
    type = models.CharField(db_column=u'Type', choices=[(u'TrackedChange', u'Tracked Change'), (u'UserStatus', u'User Status'), (u'TextPost', u'Text Post'), (u'AdvancedTextPost', u'Advanced Text Post'), (u'LinkPost', u'Link Post'), (u'ContentPost', u'Content Post'), (u'PollPost', u'Poll'), (u'RypplePost', u'Work.com Thanks'), (u'ProfileSkillPost', u'Profile Skill Post'), (u'DashboardComponentSnapshot', u'Dashboard Component Snapshot'), (u'ApprovalPost', u'Approval Post'), (u'CaseCommentPost', u'Case Comment Feed'), (u'ReplyPost', u'Reply Post'), (u'EmailMessageEvent', u'Email Message Feed'), (u'CallLogPost', u'Call Log Feed'), (u'ChangeStatusPost', u'Change Status Feed'), (u'AttachArticleEvent', u'Attached Article'), (u'MilestoneEvent', u'Milestone Event'), (u'ActivityEvent', u'Activity Change'), (u'ChatTranscriptPost', u'Chat Transcript Post'), (u'CollaborationGroupCreated', u'Collaboration Group Created'), (u'CollaborationGroupUnarchived', u'Collaboration Group Reactivated'), (u'SocialPost', u'Social Post'), (u'QuestionPost', u'Question Post'), (u'FacebookPost', u'Facebook Post'), (u'BasicTemplateFeedItem', u'Basic Template Post'), (u'CreateRecordEvent', u'Created Record'), (u'CanvasPost', u'Canvas'), (u'AnnouncementPost', u'a')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Feed Item Type') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    commentcount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Comment Count', db_column=u'CommentCount') # Field name made lowercase.
    likecount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Like Count', db_column=u'LikeCount') # Field name made lowercase.
    title = models.CharField(max_length=255, verbose_name=u'Title', sf_read_only=models.READ_ONLY, db_column=u'Title', blank=True) # Field name made lowercase.
    body = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Body', db_column=u'Body', blank=True) # Field name made lowercase.
    linkurl = models.URLField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Link Url', db_column=u'LinkUrl', blank=True) # Field name made lowercase.
    relatedrecordid = models.ForeignKey('Contentversion', null=True, db_column=u'RelatedRecordId', blank=True) # Field name made lowercase.
    contentdata = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Content Data', db_column=u'ContentData', blank=True) # Field name made lowercase.
    contentfilename = models.CharField(max_length=255, verbose_name=u'Content File Name', sf_read_only=models.READ_ONLY, db_column=u'ContentFileName', blank=True) # Field name made lowercase.
    contentdescription = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Content Description', db_column=u'ContentDescription', blank=True) # Field name made lowercase.
    contenttype = models.CharField(max_length=120, verbose_name=u'Content File Type', sf_read_only=models.READ_ONLY, db_column=u'ContentType', blank=True) # Field name made lowercase.
    contentsize = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Content Size', db_column=u'ContentSize', blank=True) # Field name made lowercase.
    insertedbyid = models.ForeignKey('User', null=True, db_column=u'InsertedById', blank=True) # Field name made lowercase.
    networkscope = models.CharField(db_column=u'NetworkScope', choices=[(u'AllNetworks', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Network Scope') # Field name made lowercase.
    visibility = models.CharField(db_column=u'Visibility', choices=[(u'AllUsers', None), (u'InternalUsers', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Visibility') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'SiteFeed'
        verbose_name = 'Site'
        verbose_name_plural = 'Site'
        # keyPrefix = 'None'

class Sitehistory(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    siteid = models.ForeignKey('Site', db_column=u'SiteId') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    field = models.CharField(max_length=255, verbose_name=u'Changed Field', sf_read_only=models.READ_ONLY, db_column=u'Field', choices=[(u'siteActive', u'Active'), (u'Admin', None), (u'AnalyticsTrackingCode', None), (u'siteOverride401', u'Authorization Required Page (401)'), (u'siteOverrideChangePassword', u'Change Password Page'), (u'ClickjackProtectionLevel', None), (u'created', u'Created.'), (u'SiteDeleteDomain', u'Custom Web Address'), (u'siteNewDomain', u'Custom Web Address'), (u'DefaultDomain', None), (u'siteSetPrimaryDomain', u'Default Site Domain'), (u'Description', None), (u'siteBTDisabled', u'Disable Site'), (u'siteEnableFeeds', u'Enable Feeds'), (u'siteAllowStandardAnswersPages', u'Enable Standard Answers Pages'), (u'siteAllowHomePage', u'Enable Standard Home Page'), (u'siteAllowStandardIdeasPages', u'Enable Standard Ideas Pages'), (u'siteAllowStandardSearch', u'Enable Standard Lookup Pages'), (u'siteAllowStandardLookups', u'Enable Standard Search Pages'), (u'FavoriteIcon', None), (u'feedEvent', u'Feed event'), (u'siteOverride500', u'Generic Error Page'), (u'GuestUser', None), (u'Guid', None), (u'siteOverrideInactive', u'Inactive Site Home Page'), (u'IndexPage', None), (u'Language', None), (u'siteOverride509', u'Limit Exceeded Page (509)'), (u'siteOverride503', u'Maintenance Page(500/503)'), (u'MasterLabel', None), (u'sitePageLimitExceeded', u'Monthly page view limit exceeded for org'), (u'siteOverrideMyProfile', u'My Profile Page'), (u'Name', None), (u'NewPassTemplate', None), (u'NewUserTemplate', None), (u'Options', None), (u'ownerAccepted', u'Owner (Accepted)'), (u'ownerAssignment', u'Owner (Assignment)'), (u'siteOverride404', u'Page Not Found Page (404)'), (u'Portal', None), (u'locked', u'Record locked.'), (u'unlocked', u'Record unlocked.'), (u'siteNewRedirect', u'redirection mappings. Created a new mapping'), (u'siteDeleteRedirect', u'redirection mappings. Deleted the mapping'), (u'siteChangeRedirect', u'redirection mappings. The new mapping value is'), (u'siteRequireInsecurePortalAccess', u'Require Non-Secure Connections (HTTP)'), (u'siteRequireHttps', u'Require Secure Connections (HTTPS)'), (u'siteOverrideSelfReg', u'Self Registration Page'), (u'ServerIsDown', None), (u'siteOverrideRobotsTxt', u'Site Robots.txt'), (u'siteOverrideTemplate', u'Site Template'), (u'SiteType', None), (u'Status', None), (u'Subdomain', None), (u'TopLevelDomain', None), (u'UrlPathPrefix', None), (u'UrlRewriterClass', None)]) # Field name made lowercase.
    oldvalue = models.CharField(max_length=255, verbose_name=u'Old Value', sf_read_only=models.READ_ONLY, db_column=u'OldValue', blank=True) # Field name made lowercase.
    newvalue = models.CharField(max_length=255, verbose_name=u'New Value', sf_read_only=models.READ_ONLY, db_column=u'NewValue', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'SiteHistory'
        verbose_name = 'Site History'
        verbose_name_plural = 'Site History'
        # keyPrefix = 'None'

class Solution(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    solutionnumber = models.CharField(max_length=30, verbose_name=u'Solution Number', sf_read_only=models.READ_ONLY, db_column=u'SolutionNumber') # Field name made lowercase.
    solutionname = models.CharField(max_length=255, verbose_name=u'Title', db_column=u'SolutionName') # Field name made lowercase.
    ispublished = models.BooleanField(verbose_name=u'Public', db_column=u'IsPublished') # Field name made lowercase.
    ispublishedinpublickb = models.BooleanField(verbose_name=u'Visible in Public Knowledge Base', db_column=u'IsPublishedInPublicKb') # Field name made lowercase.
    status = models.CharField(max_length=40, verbose_name=u'Status', db_column=u'Status', choices=[(u'Draft', u'Draft'), (u'Reviewed', u'Reviewed'), (u'Duplicate', u'Duplicate')]) # Field name made lowercase.
    isreviewed = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Reviewed', db_column=u'IsReviewed') # Field name made lowercase.
    solutionnote = models.TextField(verbose_name=u'Description', db_column=u'SolutionNote', blank=True) # Field name made lowercase.
    ownerid = models.ForeignKey('User', db_column=u'OwnerId') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    timesused = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Num Related Cases', db_column=u'TimesUsed') # Field name made lowercase.
    lastvieweddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Viewed Date', db_column=u'LastViewedDate', blank=True) # Field name made lowercase.
    lastreferenceddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Referenced Date', db_column=u'LastReferencedDate', blank=True) # Field name made lowercase.
    ishtml = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Is Html', db_column=u'IsHtml') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Solution'
        verbose_name = 'Solution'
        verbose_name_plural = 'Solutions'
        # keyPrefix = '501'

class Solutionfeed(models.Model):
    parentid = models.ForeignKey('Solution', db_column=u'ParentId') # Field name made lowercase.
    type = models.CharField(db_column=u'Type', choices=[(u'TrackedChange', u'Tracked Change'), (u'UserStatus', u'User Status'), (u'TextPost', u'Text Post'), (u'AdvancedTextPost', u'Advanced Text Post'), (u'LinkPost', u'Link Post'), (u'ContentPost', u'Content Post'), (u'PollPost', u'Poll'), (u'RypplePost', u'Work.com Thanks'), (u'ProfileSkillPost', u'Profile Skill Post'), (u'DashboardComponentSnapshot', u'Dashboard Component Snapshot'), (u'ApprovalPost', u'Approval Post'), (u'CaseCommentPost', u'Case Comment Feed'), (u'ReplyPost', u'Reply Post'), (u'EmailMessageEvent', u'Email Message Feed'), (u'CallLogPost', u'Call Log Feed'), (u'ChangeStatusPost', u'Change Status Feed'), (u'AttachArticleEvent', u'Attached Article'), (u'MilestoneEvent', u'Milestone Event'), (u'ActivityEvent', u'Activity Change'), (u'ChatTranscriptPost', u'Chat Transcript Post'), (u'CollaborationGroupCreated', u'Collaboration Group Created'), (u'CollaborationGroupUnarchived', u'Collaboration Group Reactivated'), (u'SocialPost', u'Social Post'), (u'QuestionPost', u'Question Post'), (u'FacebookPost', u'Facebook Post'), (u'BasicTemplateFeedItem', u'Basic Template Post'), (u'CreateRecordEvent', u'Created Record'), (u'CanvasPost', u'Canvas'), (u'AnnouncementPost', u'a')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Feed Item Type') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    commentcount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Comment Count', db_column=u'CommentCount') # Field name made lowercase.
    likecount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Like Count', db_column=u'LikeCount') # Field name made lowercase.
    title = models.CharField(max_length=255, verbose_name=u'Title', sf_read_only=models.READ_ONLY, db_column=u'Title', blank=True) # Field name made lowercase.
    body = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Body', db_column=u'Body', blank=True) # Field name made lowercase.
    linkurl = models.URLField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Link Url', db_column=u'LinkUrl', blank=True) # Field name made lowercase.
    relatedrecordid = models.ForeignKey('Contentversion', null=True, db_column=u'RelatedRecordId', blank=True) # Field name made lowercase.
    contentdata = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Content Data', db_column=u'ContentData', blank=True) # Field name made lowercase.
    contentfilename = models.CharField(max_length=255, verbose_name=u'Content File Name', sf_read_only=models.READ_ONLY, db_column=u'ContentFileName', blank=True) # Field name made lowercase.
    contentdescription = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Content Description', db_column=u'ContentDescription', blank=True) # Field name made lowercase.
    contenttype = models.CharField(max_length=120, verbose_name=u'Content File Type', sf_read_only=models.READ_ONLY, db_column=u'ContentType', blank=True) # Field name made lowercase.
    contentsize = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Content Size', db_column=u'ContentSize', blank=True) # Field name made lowercase.
    insertedbyid = models.ForeignKey('User', null=True, db_column=u'InsertedById', blank=True) # Field name made lowercase.
    networkscope = models.CharField(db_column=u'NetworkScope', choices=[(u'AllNetworks', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Network Scope') # Field name made lowercase.
    visibility = models.CharField(db_column=u'Visibility', choices=[(u'AllUsers', None), (u'InternalUsers', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Visibility') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'SolutionFeed'
        verbose_name = 'Solution Feed'
        verbose_name_plural = 'Solution Feed'
        # keyPrefix = 'None'

class Solutionhistory(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    solutionid = models.ForeignKey('Solution', db_column=u'SolutionId') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    field = models.CharField(max_length=255, verbose_name=u'Changed Field', sf_read_only=models.READ_ONLY, db_column=u'Field', choices=[(u'created', u'Created.'), (u'feedEvent', u'Feed event'), (u'IsPublished', None), (u'IsPublishedInPublicKb', None), (u'ownerAccepted', u'Owner (Accepted)'), (u'ownerAssignment', u'Owner (Assignment)'), (u'locked', u'Record locked.'), (u'unlocked', u'Record unlocked.'), (u'SolutionName', None), (u'SolutionNote', None), (u'Status', None)]) # Field name made lowercase.
    oldvalue = models.CharField(max_length=255, verbose_name=u'Old Value', sf_read_only=models.READ_ONLY, db_column=u'OldValue', blank=True) # Field name made lowercase.
    newvalue = models.CharField(max_length=255, verbose_name=u'New Value', sf_read_only=models.READ_ONLY, db_column=u'NewValue', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'SolutionHistory'
        verbose_name = 'Solution History'
        verbose_name_plural = 'Solution History'
        # keyPrefix = 'None'

class Solutionstatus(models.Model):
    masterlabel = models.CharField(max_length=255, verbose_name=u'Master Label', sf_read_only=models.READ_ONLY, db_column=u'MasterLabel', blank=True) # Field name made lowercase.
    sortorder = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Sort Order', db_column=u'SortOrder', blank=True) # Field name made lowercase.
    isdefault = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Is Default', db_column=u'IsDefault') # Field name made lowercase.
    isreviewed = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Is Reviewed', db_column=u'IsReviewed') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'SolutionStatus'
        verbose_name = 'Solution Status Value'
        verbose_name_plural = 'Solution Status Value'
        # keyPrefix = 'None'

class Staticresource(models.Model):
    namespaceprefix = models.CharField(max_length=15, verbose_name=u'Namespace Prefix', sf_read_only=models.READ_ONLY, db_column=u'NamespacePrefix', blank=True) # Field name made lowercase.
    name = models.CharField(max_length=255, verbose_name=u'Name', db_column=u'Name') # Field name made lowercase.
    contenttype = models.CharField(max_length=120, verbose_name=u'MIME Type', db_column=u'ContentType') # Field name made lowercase.
    bodylength = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Size', db_column=u'BodyLength') # Field name made lowercase.
    body = models.TextField(verbose_name=u'Body', db_column=u'Body', blank=True) # Field name made lowercase.
    description = models.TextField(verbose_name=u'Description', db_column=u'Description', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    cachecontrol = models.CharField(max_length=40, verbose_name=u'Cache Control', db_column=u'CacheControl', choices=[(u'Private', u'Private'), (u'Public', u'Public')]) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'StaticResource'
        verbose_name = 'Static Resource'
        verbose_name_plural = 'Static Resources'
        # keyPrefix = '081'

class SurveyquestionsC(models.Model):
    ownerid = models.ForeignKey('Group', db_column=u'OwnerId') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'Name', sf_read_only=models.READ_ONLY, db_column=u'Name') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    lastvieweddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Viewed Date', db_column=u'LastViewedDate', blank=True) # Field name made lowercase.
    lastreferenceddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Referenced Date', db_column=u'LastReferencedDate', blank=True) # Field name made lowercase.
    questiontext__c = models.TextField(verbose_name=u'Question', db_column=u'QuestionText__c') # Field name made lowercase.
    answer_required__c = models.BooleanField(verbose_name=u'Answer Required', db_column=u'Answer_Required__c') # Field name made lowercase.
    question_number__c = models.DecimalField(db_column=u'Question_Number__c', decimal_places=0, max_digits=2, blank=True, null=True, verbose_name=u'Question Number') # Field name made lowercase.
    survey__c = models.ForeignKey('SurveyC', null=True, db_column=u'Survey__c', blank=True) # Field name made lowercase.
    question_type__c = models.CharField(blank=True, max_length=255, verbose_name=u'Question Type', db_column=u'Question_Type__c', choices=[(u'SingleChoice', u'SingleChoice'), (u'MultipleChoice', u'MultipleChoice'), (u'YesOrNo', u'YesOrNo'), (u'TrueOrFalse', u'TrueOrFalse'), (u'Text', u'Text'), (u'Date', u'Date'), (u'Numeric', u'Numeric'), (u'Confirm Gender', u'Confirm Gender'), (u'Confirm date of birth', u'Confirm date of birth'), (u'height and weight', u'height and weight'), (u'medications', u'medications'), (u'PCPYesNo', u'PCPYesNo'), (u'HelpFindPCPYesNo', u'HelpFindPCPYesNo'), (u'PCPPreferenceYesNo', u'PCPPreferenceYesNo'), (u'DoctorPreferences', u'DoctorPreferences'), (u'AlcoholYesNo', u'AlcoholYesNo'), (u'HowManyDrinks', u'HowManyDrinks'), (u'TobaccoYesNoQuit', u'TobaccoYesNoQuit'), (u'frequency', u'frequency')]) # Field name made lowercase.
    question_description__c = models.TextField(verbose_name=u'Question Description', db_column=u'Question_Description__c', blank=True) # Field name made lowercase.
    category__c = models.CharField(blank=True, max_length=255, verbose_name=u'Category', db_column=u'Category__c', choices=[(u'Basic Information', u'Basic Information'), (u'Health History', u'Health History'), (u'Preventive Screening', u'Preventive Screening'), (u'Vaccination', u'Vaccination'), (u'Alcohol & Tobacco', u'Alcohol & Tobacco'), (u'Physical Activity', u'Physical Activity'), (u'Mental Health', u'Mental Health'), (u'Productivity', u'Productivity'), (u'Nutrition & Eating Habits', u'Nutrition & Eating Habits'), (u'Impairments', u'Impairments'), (u'Women Only', u'Women Only')]) # Field name made lowercase.
    parent_question__c = models.ForeignKey('self', null=True, db_column=u'Parent_Question__c', blank=True) # Field name made lowercase.
    minimum_age__c = models.DecimalField(db_column=u'Minimum_Age__c', decimal_places=0, max_digits=2, blank=True, null=True, verbose_name=u'Minimum Age') # Field name made lowercase.
    maximum_age__c = models.DecimalField(db_column=u'Maximum_Age__c', decimal_places=0, max_digits=2, blank=True, null=True, verbose_name=u'Maximum Age') # Field name made lowercase.
    subquestionlinktext__c = models.CharField(max_length=80, verbose_name=u'Subquestion Link Text', db_column=u'SubquestionLinkText__c', blank=True) # Field name made lowercase.
    secondline__c = models.CharField(max_length=80, verbose_name=u'Secondline', db_column=u'Secondline__c', blank=True) # Field name made lowercase.
    showsubquestions__c = models.BooleanField(verbose_name=u'show with sub questions', db_column=u'showSubquestions__c') # Field name made lowercase.
    sidegraphictitle__c = models.CharField(max_length=80, verbose_name=u'Side Graphic Title', db_column=u'SideGraphicTitle__c', blank=True) # Field name made lowercase.
    sidegraphicfilename__c = models.CharField(max_length=80, verbose_name=u'Side Graphic File Name', db_column=u'SideGraphicFileName__c', blank=True) # Field name made lowercase.
    bottom_graphic_file_name__c = models.CharField(max_length=50, verbose_name=u'Bottom Graphic File Name', db_column=u'Bottom_Graphic_File_Name__c', blank=True) # Field name made lowercase.
    active__c = models.BooleanField(verbose_name=u'Active', db_column=u'Active__c') # Field name made lowercase.
    applicable_gender__c = models.CharField(blank=True, max_length=255, verbose_name=u'Applicable Gender', db_column=u'Applicable_Gender__c', choices=[(u'Any', u'Any'), (u'Female', u'Female'), (u'Male', u'Male')]) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'SurveyQuestions__c'
        verbose_name = 'Survey Questions'
        verbose_name_plural = 'Survey Questions'
        # keyPrefix = 'a0d'

class SurveyChoicesC(models.Model):
    ownerid = models.ForeignKey('Group', db_column=u'OwnerId') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'Choice', sf_read_only=models.READ_ONLY, db_column=u'Name') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    lastvieweddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Viewed Date', db_column=u'LastViewedDate', blank=True) # Field name made lowercase.
    lastreferenceddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Referenced Date', db_column=u'LastReferencedDate', blank=True) # Field name made lowercase.
    choice_number__c = models.DecimalField(db_column=u'Choice_Number__c', decimal_places=0, max_digits=2, blank=True, null=True, verbose_name=u'Choice Number') # Field name made lowercase.
    survey_question__c = models.ForeignKey('SurveyquestionsC', null=True, db_column=u'Survey_Question__c', blank=True) # Field name made lowercase.
    choice_value__c = models.CharField(max_length=50, verbose_name=u'Choice Value', db_column=u'Choice_Value__c', blank=True) # Field name made lowercase.
    choice_description__c = models.CharField(max_length=255, verbose_name=u'Choice Description', db_column=u'Choice_Description__c', blank=True) # Field name made lowercase.
    choice_label__c = models.CharField(max_length=80, verbose_name=u'Choice Label', db_column=u'Choice_Label__c', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Survey_Choices__c'
        verbose_name = 'Survey Choices'
        verbose_name_plural = 'Survey Choices'
        # keyPrefix = 'a0k'

class SurveyMembersC(models.Model):
    ownerid = models.ForeignKey('Group', db_column=u'OwnerId') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'Auto Name', sf_read_only=models.READ_ONLY, db_column=u'Name') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    lastvieweddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Viewed Date', db_column=u'LastViewedDate', blank=True) # Field name made lowercase.
    lastreferenceddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Referenced Date', db_column=u'LastReferencedDate', blank=True) # Field name made lowercase.
    survey__c = models.ForeignKey('SurveyC', null=True, db_column=u'Survey__c', blank=True) # Field name made lowercase.
    member__c = models.ForeignKey('Account', null=True, db_column=u'Member__c', blank=True) # Field name made lowercase.
    status__c = models.CharField(blank=True, max_length=255, verbose_name=u'Status', db_column=u'Status__c', choices=[(u'New', u'New'), (u'Opened', u'Opened'), (u'In Progress', u'In Progress'), (u'Submitted', u'Submitted'), (u'Closed', u'Closed')]) # Field name made lowercase.
    opened_date__c = models.DateField(null=True, verbose_name=u'Opened Date', db_column=u'Opened_Date__c', blank=True) # Field name made lowercase.
    submitted_date__c = models.DateField(null=True, verbose_name=u'Submitted Date', db_column=u'Submitted_Date__c', blank=True) # Field name made lowercase.
    surveyandmemberid__c = models.CharField(max_length=1300, verbose_name=u'SurveyAndMemberId', sf_read_only=models.READ_ONLY, db_column=u'SurveyAndMemberId__c', blank=True) # Field name made lowercase.
    current_step__c = models.DecimalField(db_column=u'Current_Step__c', decimal_places=0, max_digits=2, blank=True, null=True, verbose_name=u'Current Step') # Field name made lowercase.
    skipped_questions__c = models.CharField(max_length=255, verbose_name=u'Skipped Questions', db_column=u'Skipped_Questions__c', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Survey_Members__c'
        verbose_name = 'Survey Members'
        verbose_name_plural = 'Survey Members'
        # keyPrefix = 'a0e'

class SurveyResponseC(models.Model):
    ownerid = models.ForeignKey('Group', db_column=u'OwnerId') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'Name', sf_read_only=models.READ_ONLY, db_column=u'Name') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    survey_member__c = models.ForeignKey('SurveyMembersC', null=True, db_column=u'Survey_Member__c', blank=True) # Field name made lowercase.
    survey_question__c = models.ForeignKey('SurveyquestionsC', null=True, db_column=u'Survey_Question__c', blank=True) # Field name made lowercase.
    answer_numeric__c = models.DecimalField(db_column=u'Answer_Numeric__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Answer Numeric') # Field name made lowercase.
    answer_text__c = models.CharField(max_length=255, verbose_name=u'Answer Text', db_column=u'Answer_Text__c', blank=True) # Field name made lowercase.
    answer_boolean__c = models.BooleanField(verbose_name=u'Answer Boolean', db_column=u'Answer_Boolean__c') # Field name made lowercase.
    answer_choice_ids__c = models.CharField(max_length=255, verbose_name=u'Answer Choice Ids', db_column=u'Answer_Choice_Ids__c', blank=True) # Field name made lowercase.
    heightft__c = models.DecimalField(db_column=u'heightFT__c', decimal_places=0, max_digits=1, blank=True, null=True, verbose_name=u'heightFT') # Field name made lowercase.
    heightin__c = models.DecimalField(db_column=u'heightIN__c', decimal_places=0, max_digits=2, blank=True, null=True, verbose_name=u'heightIN') # Field name made lowercase.
    weightilbs__c = models.DecimalField(db_column=u'WeightILBS__c', decimal_places=0, max_digits=3, blank=True, null=True, verbose_name=u'WeightILBS') # Field name made lowercase.
    bmi__c = models.DecimalField(db_column=u'BMI__c', decimal_places=2, max_digits=4, blank=True, null=True, verbose_name=u'BMI') # Field name made lowercase.
    spoken_language__c = models.CharField(max_length=20, verbose_name=u'Spoken Language', db_column=u'Spoken_Language__c', blank=True) # Field name made lowercase.
    genderpreference__c = models.CharField(max_length=20, verbose_name=u'GenderPreference', db_column=u'GenderPreference__c', blank=True) # Field name made lowercase.
    zipcode__c = models.CharField(max_length=10, verbose_name=u'zipcode', blank=True)
    frequencyperiod__c = models.CharField(max_length=10, verbose_name=u'frequencyPeriod', db_column=u'frequencyPeriod__c', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Survey_Response__c'
        verbose_name = 'Survey Response'
        verbose_name_plural = 'Survey Response'
        # keyPrefix = 'a0l'

class SurveyC(models.Model):
    ownerid = models.ForeignKey('Group', db_column=u'OwnerId') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'Survey Number', sf_read_only=models.READ_ONLY, db_column=u'Name') # Field name made lowercase.
    recordtypeid = models.ForeignKey('Recordtype', null=True, db_column=u'RecordTypeId', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    lastvieweddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Viewed Date', db_column=u'LastViewedDate', blank=True) # Field name made lowercase.
    lastreferenceddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Referenced Date', db_column=u'LastReferencedDate', blank=True) # Field name made lowercase.
    title__c = models.CharField(max_length=100, unique=True, verbose_name=u'Title', db_column=u'Title__c', blank=True) # Field name made lowercase.
    published__c = models.BooleanField(verbose_name=u'Published', db_column=u'Published__c') # Field name made lowercase.
    approved__c = models.BooleanField(verbose_name=u'Approved', db_column=u'Approved__c') # Field name made lowercase.
    start_date__c = models.DateField(null=True, verbose_name=u'Start Date', db_column=u'Start_Date__c', blank=True) # Field name made lowercase.
    end_date__c = models.DateField(null=True, verbose_name=u'End Date', db_column=u'End_Date__c', blank=True) # Field name made lowercase.
    language__c = models.CharField(blank=True, max_length=255, verbose_name=u'Language', db_column=u'Language__c', choices=[(u'English', u'English'), (u'Spanish', u'Spanish')]) # Field name made lowercase.
    start_message__c = models.TextField(verbose_name=u'Start Message', db_column=u'Start_Message__c', blank=True) # Field name made lowercase.
    closing_message__c = models.TextField(verbose_name=u'Closing Message', db_column=u'Closing_Message__c', blank=True) # Field name made lowercase.
    firstheader__c = models.CharField(max_length=80, verbose_name=u'FirstHeader', db_column=u'FirstHeader__c', blank=True) # Field name made lowercase.
    secondheader__c = models.CharField(max_length=80, verbose_name=u'SecondHeader', db_column=u'SecondHeader__c', blank=True) # Field name made lowercase.
    halfwaytext__c = models.CharField(max_length=80, verbose_name=u'HalfwayText', db_column=u'HalfwayText__c', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Survey__c'
        verbose_name = 'Survey'
        verbose_name_plural = 'Surveys'
        # keyPrefix = 'a0b'

class Task(models.Model):
    recordtypeid = models.ForeignKey('Recordtype', null=True, db_column=u'RecordTypeId', blank=True) # Field name made lowercase.
    whoid = models.ForeignKey('Contact', null=True, db_column=u'WhoId', blank=True) # Field name made lowercase.
    whatid = models.ForeignKey('Account', null=True, db_column=u'WhatId', blank=True) # Field name made lowercase.
    whocount = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Relation Count', db_column=u'WhoCount', blank=True) # Field name made lowercase.
    whatcount = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Related To Count', db_column=u'WhatCount', blank=True) # Field name made lowercase.
    subject = models.CharField(blank=True, max_length=255, verbose_name=u'Subject', db_column=u'Subject', choices=[(u'Call', u'Call'), (u'Send Letter', u'Send Letter'), (u'Send Quote', u'Send Quote'), (u'Other', u'Other')]) # Field name made lowercase.
    activitydate = models.DateField(null=True, verbose_name=u'Due Date Only', db_column=u'ActivityDate', blank=True) # Field name made lowercase.
    status = models.CharField(max_length=40, verbose_name=u'Status', db_column=u'Status', choices=[(u'Open', u'Open'), (u'Completed', u'Completed'), (u'Not Started', u'Not Started')]) # Field name made lowercase.
    priority = models.CharField(max_length=40, verbose_name=u'Priority', db_column=u'Priority', choices=[(u'High', u'High'), (u'Normal', u'Normal')]) # Field name made lowercase.
    ishighpriority = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'High Priority', db_column=u'IsHighPriority') # Field name made lowercase.
    ownerid = models.ForeignKey('User', db_column=u'OwnerId') # Field name made lowercase.
    description = models.TextField(verbose_name=u'Description', db_column=u'Description', blank=True) # Field name made lowercase.
    type = models.CharField(blank=True, max_length=40, verbose_name=u'Type', db_column=u'Type', choices=[(u'Call', u'Call'), (u'Meeting', u'Meeting'), (u'Other', u'Other')]) # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    accountid = models.ForeignKey('Account', null=True, db_column=u'AccountId', blank=True) # Field name made lowercase.
    isclosed = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Closed', db_column=u'IsClosed') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    isarchived = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Archived', db_column=u'IsArchived') # Field name made lowercase.
    calldurationinseconds = models.IntegerField(null=True, verbose_name=u'Call Duration', db_column=u'CallDurationInSeconds', blank=True) # Field name made lowercase.
    calltype = models.CharField(blank=True, max_length=40, verbose_name=u'Call Type', db_column=u'CallType', choices=[(u'Internal', u'Internal'), (u'Inbound', u'Inbound'), (u'Outbound', u'Outbound')]) # Field name made lowercase.
    calldisposition = models.CharField(max_length=255, verbose_name=u'Call Result', db_column=u'CallDisposition', blank=True) # Field name made lowercase.
    callobject = models.CharField(max_length=255, verbose_name=u'Call Object Identifier', db_column=u'CallObject', blank=True) # Field name made lowercase.
    reminderdatetime = models.DateTimeField(null=True, verbose_name=u'Reminder Date/Time', db_column=u'ReminderDateTime', blank=True) # Field name made lowercase.
    isreminderset = models.BooleanField(verbose_name=u'Reminder Set', db_column=u'IsReminderSet') # Field name made lowercase.
    recurrenceactivityid = models.ForeignKey('self', null=True, db_column=u'RecurrenceActivityId', blank=True) # Field name made lowercase.
    isrecurrence = models.BooleanField(sf_read_only=models.NOT_UPDATEABLE, verbose_name=u'Create Recurring Series of Tasks', db_column=u'IsRecurrence') # Field name made lowercase.
    recurrencestartdateonly = models.DateField(null=True, verbose_name=u'Start Date', db_column=u'RecurrenceStartDateOnly', blank=True) # Field name made lowercase.
    recurrenceenddateonly = models.DateField(null=True, verbose_name=u'End Date', db_column=u'RecurrenceEndDateOnly', blank=True) # Field name made lowercase.
    recurrencetimezonesidkey = models.CharField(blank=True, max_length=40, verbose_name=u'Recurrence Time Zone', db_column=u'RecurrenceTimeZoneSidKey', choices=[(u'Pacific/Kiritimati', u'(GMT+14:00) Line Islands Time (Pacific/Kiritimati)'), (u'Pacific/Chatham', u'(GMT+13:45) Chatham Daylight Time (Pacific/Chatham)'), (u'Pacific/Auckland', u'(GMT+13:00) New Zealand Daylight Time (Pacific/Auckland)'), (u'Pacific/Enderbury', u'(GMT+13:00) Phoenix Islands Time (Pacific/Enderbury)'), (u'Pacific/Fiji', u'(GMT+13:00) Fiji Summer Time (Pacific/Fiji)'), (u'Pacific/Tongatapu', u'(GMT+13:00) Tonga Time (Pacific/Tongatapu)'), (u'Asia/Kamchatka', u'(GMT+12:00) Magadan Time (Asia/Kamchatka)'), (u'Pacific/Norfolk', u'(GMT+11:30) Norfolk Islands Time (Pacific/Norfolk)'), (u'Australia/Lord_Howe', u'(GMT+11:00) Lord Howe Daylight Time (Australia/Lord_Howe)'), (u'Australia/Sydney', u'(GMT+11:00) Australian Eastern Daylight Time (Australia/Sydney)'), (u'Pacific/Guadalcanal', u'(GMT+11:00) Solomon Islands Time (Pacific/Guadalcanal)'), (u'Australia/Adelaide', u'(GMT+10:30) Australian Central Daylight Time (Australia/Adelaide)'), (u'Australia/Brisbane', u'(GMT+10:00) Australian Eastern Standard Time (Australia/Brisbane)'), (u'Australia/Darwin', u'(GMT+09:30) Australian Central Standard Time (Australia/Darwin)'), (u'Asia/Seoul', u'(GMT+09:00) Korean Standard Time (Asia/Seoul)'), (u'Asia/Tokyo', u'(GMT+09:00) Japan Standard Time (Asia/Tokyo)'), (u'Asia/Hong_Kong', u'(GMT+08:00) Hong Kong Time (Asia/Hong_Kong)'), (u'Asia/Kuala_Lumpur', u'(GMT+08:00) Malaysia Time (Asia/Kuala_Lumpur)'), (u'Asia/Manila', u'(GMT+08:00) Philippine Time (Asia/Manila)'), (u'Asia/Shanghai', u'(GMT+08:00) China Standard Time (Asia/Shanghai)'), (u'Asia/Singapore', u'(GMT+08:00) Singapore Standard Time (Asia/Singapore)'), (u'Asia/Taipei', u'(GMT+08:00) Taipei Standard Time (Asia/Taipei)'), (u'Australia/Perth', u'(GMT+08:00) Australian Western Standard Time (Australia/Perth)'), (u'Asia/Bangkok', u'(GMT+07:00) Indochina Time (Asia/Bangkok)'), (u'Asia/Ho_Chi_Minh', u'(GMT+07:00) Indochina Time (Asia/Ho_Chi_Minh)'), (u'Asia/Jakarta', u'(GMT+07:00) Western Indonesia Time (Asia/Jakarta)'), (u'Asia/Rangoon', u'(GMT+06:30) Myanmar Time (Asia/Rangoon)'), (u'Asia/Dhaka', u'(GMT+06:00) Bangladesh Time (Asia/Dhaka)'), (u'Asia/Yekaterinburg', u'(GMT+06:00) Yekaterinburg Time (Asia/Yekaterinburg)'), (u'Asia/Kathmandu', u'(GMT+05:45) Nepal Time (Asia/Kathmandu)'), (u'Asia/Colombo', u'(GMT+05:30) India Standard Time (Asia/Colombo)'), (u'Asia/Kolkata', u'(GMT+05:30) India Standard Time (Asia/Kolkata)'), (u'Asia/Baku', u'(GMT+05:00) Azerbaijan Summer Time (Asia/Baku)'), (u'Asia/Karachi', u'(GMT+05:00) Pakistan Time (Asia/Karachi)'), (u'Asia/Tashkent', u'(GMT+05:00) Uzbekistan Time (Asia/Tashkent)'), (u'Asia/Kabul', u'(GMT+04:30) Afghanistan Time (Asia/Kabul)'), (u'Asia/Dubai', u'(GMT+04:00) Gulf Standard Time (Asia/Dubai)'), (u'Asia/Tbilisi', u'(GMT+04:00) Georgia Time (Asia/Tbilisi)'), (u'Asia/Yerevan', u'(GMT+04:00) Armenia Time (Asia/Yerevan)'), (u'Europe/Moscow', u'(GMT+04:00) Moscow Standard Time (Europe/Moscow)'), (u'Asia/Tehran', u'(GMT+03:30) Iran Standard Time (Asia/Tehran)'), (u'Africa/Nairobi', u'(GMT+03:00) East Africa Time (Africa/Nairobi)'), (u'Asia/Baghdad', u'(GMT+03:00) Arabian Standard Time (Asia/Baghdad)'), (u'Asia/Beirut', u'(GMT+03:00) Eastern European Summer Time (Asia/Beirut)'), (u'Asia/Jerusalem', u'(GMT+03:00) Israel Daylight Time (Asia/Jerusalem)'), (u'Asia/Kuwait', u'(GMT+03:00) Arabian Standard Time (Asia/Kuwait)'), (u'Asia/Riyadh', u'(GMT+03:00) Arabian Standard Time (Asia/Riyadh)'), (u'Europe/Athens', u'(GMT+03:00) Eastern European Summer Time (Europe/Athens)'), (u'Europe/Bucharest', u'(GMT+03:00) Eastern European Summer Time (Europe/Bucharest)'), (u'Europe/Helsinki', u'(GMT+03:00) Eastern European Summer Time (Europe/Helsinki)'), (u'Europe/Istanbul', u'(GMT+03:00) Eastern European Summer Time (Europe/Istanbul)'), (u'Europe/Minsk', u'(GMT+03:00) Further-eastern European Time (Europe/Minsk)'), (u'Africa/Cairo', u'(GMT+02:00) Eastern European Time (Africa/Cairo)'), (u'Africa/Johannesburg', u'(GMT+02:00) South Africa Standard Time (Africa/Johannesburg)'), (u'Europe/Amsterdam', u'(GMT+02:00) Central European Summer Time (Europe/Amsterdam)'), (u'Europe/Berlin', u'(GMT+02:00) Central European Summer Time (Europe/Berlin)'), (u'Europe/Brussels', u'(GMT+02:00) Central European Summer Time (Europe/Brussels)'), (u'Europe/Paris', u'(GMT+02:00) Central European Summer Time (Europe/Paris)'), (u'Europe/Prague', u'(GMT+02:00) Central European Summer Time (Europe/Prague)'), (u'Europe/Rome', u'(GMT+02:00) Central European Summer Time (Europe/Rome)'), (u'Africa/Algiers', u'(GMT+01:00) Central European Time (Africa/Algiers)'), (u'Europe/Dublin', u'(GMT+01:00) Irish Summer Time (Europe/Dublin)'), (u'Europe/Lisbon', u'(GMT+01:00) Western European Summer Time (Europe/Lisbon)'), (u'Europe/London', u'(GMT+01:00) British Summer Time (Europe/London)'), (u'Africa/Casablanca', u'(GMT+00:00) Western European Time (Africa/Casablanca)'), (u'America/Scoresbysund', u'(GMT+00:00) East Greenland Summer Time (America/Scoresbysund)'), (u'Atlantic/Azores', u'(GMT+00:00) Azores Summer Time (Atlantic/Azores)'), (u'GMT', u'(GMT+00:00) Greenwich Mean Time (GMT)'), (u'Atlantic/Cape_Verde', u'(GMT-01:00) Cape Verde Time (Atlantic/Cape_Verde)'), (u'America/Sao_Paulo', u'(GMT-02:00) Brasilia Summer Time (America/Sao_Paulo)'), (u'Atlantic/South_Georgia', u'(GMT-02:00) South Georgia Time (Atlantic/South_Georgia)'), (u'America/St_Johns', u'(GMT-02:30) Newfoundland Daylight Time (America/St_Johns)'), (u'America/Argentina/Buenos_Aires', u'(GMT-03:00) Argentina Time (America/Argentina/Buenos_Aires)'), (u'America/Halifax', u'(GMT-03:00) Atlantic Daylight Time (America/Halifax)'), (u'America/Santiago', u'(GMT-03:00) Chile Summer Time (America/Santiago)'), (u'Atlantic/Bermuda', u'(GMT-03:00) Atlantic Daylight Time (Atlantic/Bermuda)'), (u'America/Indiana/Indianapolis', u'(GMT-04:00) Eastern Daylight Time (America/Indiana/Indianapolis)'), (u'America/New_York', u'(GMT-04:00) Eastern Daylight Time (America/New_York)'), (u'America/Puerto_Rico', u'(GMT-04:00) Atlantic Standard Time (America/Puerto_Rico)'), (u'America/Caracas', u'(GMT-04:30) Venezuela Time (America/Caracas)'), (u'America/Bogota', u'(GMT-05:00) Colombia Time (America/Bogota)'), (u'America/Chicago', u'(GMT-05:00) Central Daylight Time (America/Chicago)'), (u'America/Lima', u'(GMT-05:00) Peru Time (America/Lima)'), (u'America/Mexico_City', u'(GMT-05:00) Central Daylight Time (America/Mexico_City)'), (u'America/Panama', u'(GMT-05:00) Eastern Standard Time (America/Panama)'), (u'America/Denver', u'(GMT-06:00) Mountain Daylight Time (America/Denver)'), (u'America/El_Salvador', u'(GMT-06:00) Central Standard Time (America/El_Salvador)'), (u'America/Mazatlan', u'(GMT-06:00) Mountain Daylight Time (America/Mazatlan)'), (u'America/Los_Angeles', u'(GMT-07:00) Pacific Daylight Time (America/Los_Angeles)'), (u'America/Phoenix', u'(GMT-07:00) Mountain Standard Time (America/Phoenix)'), (u'America/Tijuana', u'(GMT-07:00) Pacific Daylight Time (America/Tijuana)'), (u'America/Anchorage', u'(GMT-08:00) Alaska Daylight Time (America/Anchorage)'), (u'Pacific/Pitcairn', u'(GMT-08:00) Pitcairn Time (Pacific/Pitcairn)'), (u'America/Adak', u'(GMT-09:00) Hawaii-Aleutian Standard Time (America/Adak)'), (u'Pacific/Gambier', u'(GMT-09:00) Gambier Time (Pacific/Gambier)'), (u'Pacific/Marquesas', u'(GMT-09:30) Marquesas Time (Pacific/Marquesas)'), (u'Pacific/Honolulu', u'(GMT-10:00) Hawaii-Aleutian Standard Time (Pacific/Honolulu)'), (u'Pacific/Niue', u'(GMT-11:00) Niue Time (Pacific/Niue)'), (u'Pacific/Pago_Pago', u'(GMT-11:00) Samoa Standard Time (Pacific/Pago_Pago)')]) # Field name made lowercase.
    recurrencetype = models.CharField(blank=True, max_length=40, verbose_name=u'Recurrence Type', db_column=u'RecurrenceType', choices=[(u'RecursDaily', u'Recurs Daily'), (u'RecursEveryWeekday', u'Recurs Every Weekday'), (u'RecursMonthly', u'Recurs Monthly'), (u'RecursMonthlyNth', u'Recurs Monthy Nth'), (u'RecursWeekly', u'Recurs Weekly'), (u'RecursYearly', u'Recurs Yearly'), (u'RecursYearlyNth', u'Recurs Yearly Nth')]) # Field name made lowercase.
    recurrenceinterval = models.IntegerField(null=True, verbose_name=u'Recurrence Interval', db_column=u'RecurrenceInterval', blank=True) # Field name made lowercase.
    recurrencedayofweekmask = models.IntegerField(null=True, verbose_name=u'Recurrence Day of Week Mask', db_column=u'RecurrenceDayOfWeekMask', blank=True) # Field name made lowercase.
    recurrencedayofmonth = models.IntegerField(null=True, verbose_name=u'Recurrence Day of Month', db_column=u'RecurrenceDayOfMonth', blank=True) # Field name made lowercase.
    recurrenceinstance = models.CharField(blank=True, max_length=40, verbose_name=u'Recurrence Instance', db_column=u'RecurrenceInstance', choices=[(u'First', u'1st'), (u'Second', u'2nd'), (u'Third', u'3rd'), (u'Fourth', u'4th'), (u'Last', u'last')]) # Field name made lowercase.
    recurrencemonthofyear = models.CharField(blank=True, max_length=40, verbose_name=u'Recurrence Month of Year', db_column=u'RecurrenceMonthOfYear', choices=[(u'January', u'January'), (u'February', u'February'), (u'March', u'March'), (u'April', u'April'), (u'May', u'May'), (u'June', u'June'), (u'July', u'July'), (u'August', u'August'), (u'September', u'September'), (u'October', u'October'), (u'November', u'November'), (u'December', u'December')]) # Field name made lowercase.
    recurrenceregeneratedtype = models.CharField(blank=True, max_length=40, verbose_name=u'Repeat This Task', db_column=u'RecurrenceRegeneratedType', choices=[(u'RecurrenceRegenerateAfterDueDate', u'After due date'), (u'RecurrenceRegenerateAfterToday', u'After date completed'), (u'RecurrenceRegenerated', u'(Task Closed)')]) # Field name made lowercase.
    x8x8_log__c = models.TextField(help_text=u'Log from 8x8. Field populated with call data.', verbose_name=u'8x8 Log', db_column=u'X8x8_Log__c', blank=True) # Field name made lowercase.
    call_answered_time__c = models.CharField(help_text=u'Time the call was answered by an agent.', max_length=50, verbose_name=u'Call Answered Time', db_column=u'Call_Answered_Time__c', blank=True) # Field name made lowercase.
    call_hangup_time__c = models.TextField(help_text=u'Time the call ended with the agent.', verbose_name=u'Call Hangup Time', db_column=u'Call_Hangup_Time__c', blank=True) # Field name made lowercase.
    call_notes__c = models.TextField(help_text=u'Notes regarding the outcome of the call.', verbose_name=u'Call Notes', db_column=u'Call_Notes__c', blank=True) # Field name made lowercase.
    channel_name__c = models.CharField(help_text=u'Name of the inbound or outbound channel or number dialed by customer.', max_length=100, verbose_name=u'Channel Name', db_column=u'Channel_Name__c', blank=True) # Field name made lowercase.
    queue_name__c = models.CharField(help_text=u'Queue that the inbound or outbound channel directed the caller to.', max_length=100, verbose_name=u'Queue Name', db_column=u'Queue_Name__c', blank=True) # Field name made lowercase.
    original_object_id__c = models.CharField(max_length=18, verbose_name=u'Original Object ID', db_column=u'Original_Object_ID__c', blank=True) # Field name made lowercase.
    transactionid__c = models.CharField(max_length=200, verbose_name=u'Transaction ID', blank=True)
    action__c = models.CharField(blank=True, max_length=255, verbose_name=u'Action', db_column=u'Action__c', choices=[(u'Called: No Contact', u'Called: No Contact'), (u'Contacted: Did not Quote', u'Contacted: Did not Quote'), (u'Contacted: Quoted but did not Sell', u'Contacted: Quoted but did not Sell'), (u'Do Not Call', u'Do Not Call'), (u'Medicaid Eligible', u'Medicaid Eligible'), (u'General Comment', u'General Comment'), (u'Not Interested', u'Not Interested'), (u'Application Completed', u'Application Completed'), (u'Application Incomplete', u'Application Incomplete'), (u'Called: Bad Phone #', u'Called: Bad Phone #'), (u'Contacted: Customer not ready to move forward', u'Contacted: Customer not ready to move forward'), (u'Lead generated through testing process', u'Lead generated through testing process'), (u'Prefers to Work Alone', u'Prefers to Work Alone'), (u'Has Coverage: Not looking to enroll at this time', u'Has Coverage: Not looking to enroll at this time'), (u'Pending HIXID from NHL', u'Pending HIXID from NHL')]) # Field name made lowercase.
    migrated__c = models.BooleanField(help_text=u'Was this record migrated from old tenant?', verbose_name=u'Migrated', db_column=u'Migrated__c') # Field name made lowercase.
    original_owner_name__c = models.CharField(max_length=150, verbose_name=u'Original Owner Name', db_column=u'Original_Owner_Name__c', blank=True) # Field name made lowercase.
    auto_generated__c = models.BooleanField(verbose_name=u'Auto Generated', db_column=u'Auto_Generated__c') # Field name made lowercase.
    current_carrier__c = models.CharField(db_column=u'Current_Carrier__c', choices=[(u'United', u'United'), (u'Sierra', u'Sierra'), (u'HPN', u'HPN'), (u'Coventry', u'Coventry'), (u'St Mary\u2019s', u'St Mary\u2019s'), (u'Aetna', u'Aetna'), (u'Assurant', u'Assurant')], max_length=255, blank=True, help_text=u'Use if action is Has Coverage: Not looking to enroll at this time.', verbose_name=u'Current Carrier') # Field name made lowercase.
    activity_type__c = models.CharField(db_column=u'Activity_Type__c', choices=[(u'Call', u'Call'), (u'Email', u'Email'), (u'Mail', u'Mail'), (u'On-Site', u'On-Site'), (u'SMS', u'SMS'), (u'Case Note', u'Case Note'), (u'Event / Grievance', u'Event / Grievance')], max_length=255, blank=True, help_text=u'Indicated the activity type used to interact with the member.', verbose_name=u'Activity Type') # Field name made lowercase.
    date_interest_expressed__c = models.DateField(help_text=u'Date that interest was expressed by a provider for engaging with NHC.', null=True, verbose_name=u'Date Interest Expressed', db_column=u'Date_Interest_Expressed__c', blank=True) # Field name made lowercase.
    program_contact_type__c = models.CharField(blank=True, max_length=255, verbose_name=u'Program Contact Type', db_column=u'Program_Contact_Type__c', choices=[(u'Asthma Program Initial Telephone Contact', u'Asthma Program Initial Telephone Contact'), (u'Asthma Program Follow-Up Telephone Contact', u'Asthma Program Follow-Up Telephone Contact'), (u'Diabetes Program Initial Telephone Contact', u'Diabetes Program Initial Telephone Contact'), (u'Diabetes Program Follow-Up Telephone Contact', u'Diabetes Program Follow-Up Telephone Contact')]) # Field name made lowercase.
    review_and_update_demographic_info__c = models.BooleanField(help_text=u'During the conversation did you review and update demographic information with the member?', verbose_name=u'Review and update demographic info', db_column=u'Review_and_update_demographic_info__c') # Field name made lowercase.
    review_and_update_practitioner_info__c = models.BooleanField(help_text=u'During the conversation was a review and update practitioner information performed?', verbose_name=u'Review and update practitioner info', db_column=u'Review_and_update_practitioner_info__c') # Field name made lowercase.
    asthma_affecting_work_school_home_etc__c = models.CharField(db_column=u'Asthma_affecting_work_school_home_etc__c', choices=[(u'1', u'1'), (u'2', u'2'), (u'3', u'3'), (u'4', u'4'), (u'5', u'5')], max_length=255, blank=True, help_text=u'In the past 4 weeks, how much of the time did your asthma keep you from getting as much done at work, school or home? The integer represents a five-point Likert Scale from \u201call of the time\u201d to \u201cnone of the time.\u201d', verbose_name=u'Asthma affecting work, school, home, etc') # Field name made lowercase.
    how_often__c = models.CharField(db_column=u'How_often__c', choices=[(u'1', u'1'), (u'2', u'2'), (u'3', u'3'), (u'4', u'4'), (u'5', u'5')], max_length=255, blank=True, help_text=u'During the past 4 weeks, how often has the member had shortness of breath?\r\nThe integer represents a five-point Likert Scale from \u201cmore than once a day\u201d to \u201cnot at all.\u201d', verbose_name=u'How often had shortness of breath?') # Field name made lowercase.
    asthma_symptoms_wake_you__c = models.CharField(db_column=u'Asthma_symptoms_wake_you__c', choices=[(u'1', u'1'), (u'2', u'2'), (u'3', u'3'), (u'4', u'4'), (u'5', u'5')], max_length=255, blank=True, help_text=u'During the past 4 weeks, how often did your asthma symptoms (wheezing, coughing, short-of-breath, chest tightness, or pain) wake you up at night or earlier than usual in the morning? Five-point Likert Scale from \u201c4 or more nights a week\u201d to \u201cnot at all"', verbose_name=u'Asthma symptoms wake you?') # Field name made lowercase.
    how_often_used_rescue_inhaler_or_meds__c = models.CharField(db_column=u'How_often_used_rescue_inhaler_or_meds__c', choices=[(u'1', u'1'), (u'2', u'2'), (u'3', u'3'), (u'4', u'4'), (u'5', u'5')], max_length=255, blank=True, help_text=u'During the past 4 weeks, how often have you used your rescue inhaler or nebulizer medication (such as albuterol)?\r\nThe integer represents a five-point Likert Scale from \u201c3 or more times per day\u201d to \u201cnot at all.\u201d', verbose_name=u'How often used rescue inhaler or meds?') # Field name made lowercase.
    rate_for_asthma_control_in_past_4_weeks__c = models.CharField(db_column=u'Rate_for_asthma_control_in_past_4_weeks__c', choices=[(u'1', u'1'), (u'2', u'2'), (u'3', u'3'), (u'4', u'4'), (u'5', u'5')], max_length=255, blank=True, help_text=u'How would you rate your asthma control during the past 4 weeks?\r\nThe integer represents a five-point Likert Scale from \u201cnot controlled at all\u201d to \u201ccompletely controlled.\u201d', verbose_name=u'Rate for asthma control in past 4 weeks?') # Field name made lowercase.
    iscloned__c = models.BooleanField(verbose_name=u'isCloned', db_column=u'isCloned__c') # Field name made lowercase.
    isvipaccount__c = models.BooleanField(verbose_name=u'isVIPAccount', db_column=u'isVIPAccount__c') # Field name made lowercase.
    cloned_from__c = models.CharField(max_length=20, verbose_name=u'Cloned From', db_column=u'Cloned_From__c', blank=True) # Field name made lowercase.
    clonecomments__c = models.CharField(max_length=50, verbose_name=u'cloneComments', db_column=u'cloneComments__c', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Task'
        verbose_name = 'Task'
        verbose_name_plural = 'Tasks'
        # keyPrefix = '00T'

class Taskfeed(models.Model):
    parentid = models.ForeignKey('Task', db_column=u'ParentId') # Field name made lowercase.
    type = models.CharField(db_column=u'Type', choices=[(u'TrackedChange', u'Tracked Change'), (u'UserStatus', u'User Status'), (u'TextPost', u'Text Post'), (u'AdvancedTextPost', u'Advanced Text Post'), (u'LinkPost', u'Link Post'), (u'ContentPost', u'Content Post'), (u'PollPost', u'Poll'), (u'RypplePost', u'Work.com Thanks'), (u'ProfileSkillPost', u'Profile Skill Post'), (u'DashboardComponentSnapshot', u'Dashboard Component Snapshot'), (u'ApprovalPost', u'Approval Post'), (u'CaseCommentPost', u'Case Comment Feed'), (u'ReplyPost', u'Reply Post'), (u'EmailMessageEvent', u'Email Message Feed'), (u'CallLogPost', u'Call Log Feed'), (u'ChangeStatusPost', u'Change Status Feed'), (u'AttachArticleEvent', u'Attached Article'), (u'MilestoneEvent', u'Milestone Event'), (u'ActivityEvent', u'Activity Change'), (u'ChatTranscriptPost', u'Chat Transcript Post'), (u'CollaborationGroupCreated', u'Collaboration Group Created'), (u'CollaborationGroupUnarchived', u'Collaboration Group Reactivated'), (u'SocialPost', u'Social Post'), (u'QuestionPost', u'Question Post'), (u'FacebookPost', u'Facebook Post'), (u'BasicTemplateFeedItem', u'Basic Template Post'), (u'CreateRecordEvent', u'Created Record'), (u'CanvasPost', u'Canvas'), (u'AnnouncementPost', u'a')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Feed Item Type') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    commentcount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Comment Count', db_column=u'CommentCount') # Field name made lowercase.
    likecount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Like Count', db_column=u'LikeCount') # Field name made lowercase.
    title = models.CharField(max_length=255, verbose_name=u'Title', sf_read_only=models.READ_ONLY, db_column=u'Title', blank=True) # Field name made lowercase.
    body = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Body', db_column=u'Body', blank=True) # Field name made lowercase.
    linkurl = models.URLField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Link Url', db_column=u'LinkUrl', blank=True) # Field name made lowercase.
    relatedrecordid = models.ForeignKey('Contentversion', null=True, db_column=u'RelatedRecordId', blank=True) # Field name made lowercase.
    contentdata = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Content Data', db_column=u'ContentData', blank=True) # Field name made lowercase.
    contentfilename = models.CharField(max_length=255, verbose_name=u'Content File Name', sf_read_only=models.READ_ONLY, db_column=u'ContentFileName', blank=True) # Field name made lowercase.
    contentdescription = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Content Description', db_column=u'ContentDescription', blank=True) # Field name made lowercase.
    contenttype = models.CharField(max_length=120, verbose_name=u'Content File Type', sf_read_only=models.READ_ONLY, db_column=u'ContentType', blank=True) # Field name made lowercase.
    contentsize = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Content Size', db_column=u'ContentSize', blank=True) # Field name made lowercase.
    insertedbyid = models.ForeignKey('User', null=True, db_column=u'InsertedById', blank=True) # Field name made lowercase.
    networkscope = models.CharField(db_column=u'NetworkScope', choices=[(u'AllNetworks', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Network Scope') # Field name made lowercase.
    visibility = models.CharField(db_column=u'Visibility', choices=[(u'AllUsers', None), (u'InternalUsers', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Visibility') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'TaskFeed'
        verbose_name = 'Task Feed'
        verbose_name_plural = 'Task Feed'
        # keyPrefix = 'None'

class Taskpriority(models.Model):
    masterlabel = models.CharField(max_length=255, verbose_name=u'Master Label', sf_read_only=models.READ_ONLY, db_column=u'MasterLabel', blank=True) # Field name made lowercase.
    sortorder = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Sort Order', db_column=u'SortOrder', blank=True) # Field name made lowercase.
    isdefault = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Is Default', db_column=u'IsDefault') # Field name made lowercase.
    ishighpriority = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Is High Priority', db_column=u'IsHighPriority') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'TaskPriority'
        verbose_name = 'Task Priority Value'
        verbose_name_plural = 'Task Priority Value'
        # keyPrefix = 'None'

class Taskrelation(models.Model):
    relationid = models.ForeignKey('Account', db_column=u'RelationId') # Field name made lowercase.
    taskid = models.ForeignKey('Task', db_column=u'TaskId') # Field name made lowercase.
    iswhat = models.BooleanField(sf_read_only=models.NOT_UPDATEABLE, verbose_name=u'Is What', db_column=u'IsWhat') # Field name made lowercase.
    accountid = models.ForeignKey('Account', null=True, db_column=u'AccountId', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'TaskRelation'
        verbose_name = 'Task Relation'
        verbose_name_plural = 'Task Relations'
        # keyPrefix = '0RT'

class Taskstatus(models.Model):
    masterlabel = models.CharField(max_length=255, verbose_name=u'Master Label', sf_read_only=models.READ_ONLY, db_column=u'MasterLabel', blank=True) # Field name made lowercase.
    sortorder = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Sort Order', db_column=u'SortOrder', blank=True) # Field name made lowercase.
    isdefault = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Is Default', db_column=u'IsDefault') # Field name made lowercase.
    isclosed = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Is Closed', db_column=u'IsClosed') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'TaskStatus'
        verbose_name = 'Task Status Value'
        verbose_name_plural = 'Task Status Value'
        # keyPrefix = 'None'

class Taskwhorelation(models.Model):
    relationid = models.ForeignKey('Contact', null=True, db_column=u'RelationId', blank=True) # Field name made lowercase.
    taskid = models.ForeignKey('Task', null=True, db_column=u'TaskId', blank=True) # Field name made lowercase.
    accountid = models.ForeignKey('Account', null=True, db_column=u'AccountId', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    type = models.CharField(max_length=50, verbose_name=u'Type', sf_read_only=models.READ_ONLY, db_column=u'Type', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'TaskWhoRelation'
        verbose_name = 'Task Who Relation'
        verbose_name_plural = 'Task Who Relations'
        # keyPrefix = 'None'

class Tenantusageentitlement(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    resourcegroupkey = models.CharField(max_length=120, verbose_name=u'Resource Group Key', sf_read_only=models.READ_ONLY, db_column=u'ResourceGroupKey') # Field name made lowercase.
    setting = models.CharField(max_length=120, verbose_name=u'Setting', sf_read_only=models.READ_ONLY, db_column=u'Setting') # Field name made lowercase.
    startdate = models.DateField(sf_read_only=models.READ_ONLY, verbose_name=u'Start Date', db_column=u'StartDate') # Field name made lowercase.
    enddate = models.DateField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'End Date', db_column=u'EndDate', blank=True) # Field name made lowercase.
    currentamountallowed = models.DecimalField(sf_read_only=models.READ_ONLY, verbose_name=u'Current Amount Allowed', max_digits=18, db_column=u'CurrentAmountAllowed', decimal_places=0) # Field name made lowercase.
    frequency = models.CharField(db_column=u'Frequency', choices=[(u'Weekly', u'Weekly'), (u'Fortnightly', u'Fortnightly'), (u'Monthly', u'Monthly'), (u'Once', u'Once'), (u'Quarterly', u'Quarterly'), (u'Yearly', u'Yearly')], max_length=255, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Frequency') # Field name made lowercase.
    ispersistentresource = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Is Persistent Resource', db_column=u'IsPersistentResource') # Field name made lowercase.
    hasrollover = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Has Rollover', db_column=u'HasRollover') # Field name made lowercase.
    overagegrace = models.DecimalField(decimal_places=2, db_column=u'OverageGrace', sf_read_only=models.READ_ONLY, max_digits=5, blank=True, null=True, verbose_name=u'Overage Grace') # Field name made lowercase.
    amountused = models.DecimalField(decimal_places=0, db_column=u'AmountUsed', sf_read_only=models.READ_ONLY, max_digits=18, blank=True, null=True, verbose_name=u'Amount Used') # Field name made lowercase.
    usagedate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Usage Date', db_column=u'UsageDate', blank=True) # Field name made lowercase.
    masterlabel = models.CharField(max_length=255, verbose_name=u'Setting Label', sf_read_only=models.READ_ONLY, db_column=u'MasterLabel', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'TenantUsageEntitlement'
        verbose_name = 'Tenant Usage Entitlement'
        verbose_name_plural = 'Tenant Usage Entitlements'
        # keyPrefix = '0UT'

class Topic(models.Model):
    networkid = models.ForeignKey('Network', null=True, db_column=u'NetworkId', blank=True) # Field name made lowercase.
    name = models.CharField(max_length=99, verbose_name=u'Name', db_column=u'Name') # Field name made lowercase.
    description = models.CharField(max_length=1000, verbose_name=u'Description', db_column=u'Description', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    talkingabout = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Talking About', db_column=u'TalkingAbout') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Topic'
        verbose_name = 'Topic'
        verbose_name_plural = 'Topics'
        # keyPrefix = '0TO'

class Topicassignment(models.Model):
    networkid = models.ForeignKey('Network', null=True, db_column=u'NetworkId', blank=True) # Field name made lowercase.
    topicid = models.ForeignKey('Topic', db_column=u'TopicId') # Field name made lowercase.
    entityid = models.ForeignKey('Account', db_column=u'EntityId') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'TopicAssignment'
        verbose_name = 'Record'
        verbose_name_plural = 'Topic Assignments'
        # keyPrefix = '0FT'

class Topicfeed(models.Model):
    parentid = models.ForeignKey('Topic', db_column=u'ParentId') # Field name made lowercase.
    type = models.CharField(db_column=u'Type', choices=[(u'TrackedChange', u'Tracked Change'), (u'UserStatus', u'User Status'), (u'TextPost', u'Text Post'), (u'AdvancedTextPost', u'Advanced Text Post'), (u'LinkPost', u'Link Post'), (u'ContentPost', u'Content Post'), (u'PollPost', u'Poll'), (u'RypplePost', u'Work.com Thanks'), (u'ProfileSkillPost', u'Profile Skill Post'), (u'DashboardComponentSnapshot', u'Dashboard Component Snapshot'), (u'ApprovalPost', u'Approval Post'), (u'CaseCommentPost', u'Case Comment Feed'), (u'ReplyPost', u'Reply Post'), (u'EmailMessageEvent', u'Email Message Feed'), (u'CallLogPost', u'Call Log Feed'), (u'ChangeStatusPost', u'Change Status Feed'), (u'AttachArticleEvent', u'Attached Article'), (u'MilestoneEvent', u'Milestone Event'), (u'ActivityEvent', u'Activity Change'), (u'ChatTranscriptPost', u'Chat Transcript Post'), (u'CollaborationGroupCreated', u'Collaboration Group Created'), (u'CollaborationGroupUnarchived', u'Collaboration Group Reactivated'), (u'SocialPost', u'Social Post'), (u'QuestionPost', u'Question Post'), (u'FacebookPost', u'Facebook Post'), (u'BasicTemplateFeedItem', u'Basic Template Post'), (u'CreateRecordEvent', u'Created Record'), (u'CanvasPost', u'Canvas'), (u'AnnouncementPost', u'a')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Feed Item Type') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    commentcount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Comment Count', db_column=u'CommentCount') # Field name made lowercase.
    likecount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Like Count', db_column=u'LikeCount') # Field name made lowercase.
    title = models.CharField(max_length=255, verbose_name=u'Title', sf_read_only=models.READ_ONLY, db_column=u'Title', blank=True) # Field name made lowercase.
    body = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Body', db_column=u'Body', blank=True) # Field name made lowercase.
    linkurl = models.URLField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Link Url', db_column=u'LinkUrl', blank=True) # Field name made lowercase.
    relatedrecordid = models.ForeignKey('Contentversion', null=True, db_column=u'RelatedRecordId', blank=True) # Field name made lowercase.
    contentdata = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Content Data', db_column=u'ContentData', blank=True) # Field name made lowercase.
    contentfilename = models.CharField(max_length=255, verbose_name=u'Content File Name', sf_read_only=models.READ_ONLY, db_column=u'ContentFileName', blank=True) # Field name made lowercase.
    contentdescription = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Content Description', db_column=u'ContentDescription', blank=True) # Field name made lowercase.
    contenttype = models.CharField(max_length=120, verbose_name=u'Content File Type', sf_read_only=models.READ_ONLY, db_column=u'ContentType', blank=True) # Field name made lowercase.
    contentsize = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Content Size', db_column=u'ContentSize', blank=True) # Field name made lowercase.
    insertedbyid = models.ForeignKey('User', null=True, db_column=u'InsertedById', blank=True) # Field name made lowercase.
    networkscope = models.CharField(db_column=u'NetworkScope', choices=[(u'AllNetworks', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Network Scope') # Field name made lowercase.
    visibility = models.CharField(db_column=u'Visibility', choices=[(u'AllUsers', None), (u'InternalUsers', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Visibility') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'TopicFeed'
        verbose_name = 'Topic Feed'
        verbose_name_plural = 'Topic Feed'
        # keyPrefix = 'None'

class Undecidedeventrelation(models.Model):
    relationid = models.ForeignKey('Contact', null=True, db_column=u'RelationId', blank=True) # Field name made lowercase.
    eventid = models.ForeignKey('Event', null=True, db_column=u'EventId', blank=True) # Field name made lowercase.
    accountid = models.ForeignKey('Account', null=True, db_column=u'AccountId', blank=True) # Field name made lowercase.
    respondeddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Response Date', db_column=u'RespondedDate', blank=True) # Field name made lowercase.
    response = models.CharField(max_length=255, verbose_name=u'Response', sf_read_only=models.READ_ONLY, db_column=u'Response', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    type = models.CharField(max_length=50, verbose_name=u'Type', sf_read_only=models.READ_ONLY, db_column=u'Type', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'UndecidedEventRelation'
        verbose_name = 'Undecided Event Relation'
        verbose_name_plural = 'Undecided Event Relations'
        # keyPrefix = 'None'

class User(models.Model):
    username = models.CharField(max_length=80, verbose_name=u'Username', db_column=u'Username') # Field name made lowercase.
    lastname = models.CharField(max_length=80, verbose_name=u'Last Name', db_column=u'LastName') # Field name made lowercase.
    firstname = models.CharField(max_length=40, verbose_name=u'First Name', db_column=u'FirstName', blank=True) # Field name made lowercase.
    name = models.CharField(max_length=121, verbose_name=u'Full Name', sf_read_only=models.READ_ONLY, db_column=u'Name') # Field name made lowercase.
    companyname = models.CharField(max_length=80, verbose_name=u'Company Name', db_column=u'CompanyName', blank=True) # Field name made lowercase.
    division = models.CharField(max_length=80, verbose_name=u'Division', db_column=u'Division', blank=True) # Field name made lowercase.
    department = models.CharField(max_length=80, verbose_name=u'Department', db_column=u'Department', blank=True) # Field name made lowercase.
    title = models.CharField(max_length=80, verbose_name=u'Title', db_column=u'Title', blank=True) # Field name made lowercase.
    street = models.TextField(verbose_name=u'Street', db_column=u'Street', blank=True) # Field name made lowercase.
    city = models.CharField(max_length=40, verbose_name=u'City', db_column=u'City', blank=True) # Field name made lowercase.
    state = models.CharField(max_length=80, verbose_name=u'State/Province', db_column=u'State', blank=True) # Field name made lowercase.
    postalcode = models.CharField(max_length=20, verbose_name=u'Zip/Postal Code', db_column=u'PostalCode', blank=True) # Field name made lowercase.
    country = models.CharField(max_length=80, verbose_name=u'Country', db_column=u'Country', blank=True) # Field name made lowercase.
    latitude = models.DecimalField(db_column=u'Latitude', decimal_places=15, max_digits=18, blank=True, null=True, verbose_name=u'Latitude') # Field name made lowercase.
    longitude = models.DecimalField(db_column=u'Longitude', decimal_places=15, max_digits=18, blank=True, null=True, verbose_name=u'Longitude') # Field name made lowercase.
    address = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Address', db_column=u'Address', blank=True) # Field name made lowercase. This field type is a guess.
    email = models.EmailField(verbose_name=u'E-mail', db_column=u'Email') # Field name made lowercase.
    emailpreferencesautobcc = models.BooleanField(verbose_name=u'AutoBcc', db_column=u'EmailPreferencesAutoBcc') # Field name made lowercase.
    emailpreferencesautobccstayintouch = models.BooleanField(verbose_name=u'AutoBccStayInTouch', db_column=u'EmailPreferencesAutoBccStayInTouch') # Field name made lowercase.
    emailpreferencesstayintouchreminder = models.BooleanField(verbose_name=u'StayInTouchReminder', db_column=u'EmailPreferencesStayInTouchReminder') # Field name made lowercase.
    senderemail = models.EmailField(null=True, verbose_name=u'Email Sender Address', db_column=u'SenderEmail', blank=True) # Field name made lowercase.
    sendername = models.CharField(max_length=80, verbose_name=u'Email Sender Name', db_column=u'SenderName', blank=True) # Field name made lowercase.
    signature = models.CharField(max_length=1333, verbose_name=u'Email Signature', db_column=u'Signature', blank=True) # Field name made lowercase.
    stayintouchsubject = models.CharField(max_length=80, verbose_name=u'Stay-in-Touch Email Subject', db_column=u'StayInTouchSubject', blank=True) # Field name made lowercase.
    stayintouchsignature = models.CharField(max_length=512, verbose_name=u'Stay-in-Touch Email Signature', db_column=u'StayInTouchSignature', blank=True) # Field name made lowercase.
    stayintouchnote = models.CharField(max_length=512, verbose_name=u'Stay-in-Touch Email Note', db_column=u'StayInTouchNote', blank=True) # Field name made lowercase.
    phone = models.CharField(max_length=40, verbose_name=u'Phone', db_column=u'Phone', blank=True) # Field name made lowercase.
    fax = models.CharField(max_length=40, verbose_name=u'Fax', db_column=u'Fax', blank=True) # Field name made lowercase.
    mobilephone = models.CharField(max_length=40, verbose_name=u'Cell', db_column=u'MobilePhone', blank=True) # Field name made lowercase.
    alias = models.CharField(max_length=8, verbose_name=u'Alias', db_column=u'Alias') # Field name made lowercase.
    communitynickname = models.CharField(max_length=40, verbose_name=u'Nickname', db_column=u'CommunityNickname') # Field name made lowercase.
    isbadged = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'User Photo has a badge overlay', db_column=u'IsBadged') # Field name made lowercase.
    isactive = models.BooleanField(verbose_name=u'Active', db_column=u'IsActive') # Field name made lowercase.
    timezonesidkey = models.CharField(max_length=40, verbose_name=u'Time Zone', db_column=u'TimeZoneSidKey', choices=[(u'Pacific/Kiritimati', u'(GMT+14:00) Line Islands Time (Pacific/Kiritimati)'), (u'Pacific/Chatham', u'(GMT+13:45) Chatham Daylight Time (Pacific/Chatham)'), (u'Pacific/Auckland', u'(GMT+13:00) New Zealand Daylight Time (Pacific/Auckland)'), (u'Pacific/Enderbury', u'(GMT+13:00) Phoenix Islands Time (Pacific/Enderbury)'), (u'Pacific/Fiji', u'(GMT+13:00) Fiji Summer Time (Pacific/Fiji)'), (u'Pacific/Tongatapu', u'(GMT+13:00) Tonga Time (Pacific/Tongatapu)'), (u'Asia/Kamchatka', u'(GMT+12:00) Magadan Time (Asia/Kamchatka)'), (u'Pacific/Norfolk', u'(GMT+11:30) Norfolk Islands Time (Pacific/Norfolk)'), (u'Australia/Lord_Howe', u'(GMT+11:00) Lord Howe Daylight Time (Australia/Lord_Howe)'), (u'Australia/Sydney', u'(GMT+11:00) Australian Eastern Daylight Time (Australia/Sydney)'), (u'Pacific/Guadalcanal', u'(GMT+11:00) Solomon Islands Time (Pacific/Guadalcanal)'), (u'Australia/Adelaide', u'(GMT+10:30) Australian Central Daylight Time (Australia/Adelaide)'), (u'Australia/Brisbane', u'(GMT+10:00) Australian Eastern Standard Time (Australia/Brisbane)'), (u'Australia/Darwin', u'(GMT+09:30) Australian Central Standard Time (Australia/Darwin)'), (u'Asia/Seoul', u'(GMT+09:00) Korean Standard Time (Asia/Seoul)'), (u'Asia/Tokyo', u'(GMT+09:00) Japan Standard Time (Asia/Tokyo)'), (u'Asia/Hong_Kong', u'(GMT+08:00) Hong Kong Time (Asia/Hong_Kong)'), (u'Asia/Kuala_Lumpur', u'(GMT+08:00) Malaysia Time (Asia/Kuala_Lumpur)'), (u'Asia/Manila', u'(GMT+08:00) Philippine Time (Asia/Manila)'), (u'Asia/Shanghai', u'(GMT+08:00) China Standard Time (Asia/Shanghai)'), (u'Asia/Singapore', u'(GMT+08:00) Singapore Standard Time (Asia/Singapore)'), (u'Asia/Taipei', u'(GMT+08:00) Taipei Standard Time (Asia/Taipei)'), (u'Australia/Perth', u'(GMT+08:00) Australian Western Standard Time (Australia/Perth)'), (u'Asia/Bangkok', u'(GMT+07:00) Indochina Time (Asia/Bangkok)'), (u'Asia/Ho_Chi_Minh', u'(GMT+07:00) Indochina Time (Asia/Ho_Chi_Minh)'), (u'Asia/Jakarta', u'(GMT+07:00) Western Indonesia Time (Asia/Jakarta)'), (u'Asia/Rangoon', u'(GMT+06:30) Myanmar Time (Asia/Rangoon)'), (u'Asia/Dhaka', u'(GMT+06:00) Bangladesh Time (Asia/Dhaka)'), (u'Asia/Yekaterinburg', u'(GMT+06:00) Yekaterinburg Time (Asia/Yekaterinburg)'), (u'Asia/Kathmandu', u'(GMT+05:45) Nepal Time (Asia/Kathmandu)'), (u'Asia/Colombo', u'(GMT+05:30) India Standard Time (Asia/Colombo)'), (u'Asia/Kolkata', u'(GMT+05:30) India Standard Time (Asia/Kolkata)'), (u'Asia/Baku', u'(GMT+05:00) Azerbaijan Summer Time (Asia/Baku)'), (u'Asia/Karachi', u'(GMT+05:00) Pakistan Time (Asia/Karachi)'), (u'Asia/Tashkent', u'(GMT+05:00) Uzbekistan Time (Asia/Tashkent)'), (u'Asia/Kabul', u'(GMT+04:30) Afghanistan Time (Asia/Kabul)'), (u'Asia/Dubai', u'(GMT+04:00) Gulf Standard Time (Asia/Dubai)'), (u'Asia/Tbilisi', u'(GMT+04:00) Georgia Time (Asia/Tbilisi)'), (u'Asia/Yerevan', u'(GMT+04:00) Armenia Time (Asia/Yerevan)'), (u'Europe/Moscow', u'(GMT+04:00) Moscow Standard Time (Europe/Moscow)'), (u'Asia/Tehran', u'(GMT+03:30) Iran Standard Time (Asia/Tehran)'), (u'Africa/Nairobi', u'(GMT+03:00) East Africa Time (Africa/Nairobi)'), (u'Asia/Baghdad', u'(GMT+03:00) Arabian Standard Time (Asia/Baghdad)'), (u'Asia/Beirut', u'(GMT+03:00) Eastern European Summer Time (Asia/Beirut)'), (u'Asia/Jerusalem', u'(GMT+03:00) Israel Daylight Time (Asia/Jerusalem)'), (u'Asia/Kuwait', u'(GMT+03:00) Arabian Standard Time (Asia/Kuwait)'), (u'Asia/Riyadh', u'(GMT+03:00) Arabian Standard Time (Asia/Riyadh)'), (u'Europe/Athens', u'(GMT+03:00) Eastern European Summer Time (Europe/Athens)'), (u'Europe/Bucharest', u'(GMT+03:00) Eastern European Summer Time (Europe/Bucharest)'), (u'Europe/Helsinki', u'(GMT+03:00) Eastern European Summer Time (Europe/Helsinki)'), (u'Europe/Istanbul', u'(GMT+03:00) Eastern European Summer Time (Europe/Istanbul)'), (u'Europe/Minsk', u'(GMT+03:00) Further-eastern European Time (Europe/Minsk)'), (u'Africa/Cairo', u'(GMT+02:00) Eastern European Time (Africa/Cairo)'), (u'Africa/Johannesburg', u'(GMT+02:00) South Africa Standard Time (Africa/Johannesburg)'), (u'Europe/Amsterdam', u'(GMT+02:00) Central European Summer Time (Europe/Amsterdam)'), (u'Europe/Berlin', u'(GMT+02:00) Central European Summer Time (Europe/Berlin)'), (u'Europe/Brussels', u'(GMT+02:00) Central European Summer Time (Europe/Brussels)'), (u'Europe/Paris', u'(GMT+02:00) Central European Summer Time (Europe/Paris)'), (u'Europe/Prague', u'(GMT+02:00) Central European Summer Time (Europe/Prague)'), (u'Europe/Rome', u'(GMT+02:00) Central European Summer Time (Europe/Rome)'), (u'Africa/Algiers', u'(GMT+01:00) Central European Time (Africa/Algiers)'), (u'Europe/Dublin', u'(GMT+01:00) Irish Summer Time (Europe/Dublin)'), (u'Europe/Lisbon', u'(GMT+01:00) Western European Summer Time (Europe/Lisbon)'), (u'Europe/London', u'(GMT+01:00) British Summer Time (Europe/London)'), (u'Africa/Casablanca', u'(GMT+00:00) Western European Time (Africa/Casablanca)'), (u'America/Scoresbysund', u'(GMT+00:00) East Greenland Summer Time (America/Scoresbysund)'), (u'Atlantic/Azores', u'(GMT+00:00) Azores Summer Time (Atlantic/Azores)'), (u'GMT', u'(GMT+00:00) Greenwich Mean Time (GMT)'), (u'Atlantic/Cape_Verde', u'(GMT-01:00) Cape Verde Time (Atlantic/Cape_Verde)'), (u'America/Sao_Paulo', u'(GMT-02:00) Brasilia Summer Time (America/Sao_Paulo)'), (u'Atlantic/South_Georgia', u'(GMT-02:00) South Georgia Time (Atlantic/South_Georgia)'), (u'America/St_Johns', u'(GMT-02:30) Newfoundland Daylight Time (America/St_Johns)'), (u'America/Argentina/Buenos_Aires', u'(GMT-03:00) Argentina Time (America/Argentina/Buenos_Aires)'), (u'America/Halifax', u'(GMT-03:00) Atlantic Daylight Time (America/Halifax)'), (u'America/Santiago', u'(GMT-03:00) Chile Summer Time (America/Santiago)'), (u'Atlantic/Bermuda', u'(GMT-03:00) Atlantic Daylight Time (Atlantic/Bermuda)'), (u'America/Indiana/Indianapolis', u'(GMT-04:00) Eastern Daylight Time (America/Indiana/Indianapolis)'), (u'America/New_York', u'(GMT-04:00) Eastern Daylight Time (America/New_York)'), (u'America/Puerto_Rico', u'(GMT-04:00) Atlantic Standard Time (America/Puerto_Rico)'), (u'America/Caracas', u'(GMT-04:30) Venezuela Time (America/Caracas)'), (u'America/Bogota', u'(GMT-05:00) Colombia Time (America/Bogota)'), (u'America/Chicago', u'(GMT-05:00) Central Daylight Time (America/Chicago)'), (u'America/Lima', u'(GMT-05:00) Peru Time (America/Lima)'), (u'America/Mexico_City', u'(GMT-05:00) Central Daylight Time (America/Mexico_City)'), (u'America/Panama', u'(GMT-05:00) Eastern Standard Time (America/Panama)'), (u'America/Denver', u'(GMT-06:00) Mountain Daylight Time (America/Denver)'), (u'America/El_Salvador', u'(GMT-06:00) Central Standard Time (America/El_Salvador)'), (u'America/Mazatlan', u'(GMT-06:00) Mountain Daylight Time (America/Mazatlan)'), (u'America/Los_Angeles', u'(GMT-07:00) Pacific Daylight Time (America/Los_Angeles)'), (u'America/Phoenix', u'(GMT-07:00) Mountain Standard Time (America/Phoenix)'), (u'America/Tijuana', u'(GMT-07:00) Pacific Daylight Time (America/Tijuana)'), (u'America/Anchorage', u'(GMT-08:00) Alaska Daylight Time (America/Anchorage)'), (u'Pacific/Pitcairn', u'(GMT-08:00) Pitcairn Time (Pacific/Pitcairn)'), (u'America/Adak', u'(GMT-09:00) Hawaii-Aleutian Standard Time (America/Adak)'), (u'Pacific/Gambier', u'(GMT-09:00) Gambier Time (Pacific/Gambier)'), (u'Pacific/Marquesas', u'(GMT-09:30) Marquesas Time (Pacific/Marquesas)'), (u'Pacific/Honolulu', u'(GMT-10:00) Hawaii-Aleutian Standard Time (Pacific/Honolulu)'), (u'Pacific/Niue', u'(GMT-11:00) Niue Time (Pacific/Niue)'), (u'Pacific/Pago_Pago', u'(GMT-11:00) Samoa Standard Time (Pacific/Pago_Pago)')]) # Field name made lowercase.
    userroleid = models.ForeignKey('Userrole', null=True, db_column=u'UserRoleId', blank=True) # Field name made lowercase.
    localesidkey = models.CharField(max_length=40, verbose_name=u'Locale', db_column=u'LocaleSidKey', choices=[(u'sq_AL', u'Albanian (Albania)'), (u'ar_BH', u'Arabic (Bahrain)'), (u'ar_EG', u'Arabic (Egypt)'), (u'ar_JO', u'Arabic (Jordan)'), (u'ar_KW', u'Arabic (Kuwait)'), (u'ar_LB', u'Arabic (Lebanon)'), (u'ar_QA', u'Arabic (Qatar)'), (u'ar_SA', u'Arabic (Saudi Arabia)'), (u'ar_AE', u'Arabic (United Arab Emirates)'), (u'hy_AM', u'Armenian (Armenia)'), (u'az_AZ', u'Azerbaijani (Azerbaijan)'), (u'eu_ES', u'Basque (Spain)'), (u'be_BY', u'Belarusian (Belarus)'), (u'bn_BD', u'Bengali (Bangladesh)'), (u'bs_BA', u'Bosnian (Bosnia and Herzegovina)'), (u'bg_BG', u'Bulgarian (Bulgaria)'), (u'ca_ES', u'Catalan (Spain)'), (u'zh_CN_PINYIN', u'Chinese (China, Pinyin Ordering)'), (u'zh_CN_STROKE', u'Chinese (China, Stroke Ordering)'), (u'zh_CN', u'Chinese (China)'), (u'zh_HK_STROKE', u'Chinese (Hong Kong SAR China, Stroke Ordering)'), (u'zh_HK', u'Chinese (Hong Kong SAR China)'), (u'zh_MO', u'Chinese (Macau SAR China)'), (u'zh_SG', u'Chinese (Singapore)'), (u'zh_TW_STROKE', u'Chinese (Taiwan, Stroke Ordering)'), (u'zh_TW', u'Chinese (Taiwan)'), (u'hr_HR', u'Croatian (Croatia)'), (u'cs_CZ', u'Czech (Czech Republic)'), (u'da_DK', u'Danish (Denmark)'), (u'nl_BE', u'Dutch (Belgium)'), (u'nl_NL', u'Dutch (Netherlands)'), (u'nl_SR', u'Dutch (Suriname)'), (u'en_AU', u'English (Australia)'), (u'en_BB', u'English (Barbados)'), (u'en_BM', u'English (Bermuda)'), (u'en_CA', u'English (Canada)'), (u'en_GH', u'English (Ghana)'), (u'en_IN', u'English (India)'), (u'en_ID', u'English (Indonesia)'), (u'en_IE', u'English (Ireland)'), (u'en_MY', u'English (Malaysia)'), (u'en_NZ', u'English (New Zealand)'), (u'en_NG', u'English (Nigeria)'), (u'en_PK', u'English (Pakistan)'), (u'en_PH', u'English (Philippines)'), (u'en_SG', u'English (Singapore)'), (u'en_ZA', u'English (South Africa)'), (u'en_GB', u'English (United Kingdom)'), (u'en_US', u'English (United States)'), (u'et_EE', u'Estonian (Estonia)'), (u'fi_FI', u'Finnish (Finland)'), (u'fr_BE', u'French (Belgium)'), (u'fr_CA', u'French (Canada)'), (u'fr_FR', u'French (France)'), (u'fr_LU', u'French (Luxembourg)'), (u'fr_MC', u'French (Monaco)'), (u'fr_CH', u'French (Switzerland)'), (u'ka_GE', u'Georgian (Georgia)'), (u'de_AT', u'German (Austria)'), (u'de_DE', u'German (Germany)'), (u'de_LU', u'German (Luxembourg)'), (u'de_CH', u'German (Switzerland)'), (u'el_GR', u'Greek (Greece)'), (u'iw_IL', u'Hebrew (Israel)'), (u'hi_IN', u'Hindi (India)'), (u'hu_HU', u'Hungarian (Hungary)'), (u'is_IS', u'Icelandic (Iceland)'), (u'in_ID', u'Indonesian (Indonesia)'), (u'ga_IE', u'Irish (Ireland)'), (u'it_IT', u'Italian (Italy)'), (u'it_CH', u'Italian (Switzerland)'), (u'ja_JP', u'Japanese (Japan)'), (u'kk_KZ', u'Kazakh (Kazakhstan)'), (u'km_KH', u'Khmer (Cambodia)'), (u'ky_KG', u'Kirghiz (Kyrgyzstan)'), (u'ko_KR', u'Korean (South Korea)'), (u'lv_LV', u'Latvian (Latvia)'), (u'lt_LT', u'Lithuanian (Lithuania)'), (u'lb_LU', u'Luxembourgish (Luxembourg)'), (u'mk_MK', u'Macedonian (Macedonia)'), (u'ms_BN', u'Malay (Brunei)'), (u'ms_MY', u'Malay (Malaysia)'), (u'mt_MT', u'Maltese (Malta)'), (u'sh_ME', u'Montenegrin (Montenegro)'), (u'no_NO', u'Norwegian (Norway)'), (u'pl_PL', u'Polish (Poland)'), (u'pt_AO', u'Portuguese (Angola)'), (u'pt_BR', u'Portuguese (Brazil)'), (u'pt_PT', u'Portuguese (Portugal)'), (u'ro_MD', u'Romanian (Moldova)'), (u'ro_RO', u'Romanian (Romania)'), (u'rm_CH', u'Romansh (Switzerland)'), (u'ru_RU', u'Russian (Russia)'), (u'sr_BA', u'Serbian (Bosnia and Herzegovina)'), (u'sh_BA', u'Serbian (Latin) (Bosnia and Herzegovina)'), (u'sh_CS', u'Serbian (Latin) (Serbia)'), (u'sr_CS', u'Serbian (Serbia and Montenegro)'), (u'sk_SK', u'Slovak (Slovakia)'), (u'sl_SI', u'Slovenian (Slovenia)'), (u'es_AR', u'Spanish (Argentina)'), (u'es_BO', u'Spanish (Bolivia)'), (u'es_CL', u'Spanish (Chile)'), (u'es_CO', u'Spanish (Colombia)'), (u'es_CR', u'Spanish (Costa Rica)'), (u'es_DO', u'Spanish (Dominican Republic)'), (u'es_EC', u'Spanish (Ecuador)'), (u'es_SV', u'Spanish (El Salvador)'), (u'es_GT', u'Spanish (Guatemala)'), (u'es_HN', u'Spanish (Honduras)'), (u'es_MX', u'Spanish (Mexico)'), (u'es_PA', u'Spanish (Panama)'), (u'es_PY', u'Spanish (Paraguay)'), (u'es_PE', u'Spanish (Peru)'), (u'es_PR', u'Spanish (Puerto Rico)'), (u'es_ES', u'Spanish (Spain)'), (u'es_UY', u'Spanish (Uruguay)'), (u'es_VE', u'Spanish (Venezuela)'), (u'sv_SE', u'Swedish (Sweden)'), (u'tl_PH', u'Tagalog (Philippines)'), (u'tg_TJ', u'Tajik (Tajikistan)'), (u'ta_IN', u'Tamil (India)'), (u'th_TH', u'Thai (Thailand)'), (u'tr_TR', u'Turkish (Turkey)'), (u'uk_UA', u'Ukrainian (Ukraine)'), (u'ur_PK', u'Urdu (Pakistan)'), (u'vi_VN', u'Vietnamese (Vietnam)'), (u'cy_GB', u'Welsh (United Kingdom)')]) # Field name made lowercase.
    receivesinfoemails = models.BooleanField(verbose_name=u'Info Emails', db_column=u'ReceivesInfoEmails') # Field name made lowercase.
    receivesadmininfoemails = models.BooleanField(verbose_name=u'Admin Info Emails', db_column=u'ReceivesAdminInfoEmails') # Field name made lowercase.
    emailencodingkey = models.CharField(max_length=40, verbose_name=u'Email Encoding', db_column=u'EmailEncodingKey', choices=[(u'UTF-8', u'Unicode (UTF-8)'), (u'ISO-8859-1', u'General US & Western Europe (ISO-8859-1, ISO-LATIN-1)'), (u'Shift_JIS', u'Japanese (Shift-JIS)'), (u'ISO-2022-JP', u'Japanese (JIS)'), (u'EUC-JP', u'Japanese (EUC)'), (u'ks_c_5601-1987', u'Korean (ks_c_5601-1987)'), (u'Big5', u'Traditional Chinese (Big5)'), (u'GB2312', u'Simplified Chinese (GB2312)'), (u'Big5-HKSCS', u'Traditional Chinese Hong Kong (Big5-HKSCS)'), (u'x-SJIS_0213', u'Japanese (Shift-JIS_2004)')]) # Field name made lowercase.
    profileid = models.ForeignKey('Profile', db_column=u'ProfileId') # Field name made lowercase.
    usertype = models.CharField(db_column=u'UserType', choices=[(u'Standard', u'Standard'), (u'PowerPartner', u'Partner'), (u'PowerCustomerSuccess', u'Customer Portal Manager'), (u'CustomerSuccess', u'Customer Portal User'), (u'Guest', u'Guest'), (u'CspLitePortal', u'High Volume Portal'), (u'CsnOnly', u'CSN Only'), (u'SelfService', u'Self Service')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'User Type') # Field name made lowercase.
    languagelocalekey = models.CharField(max_length=40, verbose_name=u'Language', db_column=u'LanguageLocaleKey', choices=[(u'en_US', u'English'), (u'de', u'German'), (u'es', u'Spanish'), (u'fr', u'French'), (u'it', u'Italian'), (u'ja', u'Japanese'), (u'sv', u'Swedish'), (u'ko', u'Korean'), (u'zh_TW', u'Chinese (Traditional)'), (u'zh_CN', u'Chinese (Simplified)'), (u'pt_BR', u'Portuguese (Brazilian)'), (u'nl_NL', u'Dutch'), (u'da', u'Danish'), (u'th', u'Thai'), (u'fi', u'Finnish'), (u'ru', u'Russian'), (u'es_MX', u'Spanish (Mexican)'), (u'no', u'Norwegian')]) # Field name made lowercase.
    employeenumber = models.CharField(max_length=20, verbose_name=u'Employee Number', db_column=u'EmployeeNumber', blank=True) # Field name made lowercase.
    delegatedapproverid = models.ForeignKey('Group', null=True, db_column=u'DelegatedApproverId', blank=True) # Field name made lowercase.
    managerid = models.ForeignKey('self', null=True, db_column=u'ManagerId', blank=True) # Field name made lowercase.
    lastlogindate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Login', db_column=u'LastLoginDate', blank=True) # Field name made lowercase.
    lastpasswordchangedate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Password Change or Reset', db_column=u'LastPasswordChangeDate', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('self', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('self', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    offlinetrialexpirationdate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Offline Edition Trial Expiration Date', db_column=u'OfflineTrialExpirationDate', blank=True) # Field name made lowercase.
    offlinepdatrialexpirationdate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Sales Anywhere Trial Expiration Date', db_column=u'OfflinePdaTrialExpirationDate', blank=True) # Field name made lowercase.
    userpermissionsmarketinguser = models.BooleanField(verbose_name=u'Marketing User', db_column=u'UserPermissionsMarketingUser') # Field name made lowercase.
    userpermissionsofflineuser = models.BooleanField(verbose_name=u'Offline User', db_column=u'UserPermissionsOfflineUser') # Field name made lowercase.
    userpermissionsavantgouser = models.BooleanField(verbose_name=u'AvantGo User', db_column=u'UserPermissionsAvantgoUser') # Field name made lowercase.
    userpermissionscallcenterautologin = models.BooleanField(verbose_name=u'Auto-login To Call Center', db_column=u'UserPermissionsCallCenterAutoLogin') # Field name made lowercase.
    userpermissionsmobileuser = models.BooleanField(verbose_name=u'Apex Mobile User', db_column=u'UserPermissionsMobileUser') # Field name made lowercase.
    userpermissionssfcontentuser = models.BooleanField(verbose_name=u'Salesforce CRM Content User', db_column=u'UserPermissionsSFContentUser') # Field name made lowercase.
    userpermissionsknowledgeuser = models.BooleanField(verbose_name=u'Knowledge User', db_column=u'UserPermissionsKnowledgeUser') # Field name made lowercase.
    userpermissionsinteractionuser = models.BooleanField(verbose_name=u'Force.com Flow User', db_column=u'UserPermissionsInteractionUser') # Field name made lowercase.
    userpermissionssupportuser = models.BooleanField(verbose_name=u'Service Cloud User', db_column=u'UserPermissionsSupportUser') # Field name made lowercase.
    userpermissionsjigsawprospectinguser = models.BooleanField(verbose_name=u'Data.com User', db_column=u'UserPermissionsJigsawProspectingUser') # Field name made lowercase.
    userpermissionschatteranswersuser = models.BooleanField(verbose_name=u'Chatter Answers User', db_column=u'UserPermissionsChatterAnswersUser') # Field name made lowercase.
    userpermissionsworkdotcomuserfeature = models.BooleanField(verbose_name=u'Work.com User', db_column=u'UserPermissionsWorkDotComUserFeature') # Field name made lowercase.
    forecastenabled = models.BooleanField(verbose_name=u'Allow Forecasting', db_column=u'ForecastEnabled') # Field name made lowercase.
    userpreferencesactivityreminderspopup = models.BooleanField(verbose_name=u'ActivityRemindersPopup', db_column=u'UserPreferencesActivityRemindersPopup') # Field name made lowercase.
    userpreferenceseventreminderscheckboxdefault = models.BooleanField(verbose_name=u'EventRemindersCheckboxDefault', db_column=u'UserPreferencesEventRemindersCheckboxDefault') # Field name made lowercase.
    userpreferencestaskreminderscheckboxdefault = models.BooleanField(verbose_name=u'TaskRemindersCheckboxDefault', db_column=u'UserPreferencesTaskRemindersCheckboxDefault') # Field name made lowercase.
    userpreferencesremindersoundoff = models.BooleanField(verbose_name=u'ReminderSoundOff', db_column=u'UserPreferencesReminderSoundOff') # Field name made lowercase.
    userpreferencesdisableallfeedsemail = models.BooleanField(verbose_name=u'DisableAllFeedsEmail', db_column=u'UserPreferencesDisableAllFeedsEmail') # Field name made lowercase.
    userpreferencesdisablefollowersemail = models.BooleanField(verbose_name=u'DisableFollowersEmail', db_column=u'UserPreferencesDisableFollowersEmail') # Field name made lowercase.
    userpreferencesdisableprofilepostemail = models.BooleanField(verbose_name=u'DisableProfilePostEmail', db_column=u'UserPreferencesDisableProfilePostEmail') # Field name made lowercase.
    userpreferencesdisablechangecommentemail = models.BooleanField(verbose_name=u'DisableChangeCommentEmail', db_column=u'UserPreferencesDisableChangeCommentEmail') # Field name made lowercase.
    userpreferencesdisablelatercommentemail = models.BooleanField(verbose_name=u'DisableLaterCommentEmail', db_column=u'UserPreferencesDisableLaterCommentEmail') # Field name made lowercase.
    userpreferencesdisprofpostcommentemail = models.BooleanField(verbose_name=u'DisProfPostCommentEmail', db_column=u'UserPreferencesDisProfPostCommentEmail') # Field name made lowercase.
    userpreferencesapexpagesdevelopermode = models.BooleanField(verbose_name=u'ApexPagesDeveloperMode', db_column=u'UserPreferencesApexPagesDeveloperMode') # Field name made lowercase.
    userpreferenceshidecsngetchattermobiletask = models.BooleanField(verbose_name=u'HideCSNGetChatterMobileTask', db_column=u'UserPreferencesHideCSNGetChatterMobileTask') # Field name made lowercase.
    userpreferencesdisablementionspostemail = models.BooleanField(verbose_name=u'DisableMentionsPostEmail', db_column=u'UserPreferencesDisableMentionsPostEmail') # Field name made lowercase.
    userpreferencesdismentionscommentemail = models.BooleanField(verbose_name=u'DisMentionsCommentEmail', db_column=u'UserPreferencesDisMentionsCommentEmail') # Field name made lowercase.
    userpreferenceshidecsndesktoptask = models.BooleanField(verbose_name=u'HideCSNDesktopTask', db_column=u'UserPreferencesHideCSNDesktopTask') # Field name made lowercase.
    userpreferenceshidechatteronboardingsplash = models.BooleanField(verbose_name=u'HideChatterOnboardingSplash', db_column=u'UserPreferencesHideChatterOnboardingSplash') # Field name made lowercase.
    userpreferenceshidesecondchatteronboardingsplash = models.BooleanField(verbose_name=u'HideSecondChatterOnboardingSplash', db_column=u'UserPreferencesHideSecondChatterOnboardingSplash') # Field name made lowercase.
    userpreferencesdiscommentafterlikeemail = models.BooleanField(verbose_name=u'DisCommentAfterLikeEmail', db_column=u'UserPreferencesDisCommentAfterLikeEmail') # Field name made lowercase.
    userpreferencesdisablelikeemail = models.BooleanField(verbose_name=u'DisableLikeEmail', db_column=u'UserPreferencesDisableLikeEmail') # Field name made lowercase.
    userpreferencesdisablemessageemail = models.BooleanField(verbose_name=u'DisableMessageEmail', db_column=u'UserPreferencesDisableMessageEmail') # Field name made lowercase.
    userpreferencesjigsawlistuser = models.BooleanField(verbose_name=u'JigsawListUser', db_column=u'UserPreferencesJigsawListUser') # Field name made lowercase.
    userpreferencesdisablebookmarkemail = models.BooleanField(verbose_name=u'DisableBookmarkEmail', db_column=u'UserPreferencesDisableBookmarkEmail') # Field name made lowercase.
    userpreferencesdisablesharepostemail = models.BooleanField(verbose_name=u'DisableSharePostEmail', db_column=u'UserPreferencesDisableSharePostEmail') # Field name made lowercase.
    userpreferencesenableautosubforfeeds = models.BooleanField(verbose_name=u'EnableAutoSubForFeeds', db_column=u'UserPreferencesEnableAutoSubForFeeds') # Field name made lowercase.
    userpreferencesdisablefilesharenotificationsforapi = models.BooleanField(verbose_name=u'DisableFileShareNotificationsForApi', db_column=u'UserPreferencesDisableFileShareNotificationsForApi') # Field name made lowercase.
    userpreferencesshowtitletoexternalusers = models.BooleanField(verbose_name=u'ShowTitleToExternalUsers', db_column=u'UserPreferencesShowTitleToExternalUsers') # Field name made lowercase.
    userpreferencesshowmanagertoexternalusers = models.BooleanField(verbose_name=u'ShowManagerToExternalUsers', db_column=u'UserPreferencesShowManagerToExternalUsers') # Field name made lowercase.
    userpreferencesshowemailtoexternalusers = models.BooleanField(verbose_name=u'ShowEmailToExternalUsers', db_column=u'UserPreferencesShowEmailToExternalUsers') # Field name made lowercase.
    userpreferencesshowworkphonetoexternalusers = models.BooleanField(verbose_name=u'ShowWorkPhoneToExternalUsers', db_column=u'UserPreferencesShowWorkPhoneToExternalUsers') # Field name made lowercase.
    userpreferencesshowmobilephonetoexternalusers = models.BooleanField(verbose_name=u'ShowMobilePhoneToExternalUsers', db_column=u'UserPreferencesShowMobilePhoneToExternalUsers') # Field name made lowercase.
    userpreferencesshowfaxtoexternalusers = models.BooleanField(verbose_name=u'ShowFaxToExternalUsers', db_column=u'UserPreferencesShowFaxToExternalUsers') # Field name made lowercase.
    userpreferencesshowstreetaddresstoexternalusers = models.BooleanField(verbose_name=u'ShowStreetAddressToExternalUsers', db_column=u'UserPreferencesShowStreetAddressToExternalUsers') # Field name made lowercase.
    userpreferencesshowcitytoexternalusers = models.BooleanField(verbose_name=u'ShowCityToExternalUsers', db_column=u'UserPreferencesShowCityToExternalUsers') # Field name made lowercase.
    userpreferencesshowstatetoexternalusers = models.BooleanField(verbose_name=u'ShowStateToExternalUsers', db_column=u'UserPreferencesShowStateToExternalUsers') # Field name made lowercase.
    userpreferencesshowpostalcodetoexternalusers = models.BooleanField(verbose_name=u'ShowPostalCodeToExternalUsers', db_column=u'UserPreferencesShowPostalCodeToExternalUsers') # Field name made lowercase.
    userpreferencesshowcountrytoexternalusers = models.BooleanField(verbose_name=u'ShowCountryToExternalUsers', db_column=u'UserPreferencesShowCountryToExternalUsers') # Field name made lowercase.
    userpreferencesshowprofilepictoguestusers = models.BooleanField(verbose_name=u'ShowProfilePicToGuestUsers', db_column=u'UserPreferencesShowProfilePicToGuestUsers') # Field name made lowercase.
    userpreferencesshowtitletoguestusers = models.BooleanField(verbose_name=u'ShowTitleToGuestUsers', db_column=u'UserPreferencesShowTitleToGuestUsers') # Field name made lowercase.
    userpreferencesshowcitytoguestusers = models.BooleanField(verbose_name=u'ShowCityToGuestUsers', db_column=u'UserPreferencesShowCityToGuestUsers') # Field name made lowercase.
    userpreferencesshowstatetoguestusers = models.BooleanField(verbose_name=u'ShowStateToGuestUsers', db_column=u'UserPreferencesShowStateToGuestUsers') # Field name made lowercase.
    userpreferencesshowpostalcodetoguestusers = models.BooleanField(verbose_name=u'ShowPostalCodeToGuestUsers', db_column=u'UserPreferencesShowPostalCodeToGuestUsers') # Field name made lowercase.
    userpreferencesshowcountrytoguestusers = models.BooleanField(verbose_name=u'ShowCountryToGuestUsers', db_column=u'UserPreferencesShowCountryToGuestUsers') # Field name made lowercase.
    userpreferencesdisablefeedbackemail = models.BooleanField(verbose_name=u'DisableFeedbackEmail', db_column=u'UserPreferencesDisableFeedbackEmail') # Field name made lowercase.
    userpreferencesdisablecoachingemail = models.BooleanField(verbose_name=u'DisableCoachingEmail', db_column=u'UserPreferencesDisableCoachingEmail') # Field name made lowercase.
    userpreferencesdisablegoalemail = models.BooleanField(verbose_name=u'DisableGoalEmail', db_column=u'UserPreferencesDisableGoalEmail') # Field name made lowercase.
    userpreferencesdisableworkemail = models.BooleanField(verbose_name=u'DisableWorkEmail', db_column=u'UserPreferencesDisableWorkEmail') # Field name made lowercase.
    userpreferenceshides1browserui = models.BooleanField(verbose_name=u'HideS1BrowserUI', db_column=u'UserPreferencesHideS1BrowserUI') # Field name made lowercase.
    userpreferencesdisableendorsementemail = models.BooleanField(verbose_name=u'DisableEndorsementEmail', db_column=u'UserPreferencesDisableEndorsementEmail') # Field name made lowercase.
    contactid = models.ForeignKey('Contact', null=True, db_column=u'ContactId', blank=True) # Field name made lowercase.
    accountid = models.ForeignKey('Account', null=True, db_column=u'AccountId', blank=True) # Field name made lowercase.
    callcenterid = models.ForeignKey('Callcenter', null=True, db_column=u'CallCenterId', blank=True) # Field name made lowercase.
    extension = models.CharField(max_length=40, verbose_name=u'Extension', db_column=u'Extension', blank=True) # Field name made lowercase.
    portalrole = models.CharField(db_column=u'PortalRole', choices=[(u'Executive', u'Executive'), (u'Manager', u'Manager'), (u'Worker', u'User'), (u'PersonAccount', u'Person Account')], max_length=40, blank=True, sf_read_only=models.NOT_UPDATEABLE, verbose_name=u'Portal Role Level') # Field name made lowercase.
    isportalenabled = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Is Portal Enabled', db_column=u'IsPortalEnabled') # Field name made lowercase.
    federationidentifier = models.CharField(max_length=512, verbose_name=u'SAML Federation ID', db_column=u'FederationIdentifier', blank=True) # Field name made lowercase.
    aboutme = models.TextField(verbose_name=u'About Me', db_column=u'AboutMe', blank=True) # Field name made lowercase.
    fullphotourl = models.URLField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Url for full-sized Photo', db_column=u'FullPhotoUrl', blank=True) # Field name made lowercase.
    smallphotourl = models.URLField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Url for Thumbnail sized Photo', db_column=u'SmallPhotoUrl', blank=True) # Field name made lowercase.
    digestfrequency = models.CharField(max_length=40, verbose_name=u'Chatter Email Highlights Frequency', db_column=u'DigestFrequency', choices=[(u'D', u'Daily'), (u'W', u'Weekly'), (u'N', u'Never')]) # Field name made lowercase.
    defaultgroupnotificationfrequency = models.CharField(max_length=40, verbose_name=u'Default Notification Frequency when Joining Groups', db_column=u'DefaultGroupNotificationFrequency', choices=[(u'P', u'Email on Each Post'), (u'D', u'Daily Digests'), (u'W', u'Weekly Digests'), (u'N', u'Never')]) # Field name made lowercase.
    jigsawimportlimitoverride = models.IntegerField(null=True, verbose_name=u'Data.com Monthly Addition Limit', db_column=u'JigsawImportLimitOverride', blank=True) # Field name made lowercase.
    lastvieweddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Viewed Date', db_column=u'LastViewedDate', blank=True) # Field name made lowercase.
    lastreferenceddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Referenced Date', db_column=u'LastReferencedDate', blank=True) # Field name made lowercase.
    original_object_id__c = models.CharField(max_length=18, verbose_name=u'Original Object ID', db_column=u'Original_Object_ID__c', blank=True) # Field name made lowercase.
    mkto_si__iscachinganonwebactivitylist__c = models.BooleanField(verbose_name=u'IsCachingAnonWebActivityList', db_column=u'mkto_si__IsCachingAnonWebActivityList__c') # Field name made lowercase.
    mkto_si__iscachingbestbets__c = models.BooleanField(verbose_name=u'IsCachingBestBets', db_column=u'mkto_si__IsCachingBestBets__c') # Field name made lowercase.
    mkto_si__iscachingemailactivitylist__c = models.BooleanField(verbose_name=u'IsCachingEmailActivityList', db_column=u'mkto_si__IsCachingEmailActivityList__c') # Field name made lowercase.
    mkto_si__iscachinggroupedwebactivitylist__c = models.BooleanField(verbose_name=u'IsCachingGroupedWebActivityList', db_column=u'mkto_si__IsCachingGroupedWebActivityList__c') # Field name made lowercase.
    mkto_si__iscachinginterestingmomentslist__c = models.BooleanField(verbose_name=u'IsCachingInterestingMomentsList', db_column=u'mkto_si__IsCachingInterestingMomentsList__c') # Field name made lowercase.
    mkto_si__iscachingscoringlist__c = models.BooleanField(verbose_name=u'IsCachingScoringList', db_column=u'mkto_si__IsCachingScoringList__c') # Field name made lowercase.
    mkto_si__iscachingstreamlist__c = models.BooleanField(verbose_name=u'IsCachingStreamList', db_column=u'mkto_si__IsCachingStreamList__c') # Field name made lowercase.
    mkto_si__iscachingwatchlist__c = models.BooleanField(verbose_name=u'IsCachingWatchList', db_column=u'mkto_si__IsCachingWatchList__c') # Field name made lowercase.
    mkto_si__iscachingwebactivitylist__c = models.BooleanField(verbose_name=u'IsCachingWebActivityList', db_column=u'mkto_si__IsCachingWebActivityList__c') # Field name made lowercase.
    mkto_si__sales_insight_counter__c = models.DecimalField(db_column=u'mkto_si__Sales_Insight_Counter__c', decimal_places=0, max_digits=4, blank=True, null=True, verbose_name=u'Marketo Sales Insight Welcome Counter') # Field name made lowercase.
    defaultleadowner__c = models.BooleanField(help_text=u'This user could act as the initial owner for leads which are created through various sources like Marketo, Portal, Manual entry etc. This indicator is used by lead assignment rule to reassign it to one of the unassigned lead queue.', verbose_name=u'Default Lead Owner', db_column=u'DefaultLeadOwner__c') # Field name made lowercase.
    leadassignmentagentstatus__c = models.CharField(db_column=u'LeadAssignmentAgentStatus__c', choices=[(u'Available', u'Available'), (u'Busy', u'Busy'), (u'In Training', u'In Training'), (u'Offline', u'Offline'), (u'On Call', u'On Call'), (u'Unavailable', u'Unavailable')], max_length=255, blank=True, help_text=u'Identifies the current availability of a user agent to receive lead assignments', verbose_name=u'Lead Assignment - Agent Status') # Field name made lowercase.
    leadlastassignedon__c = models.DateTimeField(help_text=u'When was the last time a new lead was assigned to this user? This field is auto populated by the lead assignment batch job.', null=True, verbose_name=u'Lead Last Assigned On', db_column=u'LeadLastAssignedOn__c', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'User'
        verbose_name = 'User'
        verbose_name_plural = 'Users'
        # keyPrefix = '005'

class Useraccountteammember(models.Model):
    ownerid = models.ForeignKey('User', db_column=u'OwnerId') # Field name made lowercase.
    userid = models.ForeignKey('User', db_column=u'UserId') # Field name made lowercase.
    accountaccesslevel = models.CharField(max_length=40, verbose_name=u'Account Access', db_column=u'AccountAccessLevel', choices=[(u'Read', u'Read Only'), (u'Edit', u'Read/Write')]) # Field name made lowercase.
    opportunityaccesslevel = models.CharField(max_length=40, verbose_name=u'Opportunity Access', db_column=u'OpportunityAccessLevel', choices=[(u'None', u'Private'), (u'Read', u'Read Only'), (u'Edit', u'Read/Write')]) # Field name made lowercase.
    caseaccesslevel = models.CharField(max_length=40, verbose_name=u'Case Access', db_column=u'CaseAccessLevel', choices=[(u'None', u'Private'), (u'Read', u'Read Only'), (u'Edit', u'Read/Write')]) # Field name made lowercase.
    contactaccesslevel = models.CharField(max_length=40, verbose_name=u'Contact Access', sf_read_only=models.READ_ONLY, db_column=u'ContactAccessLevel', choices=[(u'None', u'Private'), (u'Read', u'Read Only'), (u'Edit', u'Read/Write')]) # Field name made lowercase.
    teammemberrole = models.CharField(blank=True, max_length=40, verbose_name=u'Team Role', db_column=u'TeamMemberRole', choices=[(u'Account Manager', u'Account Manager'), (u'Channel Manager', u'Channel Manager'), (u'Executive Sponsor', u'Executive Sponsor'), (u'Lead Qualifier', u'Lead Qualifier'), (u'Pre-Sales Consultant', u'Pre-Sales Consultant'), (u'Sales Manager', u'Sales Manager'), (u'Sales Rep', u'Sales Rep')]) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'UserAccountTeamMember'
        verbose_name = 'User Account Team Member'
        verbose_name_plural = 'User Account Team Member'
        # keyPrefix = '01D'

class Userfeed(models.Model):
    parentid = models.ForeignKey('User', db_column=u'ParentId') # Field name made lowercase.
    type = models.CharField(db_column=u'Type', choices=[(u'TrackedChange', u'Tracked Change'), (u'UserStatus', u'User Status'), (u'TextPost', u'Text Post'), (u'AdvancedTextPost', u'Advanced Text Post'), (u'LinkPost', u'Link Post'), (u'ContentPost', u'Content Post'), (u'PollPost', u'Poll'), (u'RypplePost', u'Work.com Thanks'), (u'ProfileSkillPost', u'Profile Skill Post'), (u'DashboardComponentSnapshot', u'Dashboard Component Snapshot'), (u'ApprovalPost', u'Approval Post'), (u'CaseCommentPost', u'Case Comment Feed'), (u'ReplyPost', u'Reply Post'), (u'EmailMessageEvent', u'Email Message Feed'), (u'CallLogPost', u'Call Log Feed'), (u'ChangeStatusPost', u'Change Status Feed'), (u'AttachArticleEvent', u'Attached Article'), (u'MilestoneEvent', u'Milestone Event'), (u'ActivityEvent', u'Activity Change'), (u'ChatTranscriptPost', u'Chat Transcript Post'), (u'CollaborationGroupCreated', u'Collaboration Group Created'), (u'CollaborationGroupUnarchived', u'Collaboration Group Reactivated'), (u'SocialPost', u'Social Post'), (u'QuestionPost', u'Question Post'), (u'FacebookPost', u'Facebook Post'), (u'BasicTemplateFeedItem', u'Basic Template Post'), (u'CreateRecordEvent', u'Created Record'), (u'CanvasPost', u'Canvas'), (u'AnnouncementPost', u'a')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Feed Item Type') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    commentcount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Comment Count', db_column=u'CommentCount') # Field name made lowercase.
    likecount = models.IntegerField(sf_read_only=models.READ_ONLY, verbose_name=u'Like Count', db_column=u'LikeCount') # Field name made lowercase.
    title = models.CharField(max_length=255, verbose_name=u'Title', sf_read_only=models.READ_ONLY, db_column=u'Title', blank=True) # Field name made lowercase.
    body = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Body', db_column=u'Body', blank=True) # Field name made lowercase.
    linkurl = models.URLField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Link Url', db_column=u'LinkUrl', blank=True) # Field name made lowercase.
    relatedrecordid = models.ForeignKey('Contentversion', null=True, db_column=u'RelatedRecordId', blank=True) # Field name made lowercase.
    contentdata = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Content Data', db_column=u'ContentData', blank=True) # Field name made lowercase.
    contentfilename = models.CharField(max_length=255, verbose_name=u'Content File Name', sf_read_only=models.READ_ONLY, db_column=u'ContentFileName', blank=True) # Field name made lowercase.
    contentdescription = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Content Description', db_column=u'ContentDescription', blank=True) # Field name made lowercase.
    contenttype = models.CharField(max_length=120, verbose_name=u'Content File Type', sf_read_only=models.READ_ONLY, db_column=u'ContentType', blank=True) # Field name made lowercase.
    contentsize = models.IntegerField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Content Size', db_column=u'ContentSize', blank=True) # Field name made lowercase.
    insertedbyid = models.ForeignKey('User', null=True, db_column=u'InsertedById', blank=True) # Field name made lowercase.
    networkscope = models.CharField(db_column=u'NetworkScope', choices=[(u'AllNetworks', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Network Scope') # Field name made lowercase.
    visibility = models.CharField(db_column=u'Visibility', choices=[(u'AllUsers', None), (u'InternalUsers', None)], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Visibility') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'UserFeed'
        verbose_name = 'User Feed'
        verbose_name_plural = 'User Feed'
        # keyPrefix = 'None'

class Userlicense(models.Model):
    licensedefinitionkey = models.CharField(max_length=40, verbose_name=u'License Def. ID', sf_read_only=models.READ_ONLY, db_column=u'LicenseDefinitionKey') # Field name made lowercase.
    name = models.CharField(max_length=40, verbose_name=u'Name', sf_read_only=models.READ_ONLY, db_column=u'Name') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'UserLicense'
        verbose_name = 'User License'
        verbose_name_plural = 'User Licenses'
        # keyPrefix = '100'

class Userlogin(models.Model):
    userid = models.ForeignKey('User', null=True, db_column=u'UserId', blank=True) # Field name made lowercase.
    isfrozen = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Is Frozen', db_column=u'IsFrozen') # Field name made lowercase.
    ispasswordlocked = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, verbose_name=u'Is Password Locked', db_column=u'IsPasswordLocked') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'UserLogin'
        verbose_name = 'User Login'
        verbose_name_plural = 'User Login'
        # keyPrefix = '0Yw'

class Userpackagelicense(models.Model):
    packagelicenseid = models.ForeignKey('Packagelicense', db_column=u'PackageLicenseId') # Field name made lowercase.
    userid = models.ForeignKey('User', db_column=u'UserId') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'UserPackageLicense'
        verbose_name = 'User Package License'
        verbose_name_plural = 'User Package License'
        # keyPrefix = '051'

class Userpreference(models.Model):
    userid = models.ForeignKey('User', db_column=u'UserId') # Field name made lowercase.
    preference = models.CharField(max_length=40, verbose_name=u'Preference', sf_read_only=models.READ_ONLY, db_column=u'Preference', choices=[(u'57', u'Event Reminder Default Lead Time'), (u'58', u'Task Reminder Default Time'), (u'91', u'Prevent Logs on Load'), (u'92', u'Autocomplete Apex After Key Press'), (u'93', u'Visualforce Viewstate Inspector'), (u'94', u'Forecasting Displayed Type'), (u'96', u'Editor Theme'), (u'97', u'Editor Font Size'), (u'98', u'Pinned Folders'), (u'99', u'Enable Query Plan'), (u'100', u'Enable New Open Dialog')]) # Field name made lowercase.
    value = models.CharField(max_length=1333, verbose_name=u'Value', sf_read_only=models.READ_ONLY, db_column=u'Value', blank=True) # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'UserPreference'
        verbose_name = 'User Preference'
        verbose_name_plural = 'User Preferences'
        # keyPrefix = '03u'

class Userprofile(models.Model):
    lastname = models.CharField(max_length=80, verbose_name=u'Last Name', sf_read_only=models.READ_ONLY, db_column=u'LastName') # Field name made lowercase.
    firstname = models.CharField(max_length=40, verbose_name=u'First Name', sf_read_only=models.READ_ONLY, db_column=u'FirstName', blank=True) # Field name made lowercase.
    name = models.CharField(max_length=121, verbose_name=u'Name', sf_read_only=models.READ_ONLY, db_column=u'Name') # Field name made lowercase.
    title = models.CharField(max_length=80, verbose_name=u'Title', sf_read_only=models.READ_ONLY, db_column=u'Title', blank=True) # Field name made lowercase.
    managerid = models.ForeignKey('self', null=True, db_column=u'ManagerId', blank=True) # Field name made lowercase.
    companyname = models.CharField(max_length=80, verbose_name=u'Company Name', sf_read_only=models.READ_ONLY, db_column=u'CompanyName', blank=True) # Field name made lowercase.
    aboutme = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'About Me', db_column=u'AboutMe', blank=True) # Field name made lowercase.
    email = models.EmailField(sf_read_only=models.READ_ONLY, verbose_name=u'E-mail', db_column=u'Email') # Field name made lowercase.
    phone = models.CharField(max_length=40, verbose_name=u'Phone', sf_read_only=models.READ_ONLY, db_column=u'Phone', blank=True) # Field name made lowercase.
    mobilephone = models.CharField(max_length=40, verbose_name=u'Cell', sf_read_only=models.READ_ONLY, db_column=u'MobilePhone', blank=True) # Field name made lowercase.
    fax = models.CharField(max_length=40, verbose_name=u'Fax', sf_read_only=models.READ_ONLY, db_column=u'Fax', blank=True) # Field name made lowercase.
    street = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Street', db_column=u'Street', blank=True) # Field name made lowercase.
    city = models.CharField(max_length=40, verbose_name=u'City', sf_read_only=models.READ_ONLY, db_column=u'City', blank=True) # Field name made lowercase.
    state = models.CharField(max_length=80, verbose_name=u'State/Province', sf_read_only=models.READ_ONLY, db_column=u'State', blank=True) # Field name made lowercase.
    postalcode = models.CharField(max_length=20, verbose_name=u'Zip/Postal Code', sf_read_only=models.READ_ONLY, db_column=u'PostalCode', blank=True) # Field name made lowercase.
    country = models.CharField(max_length=80, verbose_name=u'Country', sf_read_only=models.READ_ONLY, db_column=u'Country', blank=True) # Field name made lowercase.
    latitude = models.DecimalField(decimal_places=15, db_column=u'Latitude', sf_read_only=models.READ_ONLY, max_digits=18, blank=True, null=True, verbose_name=u'Latitude') # Field name made lowercase.
    longitude = models.DecimalField(decimal_places=15, db_column=u'Longitude', sf_read_only=models.READ_ONLY, max_digits=18, blank=True, null=True, verbose_name=u'Longitude') # Field name made lowercase.
    address = models.TextField(sf_read_only=models.READ_ONLY, verbose_name=u'Address', db_column=u'Address', blank=True) # Field name made lowercase. This field type is a guess.
    isbadged = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'User Photo has a badge overlay', db_column=u'IsBadged') # Field name made lowercase.
    badgetext = models.CharField(max_length=80, verbose_name=u'User Photo badge text overlay', sf_read_only=models.READ_ONLY, db_column=u'BadgeText', blank=True) # Field name made lowercase.
    isactive = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Active', db_column=u'IsActive') # Field name made lowercase.
    userpreferencesactivityreminderspopup = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'ActivityRemindersPopup', db_column=u'UserPreferencesActivityRemindersPopup') # Field name made lowercase.
    userpreferenceseventreminderscheckboxdefault = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'EventRemindersCheckboxDefault', db_column=u'UserPreferencesEventRemindersCheckboxDefault') # Field name made lowercase.
    userpreferencestaskreminderscheckboxdefault = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'TaskRemindersCheckboxDefault', db_column=u'UserPreferencesTaskRemindersCheckboxDefault') # Field name made lowercase.
    userpreferencesremindersoundoff = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'ReminderSoundOff', db_column=u'UserPreferencesReminderSoundOff') # Field name made lowercase.
    userpreferencesdisableallfeedsemail = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'DisableAllFeedsEmail', db_column=u'UserPreferencesDisableAllFeedsEmail') # Field name made lowercase.
    userpreferencesdisablefollowersemail = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'DisableFollowersEmail', db_column=u'UserPreferencesDisableFollowersEmail') # Field name made lowercase.
    userpreferencesdisableprofilepostemail = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'DisableProfilePostEmail', db_column=u'UserPreferencesDisableProfilePostEmail') # Field name made lowercase.
    userpreferencesdisablechangecommentemail = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'DisableChangeCommentEmail', db_column=u'UserPreferencesDisableChangeCommentEmail') # Field name made lowercase.
    userpreferencesdisablelatercommentemail = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'DisableLaterCommentEmail', db_column=u'UserPreferencesDisableLaterCommentEmail') # Field name made lowercase.
    userpreferencesdisprofpostcommentemail = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'DisProfPostCommentEmail', db_column=u'UserPreferencesDisProfPostCommentEmail') # Field name made lowercase.
    userpreferencesapexpagesdevelopermode = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'ApexPagesDeveloperMode', db_column=u'UserPreferencesApexPagesDeveloperMode') # Field name made lowercase.
    userpreferenceshidecsngetchattermobiletask = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'HideCSNGetChatterMobileTask', db_column=u'UserPreferencesHideCSNGetChatterMobileTask') # Field name made lowercase.
    userpreferencesdisablementionspostemail = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'DisableMentionsPostEmail', db_column=u'UserPreferencesDisableMentionsPostEmail') # Field name made lowercase.
    userpreferencesdismentionscommentemail = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'DisMentionsCommentEmail', db_column=u'UserPreferencesDisMentionsCommentEmail') # Field name made lowercase.
    userpreferenceshidecsndesktoptask = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'HideCSNDesktopTask', db_column=u'UserPreferencesHideCSNDesktopTask') # Field name made lowercase.
    userpreferenceshidechatteronboardingsplash = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'HideChatterOnboardingSplash', db_column=u'UserPreferencesHideChatterOnboardingSplash') # Field name made lowercase.
    userpreferenceshidesecondchatteronboardingsplash = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'HideSecondChatterOnboardingSplash', db_column=u'UserPreferencesHideSecondChatterOnboardingSplash') # Field name made lowercase.
    userpreferencesdiscommentafterlikeemail = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'DisCommentAfterLikeEmail', db_column=u'UserPreferencesDisCommentAfterLikeEmail') # Field name made lowercase.
    userpreferencesdisablelikeemail = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'DisableLikeEmail', db_column=u'UserPreferencesDisableLikeEmail') # Field name made lowercase.
    userpreferencesdisablemessageemail = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'DisableMessageEmail', db_column=u'UserPreferencesDisableMessageEmail') # Field name made lowercase.
    userpreferencesjigsawlistuser = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'JigsawListUser', db_column=u'UserPreferencesJigsawListUser') # Field name made lowercase.
    userpreferencesdisablebookmarkemail = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'DisableBookmarkEmail', db_column=u'UserPreferencesDisableBookmarkEmail') # Field name made lowercase.
    userpreferencesdisablesharepostemail = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'DisableSharePostEmail', db_column=u'UserPreferencesDisableSharePostEmail') # Field name made lowercase.
    userpreferencesenableautosubforfeeds = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'EnableAutoSubForFeeds', db_column=u'UserPreferencesEnableAutoSubForFeeds') # Field name made lowercase.
    userpreferencesdisablefilesharenotificationsforapi = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'DisableFileShareNotificationsForApi', db_column=u'UserPreferencesDisableFileShareNotificationsForApi') # Field name made lowercase.
    userpreferencesshowtitletoexternalusers = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'ShowTitleToExternalUsers', db_column=u'UserPreferencesShowTitleToExternalUsers') # Field name made lowercase.
    userpreferencesshowmanagertoexternalusers = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'ShowManagerToExternalUsers', db_column=u'UserPreferencesShowManagerToExternalUsers') # Field name made lowercase.
    userpreferencesshowemailtoexternalusers = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'ShowEmailToExternalUsers', db_column=u'UserPreferencesShowEmailToExternalUsers') # Field name made lowercase.
    userpreferencesshowworkphonetoexternalusers = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'ShowWorkPhoneToExternalUsers', db_column=u'UserPreferencesShowWorkPhoneToExternalUsers') # Field name made lowercase.
    userpreferencesshowmobilephonetoexternalusers = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'ShowMobilePhoneToExternalUsers', db_column=u'UserPreferencesShowMobilePhoneToExternalUsers') # Field name made lowercase.
    userpreferencesshowfaxtoexternalusers = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'ShowFaxToExternalUsers', db_column=u'UserPreferencesShowFaxToExternalUsers') # Field name made lowercase.
    userpreferencesshowstreetaddresstoexternalusers = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'ShowStreetAddressToExternalUsers', db_column=u'UserPreferencesShowStreetAddressToExternalUsers') # Field name made lowercase.
    userpreferencesshowcitytoexternalusers = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'ShowCityToExternalUsers', db_column=u'UserPreferencesShowCityToExternalUsers') # Field name made lowercase.
    userpreferencesshowstatetoexternalusers = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'ShowStateToExternalUsers', db_column=u'UserPreferencesShowStateToExternalUsers') # Field name made lowercase.
    userpreferencesshowpostalcodetoexternalusers = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'ShowPostalCodeToExternalUsers', db_column=u'UserPreferencesShowPostalCodeToExternalUsers') # Field name made lowercase.
    userpreferencesshowcountrytoexternalusers = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'ShowCountryToExternalUsers', db_column=u'UserPreferencesShowCountryToExternalUsers') # Field name made lowercase.
    userpreferencesshowprofilepictoguestusers = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'ShowProfilePicToGuestUsers', db_column=u'UserPreferencesShowProfilePicToGuestUsers') # Field name made lowercase.
    userpreferencesshowtitletoguestusers = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'ShowTitleToGuestUsers', db_column=u'UserPreferencesShowTitleToGuestUsers') # Field name made lowercase.
    userpreferencesshowcitytoguestusers = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'ShowCityToGuestUsers', db_column=u'UserPreferencesShowCityToGuestUsers') # Field name made lowercase.
    userpreferencesshowstatetoguestusers = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'ShowStateToGuestUsers', db_column=u'UserPreferencesShowStateToGuestUsers') # Field name made lowercase.
    userpreferencesshowpostalcodetoguestusers = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'ShowPostalCodeToGuestUsers', db_column=u'UserPreferencesShowPostalCodeToGuestUsers') # Field name made lowercase.
    userpreferencesshowcountrytoguestusers = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'ShowCountryToGuestUsers', db_column=u'UserPreferencesShowCountryToGuestUsers') # Field name made lowercase.
    userpreferencesdisablefeedbackemail = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'DisableFeedbackEmail', db_column=u'UserPreferencesDisableFeedbackEmail') # Field name made lowercase.
    userpreferencesdisablecoachingemail = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'DisableCoachingEmail', db_column=u'UserPreferencesDisableCoachingEmail') # Field name made lowercase.
    userpreferencesdisablegoalemail = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'DisableGoalEmail', db_column=u'UserPreferencesDisableGoalEmail') # Field name made lowercase.
    userpreferencesdisableworkemail = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'DisableWorkEmail', db_column=u'UserPreferencesDisableWorkEmail') # Field name made lowercase.
    userpreferenceshides1browserui = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'HideS1BrowserUI', db_column=u'UserPreferencesHideS1BrowserUI') # Field name made lowercase.
    userpreferencesdisableendorsementemail = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'DisableEndorsementEmail', db_column=u'UserPreferencesDisableEndorsementEmail') # Field name made lowercase.
    fullphotourl = models.URLField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Url for full-sized Photo', db_column=u'FullPhotoUrl', blank=True) # Field name made lowercase.
    smallphotourl = models.URLField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Url for Thumbnail sized Photo', db_column=u'SmallPhotoUrl', blank=True) # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'UserProfile'
        verbose_name = 'User Profile'
        verbose_name_plural = 'User Profiles'
        # keyPrefix = 'None'

class Userrecordaccess(models.Model):
    userid = models.ForeignKey('User', db_column=u'UserId') # Field name made lowercase.
    recordid = models.CharField(max_length=40, verbose_name=u'Record ID', sf_read_only=models.READ_ONLY, db_column=u'RecordId') # Field name made lowercase.
    hasreadaccess = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Has Read Access', db_column=u'HasReadAccess') # Field name made lowercase.
    haseditaccess = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Has Edit Access', db_column=u'HasEditAccess') # Field name made lowercase.
    hasdeleteaccess = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Has Delete Access', db_column=u'HasDeleteAccess') # Field name made lowercase.
    hastransferaccess = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Has Transfer Access', db_column=u'HasTransferAccess') # Field name made lowercase.
    hasallaccess = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Has All Access', db_column=u'HasAllAccess') # Field name made lowercase.
    maxaccesslevel = models.CharField(db_column=u'MaxAccessLevel', choices=[(u'None', u'Private'), (u'Read', u'Read Only'), (u'Edit', u'Read/Write'), (u'Delete', u'Delete'), (u'Transfer', u'Read/Write/Transfer'), (u'All', u'Owner')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Maximum Access Level') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'UserRecordAccess'
        verbose_name = 'User Record Access'
        verbose_name_plural = 'User Record Access'
        # keyPrefix = 'None'

class Userrole(models.Model):
    name = models.CharField(max_length=80, verbose_name=u'Name', db_column=u'Name') # Field name made lowercase.
    parentroleid = models.ForeignKey('self', null=True, db_column=u'ParentRoleId', blank=True) # Field name made lowercase.
    rollupdescription = models.CharField(max_length=80, verbose_name=u'Description', db_column=u'RollupDescription', blank=True) # Field name made lowercase.
    opportunityaccessforaccountowner = models.CharField(max_length=40, verbose_name=u'Opportunity Access Level for Account Owner', db_column=u'OpportunityAccessForAccountOwner', choices=[(u'None', u'Private'), (u'Read', u'Read Only'), (u'Edit', u'Read/Write')]) # Field name made lowercase.
    caseaccessforaccountowner = models.CharField(blank=True, max_length=40, verbose_name=u'Case Access Level for Account Owner', db_column=u'CaseAccessForAccountOwner', choices=[(u'None', u'Private'), (u'Read', u'Read Only'), (u'Edit', u'Read/Write')]) # Field name made lowercase.
    contactaccessforaccountowner = models.CharField(db_column=u'ContactAccessForAccountOwner', choices=[(u'None', u'Private'), (u'Read', u'Read Only'), (u'Edit', u'Read/Write')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Contact Access Level for Account Owner') # Field name made lowercase.
    forecastuserid = models.ForeignKey('User', null=True, db_column=u'ForecastUserId', blank=True) # Field name made lowercase.
    mayforecastmanagershare = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'May Forecast Manager Share', db_column=u'MayForecastManagerShare') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    developername = models.CharField(max_length=80, verbose_name=u'Developer Name', db_column=u'DeveloperName', blank=True) # Field name made lowercase.
    portalaccountid = models.ForeignKey('Account', null=True, db_column=u'PortalAccountId', blank=True) # Field name made lowercase.
    portaltype = models.CharField(db_column=u'PortalType', choices=[(u'None', u'None'), (u'CustomerPortal', u'Customer Portal'), (u'Partner', u'Partner Portal')], max_length=40, blank=True, sf_read_only=models.NOT_UPDATEABLE, verbose_name=u'Portal Type') # Field name made lowercase.
    portalrole = models.CharField(db_column=u'PortalRole', choices=[(u'Executive', u'Executive'), (u'Manager', u'Manager'), (u'Worker', u'User'), (u'PersonAccount', u'Person Account')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Portal Role') # Field name made lowercase.
    portalaccountownerid = models.ForeignKey('User', null=True, db_column=u'PortalAccountOwnerId', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'UserRole'
        verbose_name = 'Role'
        verbose_name_plural = 'Role'
        # keyPrefix = '00E'

class Usershare(models.Model):
    userid = models.ForeignKey('User', db_column=u'UserId') # Field name made lowercase.
    userorgroupid = models.ForeignKey('Group', db_column=u'UserOrGroupId') # Field name made lowercase.
    useraccesslevel = models.CharField(max_length=40, verbose_name=u'User Access Level', db_column=u'UserAccessLevel', choices=[(u'Read', u'Read Only'), (u'Edit', u'Read/Write')]) # Field name made lowercase.
    rowcause = models.CharField(db_column=u'RowCause', choices=[(u'Owner', u'Owner'), (u'Manual', u'Manual Sharing'), (u'Rule', u'Sharing Rule'), (u'ImplicitChild', u'Account Sharing'), (u'ImplicitParent', u'Associated record owner or sharing'), (u'Team', u'Sales Team'), (u'Territory', u'Territory Assignment Rule'), (u'TerritoryManual', u'Territory Manual'), (u'TerritoryRule', u'Territory Sharing Rule')], max_length=40, blank=True, sf_read_only=models.READ_ONLY, verbose_name=u'Row Cause') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    isactive = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Active', db_column=u'IsActive') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'UserShare'
        verbose_name = 'User Share'
        verbose_name_plural = 'User Share'
        # keyPrefix = '0N2'

class Vote(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    parentid = models.ForeignKey('Solution', db_column=u'ParentId') # Field name made lowercase.
    type = models.CharField(max_length=40, verbose_name=u'Vote Type', sf_read_only=models.NOT_UPDATEABLE, db_column=u'Type', choices=[(u'Up', None), (u'Down', None), (u'1', None), (u'2', None), (u'3', None), (u'4', None), (u'5', None)]) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'Vote'
        verbose_name = 'Vote'
        verbose_name_plural = 'Votes'
        # keyPrefix = '083'

class Weblink(models.Model):
    pageorsobjecttype = models.CharField(max_length=40, verbose_name=u'Page Or sObject Type Name', sf_read_only=models.NOT_UPDATEABLE, db_column=u'PageOrSobjectType', choices=[(u'Account', None), (u'Accumulators__c', None), (u'Activity', None), (u'AdditionalUserData__c', None), (u'Appeal__c', None), (u'Asset', None), (u'Authorized_Representative__c', None), (u'AutoPayOptions__c', None), (u'Campaign', None), (u'CampaignMember', None), (u'Carrier__c', None), (u'Case', None), (u'Claim__c', None), (u'Contact', None), (u'ContentVersion', None), (u'Contract', None), (u'CustomPageItem', None), (u'DashboardComponent', None), (u'DataMigration__c', None), (u'DataMigrationItem__c', None), (u'Employer_Payments__c', None), (u'Event', None), (u'Family__c', None), (u'FollowUp__c', None), (u'Group_Member__c', None), (u'Group_Member_Dependent__c', None), (u'Group_Quote__c', None), (u'IM_834_IN__c', None), (u'Lead', None), (u'legacyAccountsDedupResults__c', None), (u'Medical_Management__c', None), (u'Medication__c', None), (u'mkto_si__Best_Bets_View__c', None), (u'mkto_si__Best_Bets_View_Detail__c', None), (u'mkto_si__BestBetsCache__c', None), (u'mkto_si__EmailActivityCache__c', None), (u'mkto_si__Get_Method_Argus__c', None), (u'mkto_si__GroupedWebActivityCache__c', None), (u'mkto_si__InterestingMomentsCache__c', None), (u'mkto_si__Marketo_Sales_Insight_Config__c', None), (u'mkto_si__ScoringCache__c', None), (u'mkto_si__Value__c', None), (u'mkto_si__WebActivityCache__c', None), (u'Opportunity', None), (u'OpportunityLineItem', None), (u'Payment_History__c', None), (u'Person_Payment__c', None), (u'Policy__c', None), (u'Product2', None), (u'Quote', None), (u'QuoteLineItem', None), (u'Record_Audit__c', None), (u'Solution', None), (u'Survey__c', None), (u'Survey_Choices__c', None), (u'Survey_Members__c', None), (u'Survey_Response__c', None), (u'SurveyQuestions__c', None), (u'Task', None), (u'User', None), (u'WorkCoaching', None), (u'WorkFeedback', None), (u'WorkFeedbackQuestion', None), (u'WorkFeedbackQuestionSet', None), (u'WorkFeedbackRequest', None), (u'WorkGoal', None), (u'WorkGoalCollaborator', None), (u'WorkGoalLink', None), (u'WorkPerformanceCycle', None)]) # Field name made lowercase.
    name = models.CharField(max_length=240, verbose_name=u'Name', db_column=u'Name') # Field name made lowercase.
    isprotected = models.BooleanField(verbose_name=u'Protected Component', db_column=u'IsProtected') # Field name made lowercase.
    url = models.TextField(verbose_name=u'URL', db_column=u'Url', blank=True) # Field name made lowercase.
    encodingkey = models.CharField(max_length=40, verbose_name=u'Link Encoding', db_column=u'EncodingKey', choices=[(u'UTF-8', u'Unicode (UTF-8)'), (u'ISO-8859-1', u'General US & Western Europe (ISO-8859-1, ISO-LATIN-1)'), (u'Shift_JIS', u'Japanese (Shift-JIS)'), (u'ISO-2022-JP', u'Japanese (JIS)'), (u'EUC-JP', u'Japanese (EUC)'), (u'ks_c_5601-1987', u'Korean (ks_c_5601-1987)'), (u'Big5', u'Traditional Chinese (Big5)'), (u'GB2312', u'Simplified Chinese (GB2312)'), (u'Big5-HKSCS', u'Traditional Chinese Hong Kong (Big5-HKSCS)'), (u'x-SJIS_0213', u'Japanese (Shift-JIS_2004)')]) # Field name made lowercase.
    linktype = models.CharField(max_length=40, verbose_name=u'Content Source', db_column=u'LinkType', choices=[(u'url', u'URL'), (u'sControl', u'Custom S-Control'), (u'javascript', u'OnClick JavaScript'), (u'page', u'Visualforce Page'), (u'flow', u'Flow')]) # Field name made lowercase.
    opentype = models.CharField(max_length=40, verbose_name=u'Behavior', db_column=u'OpenType', choices=[(u'newWindow', u'Display in new window'), (u'sidebar', u'Display in existing window with sidebar'), (u'noSidebar', u'Display in existing window without sidebar'), (u'replace', u'Display in existing window without sidebar or header'), (u'onClickJavaScript', u'Execute JavaScript')]) # Field name made lowercase.
    height = models.IntegerField(null=True, verbose_name=u'Height (in pixels)', db_column=u'Height', blank=True) # Field name made lowercase.
    width = models.IntegerField(null=True, verbose_name=u'Width (in pixels)', db_column=u'Width', blank=True) # Field name made lowercase.
    showslocation = models.BooleanField(verbose_name=u'Show Address Bar', db_column=u'ShowsLocation') # Field name made lowercase.
    hasscrollbars = models.BooleanField(verbose_name=u'Show Scrollbars', db_column=u'HasScrollbars') # Field name made lowercase.
    hastoolbar = models.BooleanField(verbose_name=u'Show Toolbars', db_column=u'HasToolbar') # Field name made lowercase.
    hasmenubar = models.BooleanField(verbose_name=u'Show Menu Bar', db_column=u'HasMenubar') # Field name made lowercase.
    showsstatus = models.BooleanField(verbose_name=u'Show Status Bar', db_column=u'ShowsStatus') # Field name made lowercase.
    isresizable = models.BooleanField(verbose_name=u'Resizeable', db_column=u'IsResizable') # Field name made lowercase.
    position = models.CharField(blank=True, max_length=40, verbose_name=u'Window Position', db_column=u'Position', choices=[(u'fullScreen', None), (u'none', None), (u'topLeft', None)]) # Field name made lowercase.
    scontrolid = models.ForeignKey('Apexpage', null=True, db_column=u'ScontrolId', blank=True) # Field name made lowercase.
    masterlabel = models.CharField(max_length=240, verbose_name=u'Label', db_column=u'MasterLabel', blank=True) # Field name made lowercase.
    description = models.TextField(verbose_name=u'Description', db_column=u'Description', blank=True) # Field name made lowercase.
    displaytype = models.CharField(max_length=40, verbose_name=u'Display Type', db_column=u'DisplayType', choices=[(u'L', u'Detail Page Link'), (u'B', u'Detail Page Button'), (u'M', u'List Button')]) # Field name made lowercase.
    requirerowselection = models.BooleanField(verbose_name=u'Require Row Selection', db_column=u'RequireRowSelection') # Field name made lowercase.
    namespaceprefix = models.CharField(max_length=15, verbose_name=u'Namespace Prefix', sf_read_only=models.READ_ONLY, db_column=u'NamespacePrefix', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'WebLink'
        verbose_name = 'Custom Button or Link'
        verbose_name_plural = 'Custom Buttons or Links'
        # keyPrefix = '00b'

class LegacyaccountsdedupresultsC(models.Model):
    ownerid = models.ForeignKey('Group', db_column=u'OwnerId') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'legacyAccountsDedupResults Name', db_column=u'Name', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    jobid__c = models.CharField(max_length=20, verbose_name=u'JobID', db_column=u'JobID__c', blank=True) # Field name made lowercase.
    childjobid__c = models.CharField(max_length=20, verbose_name=u'childJobID', db_column=u'childJobID__c', blank=True) # Field name made lowercase.
    numetlaccounts__c = models.DecimalField(db_column=u'NumETLAccounts__c', decimal_places=0, max_digits=18, blank=True, null=True, verbose_name=u'NumETLAccounts') # Field name made lowercase.
    nummatchinglegacyaccounts__c = models.DecimalField(db_column=u'NumMatchingLegacyAccounts__c', decimal_places=0, max_digits=18, blank=True, null=True, verbose_name=u'NumMatchingLegacyAccounts') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'legacyAccountsDedupResults__c'
        verbose_name = 'legacyAccountsDedupResults'
        verbose_name_plural = 'legacyAccountsDedupResults'
        # keyPrefix = 'a0c'

class MktoSiBestbetscacheC(models.Model):
    ownerid = models.ForeignKey('Group', db_column=u'OwnerId') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'BestBetsVO__c Name', db_column=u'Name', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    mkto_si__accountlinkname__c = models.CharField(max_length=255, verbose_name=u'AccountLinkName', db_column=u'mkto_si__AccountLinkName__c', blank=True) # Field name made lowercase.
    mkto_si__accountlink__c = models.URLField(null=True, verbose_name=u'AccountLink', db_column=u'mkto_si__AccountLink__c', blank=True) # Field name made lowercase.
    mkto_si__bestbetsview__c = models.CharField(max_length=9, verbose_name=u'BestBetsView', db_column=u'mkto_si__BestBetsView__c', blank=True) # Field name made lowercase.
    mkto_si__contactid__c = models.CharField(max_length=18, verbose_name=u'ContactId', db_column=u'mkto_si__ContactId__c', blank=True) # Field name made lowercase.
    mkto_si__contactlink__c = models.URLField(null=True, verbose_name=u'ContactLink', db_column=u'mkto_si__ContactLink__c', blank=True) # Field name made lowercase.
    mkto_si__contactname__c = models.CharField(max_length=20, verbose_name=u'ContactName', db_column=u'mkto_si__ContactName__c', blank=True) # Field name made lowercase.
    mkto_si__id__c = models.CharField(max_length=18, verbose_name=u'Id', db_column=u'mkto_si__Id__c', blank=True) # Field name made lowercase.
    mkto_si__limdate__c = models.DateTimeField(null=True, verbose_name=u'LIMDate', db_column=u'mkto_si__LIMDate__c', blank=True) # Field name made lowercase.
    mkto_si__limdesc__c = models.CharField(max_length=255, verbose_name=u'LIMDesc', db_column=u'mkto_si__LIMDesc__c', blank=True) # Field name made lowercase.
    mkto_si__limtype__c = models.CharField(max_length=100, verbose_name=u'LIMType', db_column=u'mkto_si__LIMType__c', blank=True) # Field name made lowercase.
    mkto_si__leadscore__c = models.CharField(max_length=4, verbose_name=u'LeadScore', db_column=u'mkto_si__LeadScore__c', blank=True) # Field name made lowercase.
    mkto_si__priority__c = models.CharField(max_length=4, verbose_name=u'Priority', db_column=u'mkto_si__Priority__c', blank=True) # Field name made lowercase.
    mkto_si__relativescore__c = models.CharField(max_length=4, verbose_name=u'RelativeScore', db_column=u'mkto_si__RelativeScore__c', blank=True) # Field name made lowercase.
    mkto_si__rownum__c = models.CharField(max_length=3, verbose_name=u'RowNum', db_column=u'mkto_si__RowNum__c', blank=True) # Field name made lowercase.
    mkto_si__sobjecttype__c = models.CharField(blank=True, max_length=255, verbose_name=u'SObjectType', db_column=u'mkto_si__SObjectType__c', choices=[(u'User', u'User'), (u'Lead', u'Lead'), (u'Contact', u'Contact')]) # Field name made lowercase.
    mkto_si__status__c = models.CharField(max_length=255, verbose_name=u'Status', db_column=u'mkto_si__Status__c', blank=True) # Field name made lowercase.
    mkto_si__totalcount__c = models.CharField(max_length=9, verbose_name=u'TotalCount', db_column=u'mkto_si__TotalCount__c', blank=True) # Field name made lowercase.
    mkto_si__urgency__c = models.CharField(max_length=4, verbose_name=u'Urgency', db_column=u'mkto_si__Urgency__c', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'mkto_si__BestBetsCache__c'
        verbose_name = 'BestBetsCache'
        verbose_name_plural = 'BestBetsCache'
        # keyPrefix = 'a0B'

class MktoSiBestBetsViewDetailC(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'Bets Bets View Detail Name', db_column=u'Name', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    mkto_si__best_bets_view__c = models.ForeignKey('MktoSiBestBetsViewC', db_column=u'mkto_si__Best_Bets_View__c') # Field name made lowercase.
    mkto_si__fieldlabel__c = models.CharField(max_length=100, verbose_name=u'Field Label', db_column=u'mkto_si__FieldLabel__c', blank=True) # Field name made lowercase.
    mkto_si__fieldname__c = models.CharField(max_length=100, verbose_name=u'Field Name', db_column=u'mkto_si__FieldName__c', blank=True) # Field name made lowercase.
    mkto_si__fieldnumber__c = models.DecimalField(db_column=u'mkto_si__FieldNumber__c', decimal_places=0, max_digits=2, blank=True, null=True, verbose_name=u'Field Number') # Field name made lowercase.
    mkto_si__fieldtype__c = models.CharField(blank=True, max_length=255, verbose_name=u'Field Type', db_column=u'mkto_si__FieldType__c', choices=[(u'String', u'String'), (u'Number', u'Number'), (u'Boolean', u'Boolean')]) # Field name made lowercase.
    mkto_si__lookupvalue__c = models.CharField(max_length=255, verbose_name=u'Lookup Value', db_column=u'mkto_si__LookupValue__c', blank=True) # Field name made lowercase.
    mkto_si__operator__c = models.CharField(blank=True, max_length=255, verbose_name=u'Operator', db_column=u'mkto_si__Operator__c', choices=[(u'is', u'is'), (u'equals', u'equals'), (u'not equal to', u'not equal to'), (u'contains', u'contains'), (u'less than', u'less than'), (u'greater than', u'greater than'), (u'less or equal', u'less or equal'), (u'greater or equal', u'greater or equal')]) # Field name made lowercase.
    mkto_si__showfield__c = models.BooleanField(verbose_name=u'Show Field', db_column=u'mkto_si__ShowField__c') # Field name made lowercase.
    mkto_si__value__c = models.CharField(max_length=255, verbose_name=u'Value', db_column=u'mkto_si__Value__c', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'mkto_si__Best_Bets_View_Detail__c'
        verbose_name = 'Best Bets View Detail'
        verbose_name_plural = 'Best Bets View Details'
        # keyPrefix = 'a0C'

class MktoSiBestBetsViewC(models.Model):
    ownerid = models.ForeignKey('Group', db_column=u'OwnerId') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'Best Bets View Name', db_column=u'Name', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    mkto_si__includedefaultcolumns__c = models.BooleanField(verbose_name=u'Include Default Columns', db_column=u'mkto_si__IncludeDefaultColumns__c') # Field name made lowercase.
    mkto_si__maxpages__c = models.DecimalField(db_column=u'mkto_si__MaxPages__c', decimal_places=0, max_digits=4, blank=True, null=True, verbose_name=u'Max Pages') # Field name made lowercase.
    mkto_si__maxrows__c = models.DecimalField(db_column=u'mkto_si__MaxRows__c', decimal_places=0, max_digits=4, blank=True, null=True, verbose_name=u'Max Rows') # Field name made lowercase.
    mkto_si__object__c = models.CharField(blank=True, max_length=255, verbose_name=u'Object', db_column=u'mkto_si__Object__c', choices=[(u'Contact', u'Contact'), (u'Lead', u'Lead')]) # Field name made lowercase.
    mkto_si__ownerfilter__c = models.CharField(max_length=3, verbose_name=u'Owner Filter', db_column=u'mkto_si__OwnerFilter__c', blank=True) # Field name made lowercase.
    mkto_si__showrecordswithnegativescores__c = models.BooleanField(verbose_name=u'Show Records With Negative Scores', db_column=u'mkto_si__ShowRecordsWithNegativeScores__c') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'mkto_si__Best_Bets_View__c'
        verbose_name = 'Best Bets View'
        verbose_name_plural = 'Best Bets Views'
        # keyPrefix = 'a0D'

class MktoSiEmailactivitycacheC(models.Model):
    ownerid = models.ForeignKey('Group', db_column=u'OwnerId') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'EmailActivityCache Name', db_column=u'Name', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    mkto_si__accountlinkname__c = models.CharField(max_length=255, verbose_name=u'AccountLinkName', db_column=u'mkto_si__AccountLinkName__c', blank=True) # Field name made lowercase.
    mkto_si__accountlink__c = models.URLField(null=True, verbose_name=u'AccountLink', db_column=u'mkto_si__AccountLink__c', blank=True) # Field name made lowercase.
    mkto_si__activitydt__c = models.DateTimeField(null=True, verbose_name=u'ActivityDT', db_column=u'mkto_si__ActivityDT__c', blank=True) # Field name made lowercase.
    mkto_si__campaign__c = models.CharField(max_length=255, verbose_name=u'Campaign', db_column=u'mkto_si__Campaign__c', blank=True) # Field name made lowercase.
    mkto_si__clickcount__c = models.CharField(max_length=9, verbose_name=u'ClickCount', db_column=u'mkto_si__ClickCount__c', blank=True) # Field name made lowercase.
    mkto_si__contactlinkname__c = models.CharField(max_length=255, verbose_name=u'ContactLinkName', db_column=u'mkto_si__ContactLinkName__c', blank=True) # Field name made lowercase.
    mkto_si__contactlink__c = models.URLField(null=True, verbose_name=u'ContactLink', db_column=u'mkto_si__ContactLink__c', blank=True) # Field name made lowercase.
    mkto_si__id__c = models.CharField(max_length=18, verbose_name=u'Id', db_column=u'mkto_si__Id__c', blank=True) # Field name made lowercase.
    mkto_si__messageid__c = models.CharField(max_length=18, verbose_name=u'MessageId', db_column=u'mkto_si__MessageId__c', blank=True) # Field name made lowercase.
    mkto_si__messagethreadindex__c = models.CharField(max_length=9, verbose_name=u'MessageThreadIndex', db_column=u'mkto_si__MessageThreadIndex__c', blank=True) # Field name made lowercase.
    mkto_si__messagetype__c = models.CharField(max_length=20, verbose_name=u'MessageType', db_column=u'mkto_si__MessageType__c', blank=True) # Field name made lowercase.
    mkto_si__opencount__c = models.CharField(max_length=9, verbose_name=u'OpenCount', db_column=u'mkto_si__OpenCount__c', blank=True) # Field name made lowercase.
    mkto_si__rownum__c = models.CharField(max_length=3, verbose_name=u'RowNum', db_column=u'mkto_si__RowNum__c', blank=True) # Field name made lowercase.
    mkto_si__status__c = models.CharField(max_length=255, verbose_name=u'Status', db_column=u'mkto_si__Status__c', blank=True) # Field name made lowercase.
    mkto_si__subject__c = models.CharField(max_length=255, verbose_name=u'Subject', db_column=u'mkto_si__Subject__c', blank=True) # Field name made lowercase.
    mkto_si__threadnumber__c = models.CharField(max_length=9, verbose_name=u'ThreadNumber', db_column=u'mkto_si__ThreadNumber__c', blank=True) # Field name made lowercase.
    mkto_si__threadsubject__c = models.CharField(max_length=255, verbose_name=u'ThreadSubject', db_column=u'mkto_si__ThreadSubject__c', blank=True) # Field name made lowercase.
    mkto_si__totalcount__c = models.CharField(max_length=9, verbose_name=u'TotalCount', db_column=u'mkto_si__TotalCount__c', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'mkto_si__EmailActivityCache__c'
        verbose_name = 'EmailActivityCache'
        verbose_name_plural = 'EmailActivityCache'
        # keyPrefix = 'a0E'

class MktoSiGetMethodArgusHistory(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    parentid = models.ForeignKey('MktoSiGetMethodArgusC', db_column=u'ParentId') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    field = models.CharField(max_length=255, verbose_name=u'Changed Field', sf_read_only=models.READ_ONLY, db_column=u'Field', choices=[(u'created', u'Created.'), (u'feedEvent', u'Feed event'), (u'mkto_si__ArguName__c', None), (u'mkto_si__ArguValue__c', None), (u'mkto_si__ContactType__c', None), (u'mkto_si__Key__c', None), (u'mkto_si__User_Id__c', None), (u'Name', None), (u'Owner', None), (u'ownerAccepted', u'Owner (Accepted)'), (u'ownerAssignment', u'Owner (Assignment)'), (u'locked', u'Record locked.'), (u'unlocked', u'Record unlocked.')]) # Field name made lowercase.
    oldvalue = models.CharField(max_length=255, verbose_name=u'Old Value', sf_read_only=models.READ_ONLY, db_column=u'OldValue', blank=True) # Field name made lowercase.
    newvalue = models.CharField(max_length=255, verbose_name=u'New Value', sf_read_only=models.READ_ONLY, db_column=u'NewValue', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'mkto_si__Get_Method_Argus__History'
        verbose_name = 'History: GetMethodArgu'
        verbose_name_plural = 'History: GetMethodArgu'
        # keyPrefix = 'None'

class MktoSiGetMethodArgusC(models.Model):
    ownerid = models.ForeignKey('Group', db_column=u'OwnerId') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'GetMethodArgu Name', db_column=u'Name', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    lastactivitydate = models.DateField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Activity Date', db_column=u'LastActivityDate', blank=True) # Field name made lowercase.
    mkto_si__arguname__c = models.CharField(max_length=255, verbose_name=u'ArguName', db_column=u'mkto_si__ArguName__c') # Field name made lowercase.
    mkto_si__arguvalue__c = models.TextField(verbose_name=u'ArguValue', db_column=u'mkto_si__ArguValue__c', blank=True) # Field name made lowercase.
    mkto_si__contacttype__c = models.CharField(max_length=255, verbose_name=u'ContactType', db_column=u'mkto_si__ContactType__c') # Field name made lowercase.
    mkto_si__key__c = models.CharField(max_length=255, verbose_name=u'Key', db_column=u'mkto_si__Key__c') # Field name made lowercase.
    mkto_si__user_id__c = models.CharField(max_length=255, verbose_name=u'User Id', db_column=u'mkto_si__User_Id__c') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'mkto_si__Get_Method_Argus__c'
        verbose_name = 'GetMethodArgu'
        verbose_name_plural = 'GetMethodArgus'
        # keyPrefix = 'a0F'

class MktoSiGroupedwebactivitycacheC(models.Model):
    ownerid = models.ForeignKey('Group', db_column=u'OwnerId') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'GroupedWebActivityCache Name', db_column=u'Name', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    mkto_si__accountlinkname__c = models.CharField(max_length=255, verbose_name=u'AccountLinkName', db_column=u'mkto_si__AccountLinkName__c', blank=True) # Field name made lowercase.
    mkto_si__accountlink__c = models.URLField(null=True, verbose_name=u'AccountLink', db_column=u'mkto_si__AccountLink__c', blank=True) # Field name made lowercase.
    mkto_si__city__c = models.CharField(max_length=30, verbose_name=u'City', db_column=u'mkto_si__City__c', blank=True) # Field name made lowercase.
    mkto_si__contactlinkname__c = models.CharField(max_length=255, verbose_name=u'ContactLinkName', db_column=u'mkto_si__ContactLinkName__c', blank=True) # Field name made lowercase.
    mkto_si__contactlink__c = models.URLField(null=True, verbose_name=u'ContactLink', db_column=u'mkto_si__ContactLink__c', blank=True) # Field name made lowercase.
    mkto_si__country__c = models.CharField(max_length=30, verbose_name=u'Country', db_column=u'mkto_si__Country__c', blank=True) # Field name made lowercase.
    mkto_si__id__c = models.CharField(max_length=18, verbose_name=u'Id', db_column=u'mkto_si__Id__c', blank=True) # Field name made lowercase.
    mkto_si__isanonymous__c = models.BooleanField(verbose_name=u'IsAnonymous', db_column=u'mkto_si__IsAnonymous__c') # Field name made lowercase.
    mkto_si__lastvisitdt__c = models.DateTimeField(null=True, verbose_name=u'LastVisitDT', db_column=u'mkto_si__LastVisitDT__c', blank=True) # Field name made lowercase.
    mkto_si__pageviews__c = models.CharField(max_length=9, verbose_name=u'PageViews', db_column=u'mkto_si__PageViews__c', blank=True) # Field name made lowercase.
    mkto_si__rownum__c = models.CharField(max_length=3, verbose_name=u'RowNum', db_column=u'mkto_si__RowNum__c', blank=True) # Field name made lowercase.
    mkto_si__searchlinkname__c = models.CharField(max_length=255, verbose_name=u'SearchLinkName', db_column=u'mkto_si__SearchLinkName__c', blank=True) # Field name made lowercase.
    mkto_si__searchlink__c = models.URLField(null=True, verbose_name=u'SearchLink', db_column=u'mkto_si__SearchLink__c', blank=True) # Field name made lowercase.
    mkto_si__state__c = models.CharField(max_length=20, verbose_name=u'State', db_column=u'mkto_si__State__c', blank=True) # Field name made lowercase.
    mkto_si__totalcount__c = models.CharField(max_length=9, verbose_name=u'TotalCount', db_column=u'mkto_si__TotalCount__c', blank=True) # Field name made lowercase.
    mkto_si__wpagelinkname__c = models.CharField(max_length=255, verbose_name=u'WPageLinkName', db_column=u'mkto_si__WPageLinkName__c', blank=True) # Field name made lowercase.
    mkto_si__wpagelink__c = models.URLField(null=True, verbose_name=u'WPageLink', db_column=u'mkto_si__WPageLink__c', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'mkto_si__GroupedWebActivityCache__c'
        verbose_name = 'GroupedWebActivityCache'
        verbose_name_plural = 'GroupedWebActivityCache'
        # keyPrefix = 'a0G'

class MktoSiInterestingmomentscacheC(models.Model):
    ownerid = models.ForeignKey('Group', db_column=u'OwnerId') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'InterestingMomentsCache Name', db_column=u'Name', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    mkto_si__accountlinkname__c = models.CharField(max_length=255, verbose_name=u'AccountLinkName', db_column=u'mkto_si__AccountLinkName__c', blank=True) # Field name made lowercase.
    mkto_si__accountlink__c = models.URLField(null=True, verbose_name=u'AccountLink', db_column=u'mkto_si__AccountLink__c', blank=True) # Field name made lowercase.
    mkto_si__activitydt__c = models.DateTimeField(null=True, verbose_name=u'ActivityDT', db_column=u'mkto_si__ActivityDT__c', blank=True) # Field name made lowercase.
    mkto_si__campaign__c = models.CharField(max_length=255, verbose_name=u'Campaign', db_column=u'mkto_si__Campaign__c', blank=True) # Field name made lowercase.
    mkto_si__contactlinkname__c = models.CharField(max_length=255, verbose_name=u'ContactLinkName', db_column=u'mkto_si__ContactLinkName__c', blank=True) # Field name made lowercase.
    mkto_si__contactlink__c = models.URLField(null=True, verbose_name=u'ContactLink', db_column=u'mkto_si__ContactLink__c', blank=True) # Field name made lowercase.
    mkto_si__id__c = models.CharField(max_length=18, verbose_name=u'Id', db_column=u'mkto_si__Id__c', blank=True) # Field name made lowercase.
    mkto_si__momentnote__c = models.CharField(max_length=255, verbose_name=u'MomentNote', db_column=u'mkto_si__MomentNote__c', blank=True) # Field name made lowercase.
    mkto_si__momenttype__c = models.CharField(max_length=255, verbose_name=u'MomentType', db_column=u'mkto_si__MomentType__c', blank=True) # Field name made lowercase.
    mkto_si__rownum__c = models.CharField(max_length=3, verbose_name=u'RowNum', db_column=u'mkto_si__RowNum__c', blank=True) # Field name made lowercase.
    mkto_si__totalcount__c = models.CharField(max_length=9, verbose_name=u'TotalCount', db_column=u'mkto_si__TotalCount__c', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'mkto_si__InterestingMomentsCache__c'
        verbose_name = 'InterestingMomentsCache'
        verbose_name_plural = 'InterestingMomentsCache'
        # keyPrefix = 'a0H'

class MktoSiMarketosettingsC(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=38, verbose_name=u'Name', db_column=u'Name') # Field name made lowercase.
    setupownerid = models.ForeignKey('Organization', null=True, db_column=u'SetupOwnerId', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    mkto_si__batchsize__c = models.CharField(max_length=3, verbose_name=u'Batch Size', db_column=u'mkto_si__BatchSize__c', blank=True) # Field name made lowercase.
    mkto_si__cacheminutesuntilexpired__c = models.CharField(max_length=3, verbose_name=u'CacheMinutesUntilExpired', db_column=u'mkto_si__CacheMinutesUntilExpired__c', blank=True) # Field name made lowercase.
    mkto_si__cachestate__c = models.BooleanField(verbose_name=u'CacheState', db_column=u'mkto_si__CacheState__c') # Field name made lowercase.
    mkto_si__minutestorefreshcache__c = models.CharField(max_length=3, verbose_name=u'MinutesToRefreshCache', db_column=u'mkto_si__MinutesToRefreshCache__c', blank=True) # Field name made lowercase.
    mkto_si__minutestorefreshleadfeed__c = models.CharField(max_length=3, verbose_name=u'MinutesToRefreshLeadFeed', db_column=u'mkto_si__MinutesToRefreshLeadFeed__c', blank=True) # Field name made lowercase.
    mkto_si__usecache__c = models.BooleanField(verbose_name=u'UseCache', db_column=u'mkto_si__UseCache__c') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'mkto_si__MarketoSettings__c'
        verbose_name = 'Marketo Settings'
        verbose_name_plural = 'Marketo Settings'
        # keyPrefix = 'a0I'

class MktoSiMarketoSalesInsightConfigHistory(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    parentid = models.ForeignKey('MktoSiMarketoSalesInsightConfigC', db_column=u'ParentId') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    field = models.CharField(max_length=255, verbose_name=u'Changed Field', sf_read_only=models.READ_ONLY, db_column=u'Field', choices=[(u'created', u'Created.'), (u'feedEvent', u'Feed event'), (u'mkto_si__API_Secret_Key__c', None), (u'mkto_si__API_URL__c', None), (u'mkto_si__API_User_Id__c', None), (u'mkto_si__Enable_Marketo_API__c', None), (u'mkto_si__Enable_RSS__c', None), (u'mkto_si__Marketo_Host__c', None), (u'Name', None), (u'Owner', None), (u'ownerAccepted', u'Owner (Accepted)'), (u'ownerAssignment', u'Owner (Assignment)'), (u'locked', u'Record locked.'), (u'unlocked', u'Record unlocked.')]) # Field name made lowercase.
    oldvalue = models.CharField(max_length=255, verbose_name=u'Old Value', sf_read_only=models.READ_ONLY, db_column=u'OldValue', blank=True) # Field name made lowercase.
    newvalue = models.CharField(max_length=255, verbose_name=u'New Value', sf_read_only=models.READ_ONLY, db_column=u'NewValue', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'mkto_si__Marketo_Sales_Insight_Config__History'
        verbose_name = 'History: Marketo Sales Insight Config'
        verbose_name_plural = 'History: Marketo Sales Insight Config'
        # keyPrefix = 'None'

class MktoSiMarketoSalesInsightConfigC(models.Model):
    ownerid = models.ForeignKey('Group', db_column=u'OwnerId') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'ID', sf_read_only=models.READ_ONLY, db_column=u'Name') # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    lastvieweddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Viewed Date', db_column=u'LastViewedDate', blank=True) # Field name made lowercase.
    lastreferenceddate = models.DateTimeField(null=True, sf_read_only=models.READ_ONLY, verbose_name=u'Last Referenced Date', db_column=u'LastReferencedDate', blank=True) # Field name made lowercase.
    mkto_si__api_secret_key__c = models.CharField(max_length=100, verbose_name=u'API Secret Key', db_column=u'mkto_si__API_Secret_Key__c') # Field name made lowercase.
    mkto_si__api_url__c = models.URLField(verbose_name=u'API URL', db_column=u'mkto_si__API_URL__c') # Field name made lowercase.
    mkto_si__api_user_id__c = models.CharField(max_length=100, verbose_name=u'API User Id', db_column=u'mkto_si__API_User_Id__c') # Field name made lowercase.
    mkto_si__enable_marketo_api__c = models.BooleanField(verbose_name=u'Enable Marketo API', db_column=u'mkto_si__Enable_Marketo_API__c') # Field name made lowercase.
    mkto_si__enable_rss__c = models.BooleanField(verbose_name=u'Show RSS Icon', db_column=u'mkto_si__Enable_RSS__c') # Field name made lowercase.
    mkto_si__marketo_host__c = models.URLField(verbose_name=u'Marketo Host', db_column=u'mkto_si__Marketo_Host__c') # Field name made lowercase.
    mkto_si__test_configuration__c = models.CharField(max_length=1300, verbose_name=u'Test Configuration', sf_read_only=models.READ_ONLY, db_column=u'mkto_si__Test_Configuration__c', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'mkto_si__Marketo_Sales_Insight_Config__c'
        verbose_name = 'Marketo Sales Insight Config'
        verbose_name_plural = 'Marketo Sales Insight Config'
        # keyPrefix = 'a0J'

class MktoSiScoringcacheC(models.Model):
    ownerid = models.ForeignKey('Group', db_column=u'OwnerId') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'ScoringCache Name', db_column=u'Name', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    mkto_si__accountlinkname__c = models.CharField(max_length=255, verbose_name=u'AccountLinkName', db_column=u'mkto_si__AccountLinkName__c', blank=True) # Field name made lowercase.
    mkto_si__accountlink__c = models.URLField(null=True, verbose_name=u'AccountLink', db_column=u'mkto_si__AccountLink__c', blank=True) # Field name made lowercase.
    mkto_si__activitydt__c = models.DateTimeField(null=True, verbose_name=u'ActivityDT', db_column=u'mkto_si__ActivityDT__c', blank=True) # Field name made lowercase.
    mkto_si__campaign__c = models.CharField(max_length=255, verbose_name=u'Campaign', db_column=u'mkto_si__Campaign__c', blank=True) # Field name made lowercase.
    mkto_si__contactlinkname__c = models.CharField(max_length=255, verbose_name=u'ContactLinkName', db_column=u'mkto_si__ContactLinkName__c', blank=True) # Field name made lowercase.
    mkto_si__contactlink__c = models.URLField(null=True, verbose_name=u'ContactLink', db_column=u'mkto_si__ContactLink__c', blank=True) # Field name made lowercase.
    mkto_si__id__c = models.CharField(max_length=18, verbose_name=u'Id', db_column=u'mkto_si__Id__c', blank=True) # Field name made lowercase.
    mkto_si__newvalue__c = models.CharField(max_length=255, verbose_name=u'NewValue', db_column=u'mkto_si__NewValue__c', blank=True) # Field name made lowercase.
    mkto_si__oldvalue__c = models.CharField(max_length=255, verbose_name=u'OldValue', db_column=u'mkto_si__OldValue__c', blank=True) # Field name made lowercase.
    mkto_si__reason__c = models.CharField(max_length=255, verbose_name=u'Reason', db_column=u'mkto_si__Reason__c', blank=True) # Field name made lowercase.
    mkto_si__rownum__c = models.CharField(max_length=3, verbose_name=u'RowNum', db_column=u'mkto_si__RowNum__c', blank=True) # Field name made lowercase.
    mkto_si__scorename__c = models.CharField(max_length=255, verbose_name=u'ScoreName', db_column=u'mkto_si__ScoreName__c', blank=True) # Field name made lowercase.
    mkto_si__totalcount__c = models.CharField(max_length=9, verbose_name=u'TotalCount', db_column=u'mkto_si__TotalCount__c', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'mkto_si__ScoringCache__c'
        verbose_name = 'ScoringCache'
        verbose_name_plural = 'ScoringCache'
        # keyPrefix = 'a0K'

class MktoSiUserpreferencesC(models.Model):
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'Name', db_column=u'Name', blank=True) # Field name made lowercase.
    setupownerid = models.ForeignKey('Organization', null=True, db_column=u'SetupOwnerId', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    mkto_si__bestbetsview__c = models.CharField(max_length=18, verbose_name=u'Best Bets View', db_column=u'mkto_si__BestBetsView__c', blank=True) # Field name made lowercase.
    mkto_si__lastwhatisnewversion__c = models.CharField(max_length=50, verbose_name=u"Last What's New Version", db_column=u'mkto_si__LastWhatIsNewVersion__c', blank=True) # Field name made lowercase.
    mkto_si__maxpagesawa__c = models.DecimalField(db_column=u'mkto_si__MaxPagesAWA__c', decimal_places=0, max_digits=3, blank=True, null=True, verbose_name=u'Max Pages Anonymous Web Activity') # Field name made lowercase.
    mkto_si__maxpagesim__c = models.DecimalField(db_column=u'mkto_si__MaxPagesIM__c', decimal_places=0, max_digits=3, blank=True, null=True, verbose_name=u'Max Pages Interesting Moments') # Field name made lowercase.
    mkto_si__maxpagesmbb__c = models.DecimalField(db_column=u'mkto_si__MaxPagesMBB__c', decimal_places=0, max_digits=3, blank=True, null=True, verbose_name=u'Max Pages My Best Bets') # Field name made lowercase.
    mkto_si__maxpagesme__c = models.DecimalField(db_column=u'mkto_si__MaxPagesME__c', decimal_places=0, max_digits=3, blank=True, null=True, verbose_name=u'Max Pages My Email') # Field name made lowercase.
    mkto_si__maxpagesmhbb__c = models.DecimalField(db_column=u'mkto_si__MaxPagesMHBB__c', decimal_places=0, max_digits=3, blank=True, null=True, verbose_name=u'Max Pages My Best Bets (Hidden)') # Field name made lowercase.
    mkto_si__maxpagesmtbb__c = models.DecimalField(db_column=u'mkto_si__MaxPagesMTBB__c', decimal_places=0, max_digits=3, blank=True, null=True, verbose_name=u"Max Pages My Team's Best Bets") # Field name made lowercase.
    mkto_si__maxpagesmwl__c = models.DecimalField(db_column=u'mkto_si__MaxPagesMWL__c', decimal_places=0, max_digits=3, blank=True, null=True, verbose_name=u'Max Pages My Watch List') # Field name made lowercase.
    mkto_si__maxpagessc__c = models.DecimalField(db_column=u'mkto_si__MaxPagesSC__c', decimal_places=0, max_digits=3, blank=True, null=True, verbose_name=u'Max Pages Score') # Field name made lowercase.
    mkto_si__maxpageswa__c = models.DecimalField(db_column=u'mkto_si__MaxPagesWA__c', decimal_places=0, max_digits=3, blank=True, null=True, verbose_name=u'Max Pages Web Activity') # Field name made lowercase.
    mkto_si__maxpages__c = models.DecimalField(db_column=u'mkto_si__MaxPages__c', decimal_places=0, max_digits=3, blank=True, null=True, verbose_name=u'Max Pages') # Field name made lowercase.
    mkto_si__showwhatisnew__c = models.BooleanField(verbose_name=u"Show What's New", db_column=u'mkto_si__ShowWhatIsNew__c') # Field name made lowercase.
    mkto_si__timeframedays__c = models.DecimalField(db_column=u'mkto_si__TimeFrameDays__c', decimal_places=0, max_digits=2, blank=True, null=True, verbose_name=u'Time Frame Days') # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'mkto_si__UserPreferences__c'
        verbose_name = 'User Preferences'
        verbose_name_plural = 'User Preferences'
        # keyPrefix = 'a0L'

class MktoSiValueC(models.Model):
    ownerid = models.ForeignKey('Group', db_column=u'OwnerId') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'Value Name', db_column=u'Name', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    mkto_si__boolean__c = models.BooleanField(verbose_name=u'Boolean', db_column=u'mkto_si__Boolean__c') # Field name made lowercase.
    mkto_si__currency__c = models.DecimalField(db_column=u'mkto_si__Currency__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Currency') # Field name made lowercase.
    mkto_si__datetime__c = models.DateTimeField(null=True, verbose_name=u'DateTime', db_column=u'mkto_si__DateTime__c', blank=True) # Field name made lowercase.
    mkto_si__date__c = models.DateField(null=True, verbose_name=u'Date', db_column=u'mkto_si__Date__c', blank=True) # Field name made lowercase.
    mkto_si__double__c = models.DecimalField(db_column=u'mkto_si__Double__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Double') # Field name made lowercase.
    mkto_si__email__c = models.EmailField(null=True, verbose_name=u'Email', db_column=u'mkto_si__Email__c', blank=True) # Field name made lowercase.
    mkto_si__percent__c = models.DecimalField(db_column=u'mkto_si__Percent__c', decimal_places=2, max_digits=18, blank=True, null=True, verbose_name=u'Percent') # Field name made lowercase.
    mkto_si__phone__c = models.CharField(max_length=40, verbose_name=u'Phone', db_column=u'mkto_si__Phone__c', blank=True) # Field name made lowercase.
    mkto_si__string__c = models.CharField(max_length=255, verbose_name=u'String', db_column=u'mkto_si__String__c', blank=True) # Field name made lowercase.
    mkto_si__textarea__c = models.TextField(verbose_name=u'Text Area', db_column=u'mkto_si__TextArea__c', blank=True) # Field name made lowercase.
    mkto_si__url__c = models.URLField(null=True, verbose_name=u'Url', db_column=u'mkto_si__Url__c', blank=True) # Field name made lowercase.
    mkto_si__valuetype__c = models.CharField(blank=True, max_length=255, verbose_name=u'Value Type', db_column=u'mkto_si__ValueType__c', choices=[(u'Boolean', u'Boolean'), (u'Date', u'Date'), (u'Datetime', u'Datetime'), (u'Picklist', u'Picklist'), (u'TextArea', u'TextArea')]) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'mkto_si__Value__c'
        verbose_name = 'Value'
        verbose_name_plural = 'Values'
        # keyPrefix = 'a0M'

class MktoSiWebactivitycacheC(models.Model):
    ownerid = models.ForeignKey('Group', db_column=u'OwnerId') # Field name made lowercase.
    isdeleted = models.BooleanField(sf_read_only=models.READ_ONLY, verbose_name=u'Deleted', db_column=u'IsDeleted') # Field name made lowercase.
    name = models.CharField(max_length=80, verbose_name=u'WebActivityCache Name', db_column=u'Name', blank=True) # Field name made lowercase.
    createddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Created Date', db_column=u'CreatedDate') # Field name made lowercase.
    createdbyid = models.ForeignKey('User', db_column=u'CreatedById') # Field name made lowercase.
    lastmodifieddate = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'Last Modified Date', db_column=u'LastModifiedDate') # Field name made lowercase.
    lastmodifiedbyid = models.ForeignKey('User', db_column=u'LastModifiedById') # Field name made lowercase.
    systemmodstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, verbose_name=u'System Modstamp', db_column=u'SystemModstamp') # Field name made lowercase.
    mkto_si__accountlinkname__c = models.CharField(max_length=255, verbose_name=u'AccountLinkName', db_column=u'mkto_si__AccountLinkName__c', blank=True) # Field name made lowercase.
    mkto_si__accountlink__c = models.URLField(null=True, verbose_name=u'AccountLink', db_column=u'mkto_si__AccountLink__c', blank=True) # Field name made lowercase.
    mkto_si__account__c = models.ForeignKey('Account', null=True, db_column=u'mkto_si__Account__c', blank=True) # Field name made lowercase.
    mkto_si__activitydt__c = models.DateTimeField(null=True, verbose_name=u'ActivityDT', db_column=u'mkto_si__ActivityDT__c', blank=True) # Field name made lowercase.
    mkto_si__contactlinkname__c = models.CharField(max_length=255, verbose_name=u'ContactLinkName', db_column=u'mkto_si__ContactLinkName__c', blank=True) # Field name made lowercase.
    mkto_si__contactlink__c = models.URLField(null=True, verbose_name=u'ContactLink', db_column=u'mkto_si__ContactLink__c', blank=True) # Field name made lowercase.
    mkto_si__contact__c = models.ForeignKey('Contact', null=True, db_column=u'mkto_si__Contact__c', blank=True) # Field name made lowercase.
    mkto_si__id__c = models.CharField(max_length=18, verbose_name=u'Id', db_column=u'mkto_si__Id__c', blank=True) # Field name made lowercase.
    mkto_si__lead__c = models.ForeignKey('Lead', null=True, db_column=u'mkto_si__Lead__c', blank=True) # Field name made lowercase.
    mkto_si__opportunity__c = models.ForeignKey('Opportunity', null=True, db_column=u'mkto_si__Opportunity__c', blank=True) # Field name made lowercase.
    mkto_si__rownum__c = models.CharField(max_length=3, verbose_name=u'RowNum', db_column=u'mkto_si__RowNum__c', blank=True) # Field name made lowercase.
    mkto_si__sactivitydt__c = models.CharField(max_length=25, verbose_name=u'SActivityDT', db_column=u'mkto_si__SActivityDT__c', blank=True) # Field name made lowercase.
    mkto_si__searchlinkname__c = models.CharField(max_length=255, verbose_name=u'SearchLinkName', db_column=u'mkto_si__SearchLinkName__c', blank=True) # Field name made lowercase.
    mkto_si__searchlink__c = models.URLField(null=True, verbose_name=u'SearchLink', db_column=u'mkto_si__SearchLink__c', blank=True) # Field name made lowercase.
    mkto_si__totalcount__c = models.CharField(max_length=9, verbose_name=u'TotalCount', db_column=u'mkto_si__TotalCount__c', blank=True) # Field name made lowercase.
    mkto_si__wpagelinkname__c = models.CharField(max_length=255, verbose_name=u'WPageLinkName', db_column=u'mkto_si__WPageLinkName__c', blank=True) # Field name made lowercase.
    mkto_si__wpagelink__c = models.URLField(null=True, verbose_name=u'WPageLink', db_column=u'mkto_si__WPageLink__c', blank=True) # Field name made lowercase.
    class Meta(models.Model.Meta):
        db_table = 'mkto_si__WebActivityCache__c'
        verbose_name = 'WebActivityCache'
        verbose_name_plural = 'WebActivityCache'
        # keyPrefix = 'a0N'

